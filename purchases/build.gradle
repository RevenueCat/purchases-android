apply from: "$rootProject.projectDir/library.gradle"
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka'

android {
    namespace 'com.revenuecat.purchases.api'

    productFlavors {
        integrationTest {
            testApplicationId obtainTestApplicationId()
            testBuildType obtainTestBuildType()
            packagingOptions {
                resources.excludes.add("META-INF/*")
            }
            minSdkVersion 21 // Needed because mockk-android requires API 21
            matchingFallbacks = ['latestDependencies']
        }
    }

}

def obtainTestApplicationId() {
    def result = "com.revenuecat.purchases.integrationTest";

    if (project.hasProperty("testApplicationId")) {
        result = project.getProperties().get("testApplicationId")
    }

    result
}

def obtainTestBuildType() {
    def result = "debug";

    if (project.hasProperty("testBuildType")) {
        result = project.getProperties().get("testBuildType")
    }

    result
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(":common")
    implementation project(":utils")
    implementation project(":feature:subscriber-attributes")
    implementation project(":feature:google")
    implementation project(":feature:identity")
    implementation project(":strings")
    api project(":public")

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "androidx.annotation:annotation:$annotationVersion"
    latestDependenciesApi "com.android.billingclient:billing:$billing4Version"
    integrationTestApi "com.android.billingclient:billing:$billing4Version"
    unityIAPCompileOnly "com.android.billingclient:billing:$billing4Version"
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycleVersion"

    testImplementation project(":test-utils")
    testImplementation "androidx.test:core:$testLibrariesVersion"
    testImplementation "androidx.test:runner:$testLibrariesVersion"
    testImplementation "androidx.test:rules:$testLibrariesVersion"
    testImplementation "androidx.test.ext:junit:$testJUnitVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation "org.assertj:assertj-core:$assertJVersion"
    testLatestDependenciesImplementation "com.android.billingclient:billing:$billing4Version"
    testUnityIAPImplementation "com.android.billingclient:billing:$billing4Version"

    integrationTestImplementation 'androidx.appcompat:appcompat:1.4.1'
    integrationTestImplementation 'com.google.android.material:material:1.6.0'
    integrationTestImplementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    androidTestIntegrationTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestIntegrationTestImplementation 'androidx.test:runner:1.4.0'
    androidTestIntegrationTestImplementation 'androidx.test:rules:1.4.0'
    androidTestIntegrationTestImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    androidTestIntegrationTestImplementation 'org.assertj:assertj-core:3.22.0'
    androidTestIntegrationTestImplementation "io.mockk:mockk-android:$mockkVersion"
    androidTestIntegrationTestImplementation "io.mockk:mockk-agent:$mockkVersion"
}

tasks.dokkaHtmlPartial.configure {
    dokkaSourceSets {
        configureEach {
            reportUndocumented.set(true)
            includeNonPublic.set(false)
            skipDeprecated.set(true)

            externalDocumentationLink {
                url.set(uri("https://developer.android.com/reference/package-list").toURL())
            }
            sourceLink {
                localDirectory.set(file("src/main/kotlin"))
                remoteUrl.set(uri("https://github.com/revenuecat/purchases-android/blob/main/purchases/src/main/kotlin").toURL())
                remoteLineSuffix.set("#L")
            }
        }
    }
}
