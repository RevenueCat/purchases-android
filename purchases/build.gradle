plugins {
    alias libs.plugins.android.library
    alias libs.plugins.kotlin.android
    alias libs.plugins.mavenPublish
    alias libs.plugins.dokka
    alias libs.plugins.kotlin.parcelize
}

apply from: "$rootProject.projectDir/library.gradle"

android {
    namespace 'com.revenuecat.purchases.api'

    buildFeatures {
        buildConfig true
    }

    flavorDimensions = ["apis"]
    productFlavors {
        defaults {
            dimension "apis"
        }
        customEntitlementComputation {
            dimension "apis"
        }
    }

    defaultConfig {
        testApplicationId obtainTestApplicationId()
        testBuildType obtainTestBuildType()
        packagingOptions {
            resources.excludes.add("META-INF/LICENSE.md")
            resources.excludes.add("META-INF/LICENSE-notice.md")
        }
    }

    testOptions {
        unitTests {
            all {
                if (project.hasProperty('RUN_INTEGRATION_TESTS')) {
                    include "com/revenuecat/purchases/backend_integration_tests/**"
                } else {
                    exclude "com/revenuecat/purchases/backend_integration_tests/**"
                }
            }
        }
    }
}

def obtainTestApplicationId() {
    def result = "com.revenuecat.purchases.integrationTest";

    if (project.hasProperty("testApplicationId")) {
        result = project.getProperties().get("testApplicationId")
    }

    result
}

def obtainTestBuildType() {
    def result = "debug";

    if (project.hasProperty("testBuildType")) {
        result = project.getProperties().get("testBuildType")
    }

    result
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation libs.kotlin.stdlib
    implementation libs.androidx.core
    implementation libs.androidx.annotation
    implementation libs.androidx.lifecycle.runtime
    implementation libs.androidx.lifecycle.common
    implementation libs.androidx.lifecycle.process
    api libs.billing
    implementation libs.tink
    implementation libs.playServices.ads.identifier

    compileOnly libs.amazon.appstore.sdk

    testImplementation libs.bundles.test
    testImplementation libs.billing
    testImplementation libs.coroutines.test
    testImplementation libs.amazon.appstore.sdk
    testImplementation libs.okhttp.mockwebserver
    testImplementation libs.playServices.ads.identifier

    androidTestImplementation libs.androidx.appcompat
    androidTestImplementation libs.androidx.lifecycle.runtime.ktx
    androidTestImplementation libs.androidx.test.espresso.core
    androidTestImplementation libs.androidx.test.runner
    androidTestImplementation libs.androidx.test.rules
    androidTestImplementation libs.androidx.test.junit
    androidTestImplementation libs.assertJ
    androidTestImplementation libs.mockk.android
    androidTestImplementation libs.mockk.agent
}

tasks.dokkaHtmlPartial.configure {
    dokkaSourceSets {
        named("customEntitlementComputation") {
            suppress.set(true)
        }
        named("defaults") {
            dependsOn("main")
            reportUndocumented.set(true)
            includeNonPublic.set(false)
            skipDeprecated.set(true)

            externalDocumentationLink {
                url.set(uri("https://developer.android.com/reference/package-list").toURL())
            }
            sourceLink {
                localDirectory.set(file("src/main/kotlin"))
                remoteUrl.set(uri("https://github.com/revenuecat/purchases-android/blob/main/purchases/src/main/kotlin").toURL())
                remoteLineSuffix.set("#L")
            }
            sourceLink {
                localDirectory.set(file("src/main/java"))
                remoteUrl.set(uri("https://github.com/revenuecat/purchases-android/blob/main/public/src/main/java").toURL())
                remoteLineSuffix.set("#L")
            }
        }
        named("main") {
            reportUndocumented.set(true)
            includeNonPublic.set(false)
            skipDeprecated.set(true)

            externalDocumentationLink {
                url.set(uri("https://developer.android.com/reference/package-list").toURL())
            }
            sourceLink {
                localDirectory.set(file("src/main/kotlin"))
                remoteUrl.set(uri("https://github.com/revenuecat/purchases-android/blob/main/purchases/src/main/kotlin").toURL())
                remoteLineSuffix.set("#L")
            }
            sourceLink {
                localDirectory.set(file("src/main/java"))
                remoteUrl.set(uri("https://github.com/revenuecat/purchases-android/blob/main/public/src/main/java").toURL())
                remoteLineSuffix.set("#L")
            }
        }
    }
}

// Remove afterEvaluate
// after https://github.com/Kotlin/kotlinx-kover/issues/362 is fixed
project.afterEvaluate {
    dependencies {
        kover(project(":feature:amazon"))
    }
}
