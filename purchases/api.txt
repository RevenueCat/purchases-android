// Signature format: 4.0
package com.revenuecat.purchases {

  public final class APIKeyValidatorTest {
    ctor public APIKeyValidatorTest();
    method public void Validation result is amazon key but google store if API key is from amazon but store is google();
    method public void Validation result is google key but amazon store if API key is from google but store is amazon();
    method public void Validation result is legacy();
    method public void Validation result is other platform if apple key();
    method public void Validation result is valid if amazon key and amazon store();
    method public void Validation result is valid if google key and google store();
  }

  public enum AmazonLWAConsentStatus {
    method public static com.revenuecat.purchases.AmazonLWAConsentStatus valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.AmazonLWAConsentStatus[] values();
    enum_constant public static final com.revenuecat.purchases.AmazonLWAConsentStatus CONSENTED;
    enum_constant public static final com.revenuecat.purchases.AmazonLWAConsentStatus UNAVAILABLE;
  }

  public class BasePurchasesIntegrationTest {
    ctor public BasePurchasesIntegrationTest();
    method protected final void ensureBlockFinishes(kotlin.jvm.functions.Function1<? super java.util.concurrent.CountDownLatch,kotlin.Unit> block);
    method protected final com.revenuecat.purchases.MainActivity getActivity();
    method public final error.NonExistentClass! getActivityScenarioRule();
    method protected final long getCurrentTimestamp();
    method protected final java.util.List<java.lang.String> getEntitlementsToVerify();
    method protected java.util.Map<java.lang.String,com.revenuecat.purchases.models.StoreTransaction> getInitialActivePurchasesToUse();
    method protected boolean getInitialForceServerErrors();
    method protected boolean getInitialForceSigningErrors();
    method protected final String? getProxyUrl();
    method protected final long getTestTimeout();
    method protected final String getTestUserId();
    method protected final void mockActivePurchases(java.util.Map<java.lang.String,com.revenuecat.purchases.models.StoreTransaction> activePurchases);
    method protected final void onActivityReady(kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.MainActivity,kotlin.Unit> block);
    method protected final void runTestActivityLifecycleScope(kotlin.jvm.functions.Function2<? super kotlinx.coroutines.CoroutineScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> testBody);
    method public final void setActivityScenarioRule(error.NonExistentClass!);
    method protected final void setUpTest(optional java.util.Map<java.lang.String,java.lang.String> initialSharedPreferences, optional com.revenuecat.purchases.EntitlementVerificationMode? entitlementVerificationMode, optional java.util.Map<java.lang.String,com.revenuecat.purchases.models.StoreTransaction> initialActivePurchases, optional boolean forceServerErrors, optional boolean forceSigningErrors, optional String? appUserID, optional kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.MainActivity,kotlin.Unit> postSetupTestCallback);
    method public static final void setupClass();
    method protected final void simulateSdkRestart(android.content.Context context, optional com.revenuecat.purchases.EntitlementVerificationMode? entitlementVerificationMode, optional boolean forceServerErrors);
    method public final void tearDown();
    property protected final com.revenuecat.purchases.MainActivity activity;
    property public final error.NonExistentClass! activityScenarioRule;
    property protected final long currentTimestamp;
    property protected final java.util.List<java.lang.String> entitlementsToVerify;
    property protected java.util.Map<java.lang.String,com.revenuecat.purchases.models.StoreTransaction> initialActivePurchasesToUse;
    property protected boolean initialForceServerErrors;
    property protected boolean initialForceSigningErrors;
    property protected final String? proxyUrl;
    property protected final long testTimeout;
    property protected final String testUserId;
    field public static final com.revenuecat.purchases.BasePurchasesIntegrationTest.Companion Companion;
  }

  public static final class BasePurchasesIntegrationTest.Companion {
    method public void setupClass();
  }

  public final class BillingFactoryTest {
    ctor public BillingFactoryTest();
    method public void BillingWrapper can be created();
    method public void BillingWrapper can be created without diagnostics tracker();
  }

  public enum CacheFetchPolicy {
    method public static com.revenuecat.purchases.CacheFetchPolicy valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.CacheFetchPolicy[] values();
    enum_constant public static final com.revenuecat.purchases.CacheFetchPolicy CACHED_OR_FETCHED;
    enum_constant public static final com.revenuecat.purchases.CacheFetchPolicy CACHE_ONLY;
    enum_constant public static final com.revenuecat.purchases.CacheFetchPolicy FETCH_CURRENT;
    enum_constant public static final com.revenuecat.purchases.CacheFetchPolicy NOT_STALE_CACHED_OR_CURRENT;
    field public static final com.revenuecat.purchases.CacheFetchPolicy.Companion Companion;
  }

  public static final class CacheFetchPolicy.Companion {
    method public com.revenuecat.purchases.CacheFetchPolicy default();
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlin.jvm.JvmInline @kotlinx.serialization.Serializable public final value class ColorAlias {
    ctor public ColorAlias(String value);
  }

  public final class Constants {
    field public static final com.revenuecat.purchases.Constants INSTANCE;
    field public static final String activeEntitlementIdsToVerify = "ACTIVE_ENTITLEMENT_IDS_TO_VERIFY";
    field public static final String apiKey = "REVENUECAT_API_KEY";
    field public static final String basePlanIdToPurchase = "BASE_PLAN_ID_TO_PURCHASE";
    field public static final String googlePurchaseToken = "GOOGLE_PURCHASE_TOKEN";
    field public static final String productIdToPurchase = "PRODUCT_ID_TO_PURCHASE";
    field public static final String proxyUrl = "NO_PROXY_URL";
  }

  public final class CoroutinesExtensionsCommonKt {
    method @kotlin.jvm.JvmSynthetic @kotlin.jvm.Throws(exceptionClasses=PurchasesTransactionException::class) public static suspend java.util.List<? extends com.revenuecat.purchases.models.StoreProduct> awaitGetProducts(com.revenuecat.purchases.Purchases, java.util.List<? extends java.lang.String> productIds, optional com.revenuecat.purchases.ProductType? type);
    method @kotlin.jvm.JvmSynthetic @kotlin.jvm.Throws(exceptionClasses=PurchasesException::class) public static suspend com.revenuecat.purchases.Offerings awaitOfferings(com.revenuecat.purchases.Purchases);
    method @kotlin.jvm.JvmSynthetic @kotlin.jvm.Throws(exceptionClasses=PurchasesTransactionException::class) public static suspend com.revenuecat.purchases.PurchaseResult awaitPurchase(com.revenuecat.purchases.Purchases, com.revenuecat.purchases.PurchaseParams purchaseParams);
    method @kotlin.jvm.JvmSynthetic @kotlin.jvm.Throws(exceptionClasses=PurchasesTransactionException::class) public static suspend com.revenuecat.purchases.CustomerInfo awaitRestore(com.revenuecat.purchases.Purchases);
  }

  public final class CoroutinesExtensionsKt {
    method @com.revenuecat.purchases.ExperimentalPreviewRevenueCatPurchasesAPI @kotlin.jvm.JvmSynthetic @kotlin.jvm.Throws(exceptionClasses=PurchasesException::class) public static suspend com.revenuecat.purchases.customercenter.CustomerCenterConfigData awaitCustomerCenterConfigData(com.revenuecat.purchases.Purchases);
    method @kotlin.jvm.JvmSynthetic @kotlin.jvm.Throws(exceptionClasses=PurchasesException::class) public static suspend com.revenuecat.purchases.CustomerInfo awaitCustomerInfo(com.revenuecat.purchases.Purchases, optional com.revenuecat.purchases.CacheFetchPolicy fetchPolicy);
    method @kotlin.jvm.JvmSynthetic @kotlin.jvm.Throws(exceptionClasses=PurchasesTransactionException::class) public static suspend com.revenuecat.purchases.data.LogInResult awaitLogIn(com.revenuecat.purchases.Purchases, String appUserID);
    method @kotlin.jvm.JvmSynthetic @kotlin.jvm.Throws(exceptionClasses=PurchasesTransactionException::class) public static suspend com.revenuecat.purchases.CustomerInfo awaitLogOut(com.revenuecat.purchases.Purchases);
    method public static suspend Object? awaitStorefrontCountryCode(com.revenuecat.purchases.Purchases, kotlin.coroutines.Continuation<? super java.lang.String>);
    method @kotlin.jvm.JvmSynthetic @kotlin.jvm.Throws(exceptionClasses=PurchasesException::class) public static suspend com.revenuecat.purchases.Offerings awaitSyncAttributesAndOfferingsIfNeeded(com.revenuecat.purchases.Purchases);
    method @kotlin.jvm.JvmSynthetic @kotlin.jvm.Throws(exceptionClasses=PurchasesException::class) public static suspend com.revenuecat.purchases.CustomerInfo awaitSyncPurchases(com.revenuecat.purchases.Purchases);
    method @kotlin.jvm.JvmSynthetic @kotlin.jvm.Throws(exceptionClasses=PurchasesException::class) public static suspend com.revenuecat.purchases.AmazonLWAConsentStatus getAmazonLWAConsentStatus(com.revenuecat.purchases.Purchases);
  }

  @kotlinx.parcelize.Parcelize @kotlinx.parcelize.TypeParceler public final class CustomerInfo implements android.os.Parcelable com.revenuecat.purchases.models.RawDataContainer<org.json.JSONObject> {
    ctor public CustomerInfo(com.revenuecat.purchases.EntitlementInfos entitlements, java.util.Map<java.lang.String,? extends java.util.Date> allExpirationDatesByProduct, java.util.Map<java.lang.String,? extends java.util.Date> allPurchaseDatesByProduct, java.util.Date requestDate, int schemaVersion, java.util.Date firstSeen, String originalAppUserId, android.net.Uri? managementURL, java.util.Date? originalPurchaseDate, org.json.JSONObject jsonObject);
    method public com.revenuecat.purchases.EntitlementInfos component1();
    method public java.util.Map<java.lang.String,java.util.Date> component2();
    method public java.util.Map<java.lang.String,java.util.Date> component3();
    method public java.util.Date component4();
    method public int component5();
    method public java.util.Date component6();
    method public String component7();
    method public android.net.Uri? component8();
    method public java.util.Date? component9();
    method public com.revenuecat.purchases.CustomerInfo copy(com.revenuecat.purchases.EntitlementInfos entitlements, java.util.Map<java.lang.String,? extends java.util.Date> allExpirationDatesByProduct, java.util.Map<java.lang.String,? extends java.util.Date> allPurchaseDatesByProduct, java.util.Date requestDate, int schemaVersion, java.util.Date firstSeen, String originalAppUserId, android.net.Uri? managementURL, java.util.Date? originalPurchaseDate, org.json.JSONObject jsonObject);
    method public java.util.Set<java.lang.String> getActiveSubscriptions();
    method public java.util.Map<java.lang.String,java.util.Date> getAllExpirationDatesByProduct();
    method public java.util.Map<java.lang.String,java.util.Date> getAllPurchaseDatesByProduct();
    method public java.util.Set<java.lang.String> getAllPurchasedProductIds();
    method @Deprecated public java.util.Set<java.lang.String> getAllPurchasedSkus();
    method public com.revenuecat.purchases.EntitlementInfos getEntitlements();
    method public java.util.Date? getExpirationDateForEntitlement(String entitlement);
    method public java.util.Date? getExpirationDateForProductId(String productId);
    method @Deprecated public java.util.Date? getExpirationDateForSku(String sku);
    method public java.util.Date getFirstSeen();
    method public java.util.Date? getLatestExpirationDate();
    method public android.net.Uri? getManagementURL();
    method public java.util.List<com.revenuecat.purchases.models.Transaction> getNonSubscriptionTransactions();
    method public String getOriginalAppUserId();
    method public java.util.Date? getOriginalPurchaseDate();
    method public java.util.Date? getPurchaseDateForEntitlement(String entitlement);
    method public java.util.Date? getPurchaseDateForProductId(String productId);
    method @Deprecated public java.util.Date? getPurchaseDateForSku(String sku);
    method public org.json.JSONObject getRawData();
    method public java.util.Date getRequestDate();
    method public int getSchemaVersion();
    method public java.util.Map<java.lang.String,com.revenuecat.purchases.SubscriptionInfo> getSubscriptionsByProductIdentifier();
    property public final java.util.Set<java.lang.String> activeSubscriptions;
    property public final java.util.Map<java.lang.String,java.util.Date> allExpirationDatesByProduct;
    property public final java.util.Map<java.lang.String,java.util.Date> allPurchaseDatesByProduct;
    property public final java.util.Set<java.lang.String> allPurchasedProductIds;
    property @Deprecated public final java.util.Set<java.lang.String> allPurchasedSkus;
    property public final com.revenuecat.purchases.EntitlementInfos entitlements;
    property public final java.util.Date firstSeen;
    property public final java.util.Date? latestExpirationDate;
    property public final android.net.Uri? managementURL;
    property public final java.util.List<com.revenuecat.purchases.models.Transaction> nonSubscriptionTransactions;
    property public final String originalAppUserId;
    property public final java.util.Date? originalPurchaseDate;
    property @kotlinx.parcelize.IgnoredOnParcel public org.json.JSONObject rawData;
    property public final java.util.Date requestDate;
    property public final int schemaVersion;
    property public final java.util.Map<java.lang.String,com.revenuecat.purchases.SubscriptionInfo> subscriptionsByProductIdentifier;
  }

  public final class CustomerInfoUpdateHandlerTest {
    ctor public CustomerInfoUpdateHandlerTest();
    method public void caching and notifying listeners caches customer info with correct parameters();
    method public void caching and notifying listeners does not notify listeners if same than previous one();
    method public void caching and notifying listeners notifies listeners if different than previous one();
    method public void does not update listener if customer info same as previous one();
    method public void does not update listener if customer info same one in several calls();
    method public void setUp();
    method public void setting listener does not send cached value if it does not exist();
    method public void setting listener doesn't send cached value if custom entitlements computation enabled();
    method public void setting listener sends cached value if it exists();
    method public void setting listener sends offline customer info cached value if it exists over cached value();
    method public void setting listener tracks customer info verification result();
    method public void tracks customer info verification result if customer info different than previous one();
    method public void updates listener if customer info different than previous one();
  }

  @kotlinx.parcelize.Parcelize public final class DangerousSettings implements android.os.Parcelable {
    ctor public DangerousSettings(optional boolean autoSyncPurchases);
    method public boolean component1();
    method public com.revenuecat.purchases.DangerousSettings copy(boolean autoSyncPurchases, boolean customEntitlementComputation);
    method public boolean getAutoSyncPurchases();
    property public final boolean autoSyncPurchases;
  }

  public final class DangerousSettingsTest {
    ctor public DangerousSettingsTest();
    method public void default autoSyncPurchases is true();
    method public void default customEntitlementComputation is false();
  }

  @kotlinx.parcelize.Parcelize @kotlinx.parcelize.TypeParceler public final class EntitlementInfo implements android.os.Parcelable com.revenuecat.purchases.models.RawDataContainer<org.json.JSONObject> {
    ctor @Deprecated public EntitlementInfo(String identifier, boolean isActive, boolean willRenew, com.revenuecat.purchases.PeriodType periodType, java.util.Date latestPurchaseDate, java.util.Date originalPurchaseDate, java.util.Date? expirationDate, com.revenuecat.purchases.Store store, String productIdentifier, String? productPlanIdentifier, boolean isSandbox, java.util.Date? unsubscribeDetectedAt, java.util.Date? billingIssueDetectedAt, com.revenuecat.purchases.OwnershipType ownershipType, org.json.JSONObject jsonObject);
    ctor public EntitlementInfo(String identifier, boolean isActive, boolean willRenew, com.revenuecat.purchases.PeriodType periodType, java.util.Date latestPurchaseDate, java.util.Date originalPurchaseDate, java.util.Date? expirationDate, com.revenuecat.purchases.Store store, String productIdentifier, String? productPlanIdentifier, boolean isSandbox, java.util.Date? unsubscribeDetectedAt, java.util.Date? billingIssueDetectedAt, com.revenuecat.purchases.OwnershipType ownershipType, org.json.JSONObject jsonObject, optional com.revenuecat.purchases.VerificationResult verification);
    method public String component1();
    method public String? component10();
    method public boolean component11();
    method public java.util.Date? component12();
    method public java.util.Date? component13();
    method public com.revenuecat.purchases.OwnershipType component14();
    method public com.revenuecat.purchases.VerificationResult component16();
    method public boolean component2();
    method public boolean component3();
    method public com.revenuecat.purchases.PeriodType component4();
    method public java.util.Date component5();
    method public java.util.Date component6();
    method public java.util.Date? component7();
    method public com.revenuecat.purchases.Store component8();
    method public String component9();
    method public com.revenuecat.purchases.EntitlementInfo copy(String identifier, boolean isActive, boolean willRenew, com.revenuecat.purchases.PeriodType periodType, java.util.Date latestPurchaseDate, java.util.Date originalPurchaseDate, java.util.Date? expirationDate, com.revenuecat.purchases.Store store, String productIdentifier, String? productPlanIdentifier, boolean isSandbox, java.util.Date? unsubscribeDetectedAt, java.util.Date? billingIssueDetectedAt, com.revenuecat.purchases.OwnershipType ownershipType, org.json.JSONObject jsonObject, com.revenuecat.purchases.VerificationResult verification);
    method public java.util.Date? getBillingIssueDetectedAt();
    method public java.util.Date? getExpirationDate();
    method public String getIdentifier();
    method public java.util.Date getLatestPurchaseDate();
    method public java.util.Date getOriginalPurchaseDate();
    method public com.revenuecat.purchases.OwnershipType getOwnershipType();
    method public com.revenuecat.purchases.PeriodType getPeriodType();
    method public String getProductIdentifier();
    method public String? getProductPlanIdentifier();
    method public org.json.JSONObject getRawData();
    method public com.revenuecat.purchases.Store getStore();
    method public java.util.Date? getUnsubscribeDetectedAt();
    method public com.revenuecat.purchases.VerificationResult getVerification();
    method public boolean getWillRenew();
    method public boolean isActive();
    method public boolean isSandbox();
    property public final java.util.Date? billingIssueDetectedAt;
    property public final java.util.Date? expirationDate;
    property public final String identifier;
    property public final boolean isActive;
    property public final boolean isSandbox;
    property public final java.util.Date latestPurchaseDate;
    property public final java.util.Date originalPurchaseDate;
    property public final com.revenuecat.purchases.OwnershipType ownershipType;
    property public final com.revenuecat.purchases.PeriodType periodType;
    property public final String productIdentifier;
    property public final String? productPlanIdentifier;
    property @kotlinx.parcelize.IgnoredOnParcel public org.json.JSONObject rawData;
    property public final com.revenuecat.purchases.Store store;
    property public final java.util.Date? unsubscribeDetectedAt;
    property public final com.revenuecat.purchases.VerificationResult verification;
    property public final boolean willRenew;
  }

  public final class EntitlementInfoHelperTest {
    ctor public EntitlementInfoHelperTest();
    method public void if syncs pending purchases fails, queries backend and returns backend result();
    method public void make sure caches are not cleared if retrieve customer info fails();
    method public void retrieveCustomerInfo tracks get customer info result on error when fetch current();
    method public void retrieveCustomerInfo tracks get customer info result on success with cached customer info();
    method public void retrieveCustomerInfo tracks get customer info result on success with stale cached customer info();
    method public void retrieveCustomerInfo tracks get customer info started event();
    method public void retrieveCustomerInfo tracks get customer info when CACHE_ONLY but no cached customer info();
    method public void retrieveCustomerInfo tracks get customer info when CACHE_ONLY with cached customer info();
    method public void retrieving customer info from CACHE_ONLY does not update listener();
    method public void retrieving customer info from CACHE_ONLY does nothing if callback is null and trackDiagnostics is false();
    method public void retrieving customer info from CACHE_ONLY fails if cant be found in cache();
    method public void retrieving customer info from CACHE_ONLY gets info from cache();
    method public void retrieving customer info from backend calculates offline entitlements();
    method public void retrieving customer info from backend calls error if error calculating offline customer info();
    method public void retrieving customer info from backend does not calculate offline entitlements if shouldnt();
    method public void retrieving customer info from backend resets offline customer info cache on success();
    method public void retrieving customer info from backend returns offline customer info();
    method public void retrieving customer info from backend updates listener with offline entitlements customer info();
    method public void retrieving customer info from cache gets offline calculated customer info even if cached version();
    method public void retrieving customer info with CACHED_OR_FETCHED gets info from cache if exists();
    method public void retrieving customer info with CACHED_OR_FETCHED initiates fetch of info if cache stale();
    method public void retrieving customer info with CACHED_OR_FETCHED updates listener if fetch successful();
    method public void retrieving customer info with FETCH_CURRENT caches and notifies listeners if successful();
    method public void retrieving customer info with FETCH_CURRENT calls error callback if error();
    method public void retrieving customer info with FETCH_CURRENT calls success callback if successful();
    method public void retrieving customer info with FETCH_CURRENT does not cache customer info if error();
    method public void retrieving customer info with FETCH_CURRENT does not call cache and notify listener if error();
    method public void retrieving customer info with FETCH_CURRENT error clears cache timestamp();
    method public void retrieving customer info with FETCH_CURRENT sets cache timestamp to now();
    method public void retrieving customer info with FETCH_CURRENT success does not clear cache timestamp();
    method public void retrieving customer info with NOT_STALE_CACHED_OR_CURRENT updates listener if fetch success();
    method public void retrieving info with CACHED_OR_FETCHED and no cache and error backend request clears cache();
    method public void retrieving info with CACHED_OR_FETCHED and no cache calls error callback if error();
    method public void retrieving info with CACHED_OR_FETCHED and no cache calls success callback if successful();
    method public void retrieving info with CACHED_OR_FETCHED and no cache fetch success does not clear cache timestamp();
    method public void retrieving info with CACHED_OR_FETCHED and no cache sets cache timestamp to now();
    method public void retrieving info with NOT_STALE_CACHED_OR_CURRENT does not use cache if stale();
    method public void retrieving info with NOT_STALE_CACHED_OR_CURRENT does not use cache if stale even if error fetching();
    method public void retrieving info with NOT_STALE_CACHED_OR_CURRENT fetches from backend if stale();
    method public void retrieving info with NOT_STALE_CACHED_OR_CURRENT uses cache if not stale();
    method public void setup();
    method public void syncs pending purchases and queries backend if none returned from syncing();
    method public void syncs pending purchases and returns result customer info();
    method public void tearDown();
  }

  @kotlinx.parcelize.Parcelize public final class EntitlementInfos implements android.os.Parcelable {
    ctor @Deprecated public EntitlementInfos(java.util.Map<java.lang.String,com.revenuecat.purchases.EntitlementInfo> all);
    ctor public EntitlementInfos(java.util.Map<java.lang.String,com.revenuecat.purchases.EntitlementInfo> all, com.revenuecat.purchases.VerificationResult verification);
    method public operator com.revenuecat.purchases.EntitlementInfo? get(String s);
    method public java.util.Map<java.lang.String,com.revenuecat.purchases.EntitlementInfo> getActive();
    method public java.util.Map<java.lang.String,com.revenuecat.purchases.EntitlementInfo> getAll();
    method public com.revenuecat.purchases.VerificationResult getVerification();
    property public final java.util.Map<java.lang.String,com.revenuecat.purchases.EntitlementInfo> active;
    property public final java.util.Map<java.lang.String,com.revenuecat.purchases.EntitlementInfo> all;
    property public final com.revenuecat.purchases.VerificationResult verification;
  }

  public enum EntitlementVerificationMode {
    method public final boolean isEnabled();
    method public static com.revenuecat.purchases.EntitlementVerificationMode valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.EntitlementVerificationMode[] values();
    property public final boolean isEnabled;
    enum_constant public static final com.revenuecat.purchases.EntitlementVerificationMode DISABLED;
    enum_constant public static final com.revenuecat.purchases.EntitlementVerificationMode INFORMATIONAL;
    field public static final com.revenuecat.purchases.EntitlementVerificationMode.Companion Companion;
  }

  public static final class EntitlementVerificationMode.Companion {
    method public com.revenuecat.purchases.EntitlementVerificationMode getDefault();
    property public final com.revenuecat.purchases.EntitlementVerificationMode default;
  }

  public final class ErrorsTest {
    ctor public ErrorsTest();
    method public void errorIsSerializable();
  }

  @kotlin.RequiresOptIn(level=kotlin.RequiresOptIn.Level.ERROR) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.CLASS, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY}) public @interface ExperimentalPreviewRevenueCatPurchasesAPI {
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlin.jvm.JvmInline @kotlinx.serialization.Serializable public final value class FontAlias {
    ctor public FontAlias(String value);
  }

  public final class IntentExtensionsKt {
    method @kotlin.jvm.JvmSynthetic public static com.revenuecat.purchases.WebPurchaseRedemption? asWebPurchaseRedemption(android.content.Intent);
  }

  @kotlin.RequiresOptIn(level=kotlin.RequiresOptIn.Level.ERROR, message="This is an internal RevenueCat API that may change frequently and without warning. " + "No compatibility guarantees are provided. It is strongly discouraged to use this API.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.CLASS, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY, kotlin.annotation.AnnotationTarget.TYPEALIAS}) public @interface InternalRevenueCatAPI {
  }

  public final class ListenerConversionsCommonKt {
    method public static void getOfferingsWith(com.revenuecat.purchases.Purchases, optional kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.PurchasesError,kotlin.Unit> onError, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.Offerings,kotlin.Unit> onSuccess);
    method public static void getProductsWith(com.revenuecat.purchases.Purchases, java.util.List<java.lang.String> productIds, com.revenuecat.purchases.ProductType? type, optional kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.PurchasesError,kotlin.Unit> onError, kotlin.jvm.functions.Function1<? super java.util.List<? extends com.revenuecat.purchases.models.StoreProduct>,kotlin.Unit> onGetStoreProducts);
    method public static void getProductsWith(com.revenuecat.purchases.Purchases, java.util.List<java.lang.String> productIds, optional kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.PurchasesError,kotlin.Unit> onError, kotlin.jvm.functions.Function1<? super java.util.List<? extends com.revenuecat.purchases.models.StoreProduct>,kotlin.Unit> onGetStoreProducts);
    method public static void purchaseWith(com.revenuecat.purchases.Purchases, com.revenuecat.purchases.PurchaseParams purchaseParams, optional kotlin.jvm.functions.Function2<? super com.revenuecat.purchases.PurchasesError,? super java.lang.Boolean,kotlin.Unit> onError, kotlin.jvm.functions.Function2<? super com.revenuecat.purchases.models.StoreTransaction,? super com.revenuecat.purchases.CustomerInfo,kotlin.Unit> onSuccess);
    method public static void restorePurchasesWith(com.revenuecat.purchases.Purchases, optional kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.PurchasesError,kotlin.Unit> onError, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.CustomerInfo,kotlin.Unit> onSuccess);
  }

  public final class ListenerConversionsKt {
    method public static void getAmazonLWAConsentStatusWith(com.revenuecat.purchases.Purchases, optional kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.PurchasesError,kotlin.Unit> onError, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.AmazonLWAConsentStatus,kotlin.Unit> onSuccess);
    method public static void getCustomerInfoWith(com.revenuecat.purchases.Purchases, com.revenuecat.purchases.CacheFetchPolicy fetchPolicy, optional kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.PurchasesError,kotlin.Unit> onError, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.CustomerInfo,kotlin.Unit> onSuccess);
    method public static void getCustomerInfoWith(com.revenuecat.purchases.Purchases, optional kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.PurchasesError,kotlin.Unit> onError, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.CustomerInfo,kotlin.Unit> onSuccess);
    method @Deprecated public static void getNonSubscriptionSkusWith(com.revenuecat.purchases.Purchases, java.util.List<java.lang.String> skus, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.PurchasesError,kotlin.Unit> onError, kotlin.jvm.functions.Function1<? super java.util.List<? extends com.revenuecat.purchases.models.StoreProduct>,kotlin.Unit> onReceiveSkus);
    method public static void getStorefrontCountryCodeWith(com.revenuecat.purchases.Purchases, optional kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.PurchasesError,kotlin.Unit> onError, kotlin.jvm.functions.Function1<? super java.lang.String,kotlin.Unit> onSuccess);
    method @Deprecated public static void getSubscriptionSkusWith(com.revenuecat.purchases.Purchases, java.util.List<java.lang.String> skus, optional kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.PurchasesError,kotlin.Unit> onError, kotlin.jvm.functions.Function1<? super java.util.List<? extends com.revenuecat.purchases.models.StoreProduct>,kotlin.Unit> onReceiveSkus);
    method public static void logInWith(com.revenuecat.purchases.Purchases, String appUserID, optional kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.PurchasesError,kotlin.Unit> onError, kotlin.jvm.functions.Function2<? super com.revenuecat.purchases.CustomerInfo,? super java.lang.Boolean,kotlin.Unit> onSuccess);
    method public static void logOutWith(com.revenuecat.purchases.Purchases, optional kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.PurchasesError,kotlin.Unit> onError, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.CustomerInfo,kotlin.Unit> onSuccess);
    method @Deprecated public static void purchasePackageWith(com.revenuecat.purchases.Purchases, android.app.Activity activity, com.revenuecat.purchases.Package packageToPurchase, optional kotlin.jvm.functions.Function2<? super com.revenuecat.purchases.PurchasesError,? super java.lang.Boolean,kotlin.Unit> onError, kotlin.jvm.functions.Function2<? super com.revenuecat.purchases.models.StoreTransaction,? super com.revenuecat.purchases.CustomerInfo,kotlin.Unit> onSuccess);
    method @Deprecated public static void purchaseProductWith(com.revenuecat.purchases.Purchases, android.app.Activity activity, com.revenuecat.purchases.models.StoreProduct storeProduct, optional kotlin.jvm.functions.Function2<? super com.revenuecat.purchases.PurchasesError,? super java.lang.Boolean,kotlin.Unit> onError, kotlin.jvm.functions.Function2<? super com.revenuecat.purchases.models.StoreTransaction,? super com.revenuecat.purchases.CustomerInfo,kotlin.Unit> onSuccess);
    method public static void syncAttributesAndOfferingsIfNeededWith(com.revenuecat.purchases.Purchases, optional kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.PurchasesError,kotlin.Unit> onError, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.Offerings,kotlin.Unit> onSuccess);
    method public static void syncPurchasesWith(com.revenuecat.purchases.Purchases, optional kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.PurchasesError,kotlin.Unit> onError, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.CustomerInfo,kotlin.Unit> onSuccess);
  }

  public interface LogHandler {
    method public void d(String tag, String msg);
    method public void e(String tag, String msg, Throwable? throwable);
    method public void i(String tag, String msg);
    method public void v(String tag, String msg);
    method public void w(String tag, String msg);
  }

  public enum LogLevel {
    method public static com.revenuecat.purchases.LogLevel valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.LogLevel[] values();
    enum_constant public static final com.revenuecat.purchases.LogLevel DEBUG;
    enum_constant public static final com.revenuecat.purchases.LogLevel ERROR;
    enum_constant public static final com.revenuecat.purchases.LogLevel INFO;
    enum_constant public static final com.revenuecat.purchases.LogLevel VERBOSE;
    enum_constant public static final com.revenuecat.purchases.LogLevel WARN;
    field public static final com.revenuecat.purchases.LogLevel.Companion Companion;
  }

  public static final class LogLevel.Companion {
  }

  public final class LogLevelTest {
    ctor public LogLevelTest();
    method public void testLogLevelComparable();
  }

  public final class LogMessage {
    ctor public LogMessage(com.revenuecat.purchases.LogLevel level, String message, optional Throwable? throwable);
    method public com.revenuecat.purchases.LogLevel component1();
    method public String component2();
    method public Throwable? component3();
    method public com.revenuecat.purchases.LogMessage copy(com.revenuecat.purchases.LogLevel level, String message, Throwable? throwable);
    method public com.revenuecat.purchases.LogLevel getLevel();
    method public String getMessage();
    method public Throwable? getThrowable();
    property public final com.revenuecat.purchases.LogLevel level;
    property public final String message;
    property public final Throwable? throwable;
  }

  public final class MainActivity extends androidx.fragment.app.FragmentActivity {
    ctor public MainActivity();
  }

  public final class NoCoreLibraryDesugaringException extends java.lang.RuntimeException {
    ctor public NoCoreLibraryDesugaringException(Throwable cause);
  }

  public final class Offering {
    ctor public Offering(String identifier, String serverDescription, java.util.Map<java.lang.String,?> metadata, java.util.List<com.revenuecat.purchases.Package> availablePackages);
    ctor public Offering(String identifier, String serverDescription, java.util.Map<java.lang.String,?> metadata, java.util.List<com.revenuecat.purchases.Package> availablePackages, optional com.revenuecat.purchases.paywalls.PaywallData? paywall);
    ctor public Offering(String identifier, String serverDescription, java.util.Map<java.lang.String,?> metadata, java.util.List<com.revenuecat.purchases.Package> availablePackages, optional com.revenuecat.purchases.paywalls.PaywallData? paywall, optional @com.revenuecat.purchases.InternalRevenueCatAPI com.revenuecat.purchases.Offering.PaywallComponents? paywallComponents);
    method public String component1();
    method public String component2();
    method public java.util.Map<java.lang.String,java.lang.Object> component3();
    method public java.util.List<com.revenuecat.purchases.Package> component4();
    method public com.revenuecat.purchases.paywalls.PaywallData? component5();
    method public com.revenuecat.purchases.Offering.PaywallComponents? component6();
    method public com.revenuecat.purchases.Offering copy(String identifier, String serverDescription, java.util.Map<java.lang.String,?> metadata, java.util.List<com.revenuecat.purchases.Package> availablePackages, com.revenuecat.purchases.paywalls.PaywallData? paywall, com.revenuecat.purchases.Offering.PaywallComponents? paywallComponents);
    method public operator com.revenuecat.purchases.Package get(String s);
    method public com.revenuecat.purchases.Package? getAnnual();
    method public java.util.List<com.revenuecat.purchases.Package> getAvailablePackages();
    method public String getIdentifier();
    method public com.revenuecat.purchases.Package? getLifetime();
    method public java.util.Map<java.lang.String,java.lang.Object> getMetadata();
    method public String getMetadataString(String key, String default);
    method public com.revenuecat.purchases.Package? getMonthly();
    method @kotlin.jvm.Throws(exceptionClasses=NoSuchElementException::class) public com.revenuecat.purchases.Package getPackage(String identifier) throws java.util.NoSuchElementException;
    method public com.revenuecat.purchases.paywalls.PaywallData? getPaywall();
    method public com.revenuecat.purchases.Offering.PaywallComponents? getPaywallComponents();
    method public String getServerDescription();
    method public com.revenuecat.purchases.Package? getSixMonth();
    method public com.revenuecat.purchases.Package? getThreeMonth();
    method public com.revenuecat.purchases.Package? getTwoMonth();
    method public com.revenuecat.purchases.Package? getWeekly();
    method public boolean hasPaywall();
    property public final com.revenuecat.purchases.Package? annual;
    property public final java.util.List<com.revenuecat.purchases.Package> availablePackages;
    property public final boolean hasPaywall;
    property public final String identifier;
    property public final com.revenuecat.purchases.Package? lifetime;
    property public final java.util.Map<java.lang.String,java.lang.Object> metadata;
    property public final com.revenuecat.purchases.Package? monthly;
    property public final com.revenuecat.purchases.paywalls.PaywallData? paywall;
    property public final com.revenuecat.purchases.Offering.PaywallComponents? paywallComponents;
    property public final String serverDescription;
    property public final com.revenuecat.purchases.Package? sixMonth;
    property public final com.revenuecat.purchases.Package? threeMonth;
    property public final com.revenuecat.purchases.Package? twoMonth;
    property public final com.revenuecat.purchases.Package? weekly;
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko public static final class Offering.PaywallComponents {
    ctor public Offering.PaywallComponents(com.revenuecat.purchases.UiConfig uiConfig, com.revenuecat.purchases.paywalls.components.common.PaywallComponentsData data);
    method public com.revenuecat.purchases.paywalls.components.common.PaywallComponentsData getData();
    method public com.revenuecat.purchases.UiConfig getUiConfig();
    property public final com.revenuecat.purchases.paywalls.components.common.PaywallComponentsData data;
    property public final com.revenuecat.purchases.UiConfig uiConfig;
  }

  public final class Offerings {
    ctor public Offerings(com.revenuecat.purchases.Offering? current, java.util.Map<java.lang.String,com.revenuecat.purchases.Offering> all);
    method public com.revenuecat.purchases.Offering? component1();
    method public java.util.Map<java.lang.String,com.revenuecat.purchases.Offering> component2();
    method public com.revenuecat.purchases.Offerings copy(com.revenuecat.purchases.Offering? current, java.util.Map<java.lang.String,com.revenuecat.purchases.Offering> all, com.revenuecat.purchases.Offerings.Placements? placements, com.revenuecat.purchases.Offerings.Targeting? targeting);
    method public operator com.revenuecat.purchases.Offering? get(String identifier);
    method public java.util.Map<java.lang.String,com.revenuecat.purchases.Offering> getAll();
    method public com.revenuecat.purchases.Offering? getCurrent();
    method public com.revenuecat.purchases.Offering? getCurrentOfferingForPlacement(String placementId);
    method public com.revenuecat.purchases.Offering? getOffering(String identifier);
    property public final java.util.Map<java.lang.String,com.revenuecat.purchases.Offering> all;
    property public final com.revenuecat.purchases.Offering? current;
  }

  public final class OfferingsTest {
    ctor public OfferingsTest();
    method public void Annual package type set properly();
    method public void Can create multiple offerings with packages of the same duration();
    method public void Custom package type set properly();
    method public void Lifetime package type set properly();
    method public void Monthly package type set properly();
    method public void Six months package type set properly();
    method public void Three months package type set properly();
    method public void Two months package type set properly();
    method public void Unknown package type set properly();
    method public void Weekly package type set properly();
    method public void createOffering returns Offering with offeringJson packages that match StoreProducts();
    method public void createOffering returns null if offeringJson contains no packages matching StoreProducts();
    method public void createOfferings creates UiConfig object();
    method public void createOfferings creates offerings();
    method public void createOfferings creates returns placement object with a fallback offering();
    method public void createOfferings creates returns placement object with no fallback offering();
    method public void createOfferings creates targeting object();
    method public void createOfferings does not set currentOffering if current_offering_id is null();
    method public void createOfferings returns empty list if no StoreProducts fetched();
    method public void createOfferings returns empty list if no offerings in json();
    method public void createOfferings returns empty list if offeringsJson contains no matching StoreProducts();
    method public void createPackage creates a Package if package json matches subscription store products();
    method public void createPackage creates a Package if packageJson matches INAPP StoreProduct();
    method public void createPackage for OTP sets offeringId on Package and OTP Product();
    method public void createPackage for sub sets presentedOfferingId on Package, product, product's defaultOption, and product's subscriptionOptions();
    method public void createPackage returns null if packageJson is missing plan_identifier();
    method public void createPackage returns null if packageJson planIdentifier doesnt match any sub StoreProduct base plan ids();
    method public void hasPaywall returns false when both paywall and paywallComponents are null();
    method public void hasPaywall returns true when paywall is not null();
    method public void hasPaywall returns true when paywallComponents is not null();
  }

  @kotlinx.serialization.Serializable public enum OwnershipType {
    method public static com.revenuecat.purchases.OwnershipType valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.OwnershipType[] values();
    enum_constant @kotlinx.serialization.SerialName("FAMILY_SHARED") public static final com.revenuecat.purchases.OwnershipType FAMILY_SHARED;
    enum_constant @kotlinx.serialization.SerialName("PURCHASED") public static final com.revenuecat.purchases.OwnershipType PURCHASED;
    enum_constant @kotlinx.serialization.SerialName("UNKNOWN") public static final com.revenuecat.purchases.OwnershipType UNKNOWN;
  }

  public final class Package {
    ctor public Package(String identifier, com.revenuecat.purchases.PackageType packageType, com.revenuecat.purchases.models.StoreProduct product, com.revenuecat.purchases.PresentedOfferingContext presentedOfferingContext);
    ctor @Deprecated public Package(String identifier, com.revenuecat.purchases.PackageType packageType, com.revenuecat.purchases.models.StoreProduct product, String offering);
    method public String component1();
    method public com.revenuecat.purchases.PackageType component2();
    method public com.revenuecat.purchases.models.StoreProduct component3();
    method public com.revenuecat.purchases.PresentedOfferingContext component4();
    method public com.revenuecat.purchases.Package copy(String identifier, com.revenuecat.purchases.PackageType packageType, com.revenuecat.purchases.models.StoreProduct product, com.revenuecat.purchases.PresentedOfferingContext presentedOfferingContext);
    method public String getIdentifier();
    method @Deprecated public String getOffering();
    method public com.revenuecat.purchases.PackageType getPackageType();
    method public com.revenuecat.purchases.PresentedOfferingContext getPresentedOfferingContext();
    method public com.revenuecat.purchases.models.StoreProduct getProduct();
    property public final String identifier;
    property @Deprecated public final String offering;
    property public final com.revenuecat.purchases.PackageType packageType;
    property public final com.revenuecat.purchases.PresentedOfferingContext presentedOfferingContext;
    property public final com.revenuecat.purchases.models.StoreProduct product;
  }

  public enum PackageType {
    method public final String! getIdentifier();
    method public static com.revenuecat.purchases.PackageType valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.PackageType[] values();
    property public final String! identifier;
    enum_constant public static final com.revenuecat.purchases.PackageType ANNUAL;
    enum_constant public static final com.revenuecat.purchases.PackageType CUSTOM;
    enum_constant public static final com.revenuecat.purchases.PackageType LIFETIME;
    enum_constant public static final com.revenuecat.purchases.PackageType MONTHLY;
    enum_constant public static final com.revenuecat.purchases.PackageType SIX_MONTH;
    enum_constant public static final com.revenuecat.purchases.PackageType THREE_MONTH;
    enum_constant public static final com.revenuecat.purchases.PackageType TWO_MONTH;
    enum_constant public static final com.revenuecat.purchases.PackageType UNKNOWN;
    enum_constant public static final com.revenuecat.purchases.PackageType WEEKLY;
  }

  public final class ParcelableTests {
    ctor public ParcelableTests();
    method public void CustomerInfo is Parcelable();
    method public void EntitlementInfo is Parcelable();
    method public void EntitlementInfos is Parcelable();
    method public void GoogleReplacementMode is Parcelable();
    method public void JSONObjectParceler works();
    method public void StoreTransaction is parcelable();
  }

  @kotlinx.serialization.Serializable public enum PeriodType {
    method public static com.revenuecat.purchases.PeriodType valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.PeriodType[] values();
    enum_constant @kotlinx.serialization.SerialName("intro") public static final com.revenuecat.purchases.PeriodType INTRO;
    enum_constant @kotlinx.serialization.SerialName("normal") public static final com.revenuecat.purchases.PeriodType NORMAL;
    enum_constant @kotlinx.serialization.SerialName("prepaid") public static final com.revenuecat.purchases.PeriodType PREPAID;
    enum_constant @kotlinx.serialization.SerialName("trial") public static final com.revenuecat.purchases.PeriodType TRIAL;
  }

  public final class PostPendingTransactionsHelperTest {
    ctor public PostPendingTransactionsHelperTest();
    method public void all non-pending purchases returned from queryPurchases are posted to backend();
    method public void if any post to backend fails, error is called();
    method public void if autosync is disabled, and sync is called, success callback with null values is called();
    method public void setUp();
    method public void skip posting pending purchases if autosync is off();
    method public void when updating pending purchases, if no purchases to sync, it calls success with null value();
    method public void when updating pending purchases, if result from querying purchases is not successful skip();
    method public void when updating pending purchases, if token has been sent, don't send it();
    method public void when updating pending purchases, if token has not been sent, send it();
    method public void when updating pending purchases, if token sent successfully clean previously sent tokens();
    method public void when updating pending purchases, if token sent successfully success callback is called();
    method public void when updating pending purchases, retrieve purchases();
  }

  public final class PostReceiptHelperTest {
    ctor public PostReceiptHelperTest();
    method public void postReceipt keeps paywall data in cache if request fails();
    method public void postReceipt posts paywall data if cached();
    method public void postTokenWithoutConsuming adds sent token if finishable error();
    method public void postTokenWithoutConsuming adds sent token on success();
    method public void postTokenWithoutConsuming caches and notifies listeners with new customer info on success();
    method public void postTokenWithoutConsuming calculates offline entitlements customer info if server error();
    method public void postTokenWithoutConsuming calls error block with expected parameters on error();
    method public void postTokenWithoutConsuming calls success block on success();
    method public void postTokenWithoutConsuming does not add sent token on error if not finishable error();
    method public void postTokenWithoutConsuming does not cache offline entitlements();
    method public void postTokenWithoutConsuming does not calculate offline entitlements customer info if not server error();
    method public void postTokenWithoutConsuming does not consume on non consumable error ();
    method public void postTokenWithoutConsuming does not consume on success();
    method public void postTokenWithoutConsuming does not mark attributes as synced if using offline entitlements();
    method public void postTokenWithoutConsuming does not mark token as consumed if using offline entitlements();
    method public void postTokenWithoutConsuming does not mark unsynced attributes as synced on error if not finishable error();
    method public void postTokenWithoutConsuming marks unsynced attributes as synced on error if finishable error();
    method public void postTokenWithoutConsuming marks unsynced subscriber attributes as synced on success();
    method public void postTokenWithoutConsuming posts unsynced subscriber attributes();
    method public void postTokenWithoutConsuming posts with expected default parameters();
    method public void postTokenWithoutConsuming resets offline consumer info cache on success();
    method public void postTokenWithoutConsuming returns customer info on success();
    method public void postTokenWithoutConsuming returns offline entitlements customer info if server error and success calculating customer info();
    method public void postTransactionAndConsumeIfNeeded attributes are marked as synced when post is successful but there are attribute errors();
    method public void postTransactionAndConsumeIfNeeded caches and notifies listeners on success();
    method public void postTransactionAndConsumeIfNeeded calculates offline entitlements customer info if server error();
    method public void postTransactionAndConsumeIfNeeded calls consume transaction with finish transactions flag false and shouldConsume flag false if observer mode on error if finishable error();
    method public void postTransactionAndConsumeIfNeeded calls consume transaction with finish transactions flag false if observer mode on success();
    method public void postTransactionAndConsumeIfNeeded calls consume transaction with finish transactions flag true and shouldConsume flag false if not observer mode on error if finishable error();
    method public void postTransactionAndConsumeIfNeeded calls consume transaction with finish transactions flag true if not observer mode on success();
    method public void postTransactionAndConsumeIfNeeded calls error block with expected parameters on error();
    method public void postTransactionAndConsumeIfNeeded calls success block with expected parameters on success();
    method public void postTransactionAndConsumeIfNeeded does not cache offline entitlements();
    method public void postTransactionAndConsumeIfNeeded does not calculate offline entitlements customer info if not server error();
    method public void postTransactionAndConsumeIfNeeded does not call consume transaction on error if not finishable error();
    method public void postTransactionAndConsumeIfNeeded does not consume if using offline entitlements();
    method public void postTransactionAndConsumeIfNeeded does not mark attributes as synced if using offline entitlements();
    method public void postTransactionAndConsumeIfNeeded does not mark unsynced attributes as synced on error if not finishable error();
    method public void postTransactionAndConsumeIfNeeded does not try to consume products if product data indicates it should not consume();
    method public void postTransactionAndConsumeIfNeeded marks unsynced attributes as synced on error if finishable error();
    method public void postTransactionAndConsumeIfNeeded marks unsynced subscriber attributes as synced on success();
    method public void postTransactionAndConsumeIfNeeded posts presentedOfferingIdentifier();
    method public void postTransactionAndConsumeIfNeeded posts price and currency();
    method public void postTransactionAndConsumeIfNeeded posts product durations();
    method public void postTransactionAndConsumeIfNeeded posts productIds();
    method public void postTransactionAndConsumeIfNeeded posts replacement mode();
    method public void postTransactionAndConsumeIfNeeded posts storeProduct();
    method public void postTransactionAndConsumeIfNeeded posts subscriptionOptionId();
    method public void postTransactionAndConsumeIfNeeded posts unsynced subscriber attributes();
    method public void postTransactionAndConsumeIfNeeded posts with expected default parameters();
    method public void postTransactionAndConsumeIfNeeded resets offline consumer info cache on success();
    method public void postTransactionAndConsumeIfNeeded returns offline entitlements customer info if server error and success calculating customer info();
    method public void postTransactionAndConsumeIfNeeded sends null durations when posting inapps to backend();
    method public void postTransactionAndConsumeIfNeeded tries to consume products if product data indicates it should consume();
    method public void postTransactionAndConsumeIfNeeded tries to consume products if product data not available();
    method public void postTransactionAndConsumeIfNeeded tries to consume products if product data product id does not match transactions();
    method public void setUp();
  }

  public final class PostReceiptInitiationSourceTest {
    ctor public PostReceiptInitiationSourceTest();
    method public void initiation source have correct postReceiptFieldValue();
  }

  public final class PostTransactionWithProductDetailsHelperTest {
    ctor public PostTransactionWithProductDetailsHelperTest();
    method public void if INAPP, transaction is posted with product information if found();
    method public void if SUBS, transaction is posted with product information if found();
    method public void if no transactions, no callbacks are called();
    method public void if pending transaction, error callback is called();
    method public void if pending transaction, transaction is not posted();
    method public void if query product details fails, transaction is posted without product information();
    method public void setUp();
    method public void success callback is called if post transaction successful();
  }

  @kotlinx.parcelize.Parcelize public final class PresentedOfferingContext implements android.os.Parcelable {
    ctor public PresentedOfferingContext(String offeringIdentifier);
    ctor public PresentedOfferingContext(String offeringIdentifier, String? placementIdentifier, com.revenuecat.purchases.PresentedOfferingContext.TargetingContext? targetingContext);
    method public String component1();
    method public String? component2();
    method public com.revenuecat.purchases.PresentedOfferingContext.TargetingContext? component3();
    method public com.revenuecat.purchases.PresentedOfferingContext copy(String offeringIdentifier, String? placementIdentifier, com.revenuecat.purchases.PresentedOfferingContext.TargetingContext? targetingContext);
    method public String getOfferingIdentifier();
    method public String? getPlacementIdentifier();
    method public com.revenuecat.purchases.PresentedOfferingContext.TargetingContext? getTargetingContext();
    property public final String offeringIdentifier;
    property public final String? placementIdentifier;
    property public final com.revenuecat.purchases.PresentedOfferingContext.TargetingContext? targetingContext;
  }

  @kotlinx.parcelize.Parcelize public static final class PresentedOfferingContext.TargetingContext implements android.os.Parcelable {
    ctor public PresentedOfferingContext.TargetingContext(int revision, String ruleId);
    method public int component1();
    method public String component2();
    method public com.revenuecat.purchases.PresentedOfferingContext.TargetingContext copy(int revision, String ruleId);
    method public int getRevision();
    method public String getRuleId();
    property public final int revision;
    property public final String ruleId;
  }

  public enum ProductType {
    method public static com.revenuecat.purchases.ProductType valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.ProductType[] values();
    enum_constant public static final com.revenuecat.purchases.ProductType INAPP;
    enum_constant public static final com.revenuecat.purchases.ProductType SUBS;
    enum_constant public static final com.revenuecat.purchases.ProductType UNKNOWN;
  }

  public final class PurchaseParams {
    ctor public PurchaseParams(com.revenuecat.purchases.PurchaseParams.Builder builder);
    method public com.revenuecat.purchases.PurchaseParams.Builder component1();
    method public com.revenuecat.purchases.PurchaseParams copy(com.revenuecat.purchases.PurchaseParams.Builder builder);
    method public com.revenuecat.purchases.PurchaseParams.Builder getBuilder();
    method public com.revenuecat.purchases.models.GoogleReplacementMode getGoogleReplacementMode();
    method public String? getOldProductId();
    method public Boolean? isPersonalizedPrice();
    property public final com.revenuecat.purchases.PurchaseParams.Builder builder;
    property public final com.revenuecat.purchases.models.GoogleReplacementMode googleReplacementMode;
    property public final Boolean? isPersonalizedPrice;
    property public final String? oldProductId;
  }

  public static class PurchaseParams.Builder {
    ctor public PurchaseParams.Builder(android.app.Activity activity, com.revenuecat.purchases.models.StoreProduct storeProduct);
    ctor public PurchaseParams.Builder(android.app.Activity activity, com.revenuecat.purchases.models.SubscriptionOption subscriptionOption);
    ctor public PurchaseParams.Builder(android.app.Activity activity, com.revenuecat.purchases.Package packageToPurchase);
    method public com.revenuecat.purchases.PurchaseParams build();
    method public final com.revenuecat.purchases.PurchaseParams.Builder googleReplacementMode(com.revenuecat.purchases.models.GoogleReplacementMode googleReplacementMode);
    method public final com.revenuecat.purchases.PurchaseParams.Builder isPersonalizedPrice(boolean isPersonalizedPrice);
    method public final com.revenuecat.purchases.PurchaseParams.Builder oldProductId(String oldProductId);
    method public final com.revenuecat.purchases.PurchaseParams.Builder presentedOfferingContext(com.revenuecat.purchases.PresentedOfferingContext presentedOfferingContext);
  }

  public final class PurchaseParamsTest {
    ctor public PurchaseParamsTest();
    method public void Initializing with Package containing TestStoreProduct throws error();
    method public void Initializing with Package sets proper presentedOfferingIdentifier();
    method public void Initializing with Package sets proper purchasingData();
    method public void Initializing with StoreProduct sets proper presentedOfferingIdentifier();
    method public void Initializing with SubscriptionOption sets proper presentedOfferingIdentifier();
    method public void Initializing with TestStoreProduct throws error();
    method public void Initializing with option sets proper purchasingData();
    method public void Initializing with product sets proper purchasingData();
  }

  public final class PurchaseResult {
    ctor public PurchaseResult(com.revenuecat.purchases.models.StoreTransaction storeTransaction, com.revenuecat.purchases.CustomerInfo customerInfo);
    method public com.revenuecat.purchases.models.StoreTransaction component1();
    method public com.revenuecat.purchases.CustomerInfo component2();
    method public com.revenuecat.purchases.PurchaseResult copy(com.revenuecat.purchases.models.StoreTransaction storeTransaction, com.revenuecat.purchases.CustomerInfo customerInfo);
    method public com.revenuecat.purchases.CustomerInfo getCustomerInfo();
    method public com.revenuecat.purchases.models.StoreTransaction getStoreTransaction();
    property public final com.revenuecat.purchases.CustomerInfo customerInfo;
    property public final com.revenuecat.purchases.models.StoreTransaction storeTransaction;
  }

  public final class Purchases {
    method public static void canMakePayments(android.content.Context context, com.revenuecat.purchases.interfaces.Callback<java.lang.Boolean> callback);
    method public static void canMakePayments(android.content.Context context, optional java.util.List<? extends com.revenuecat.purchases.models.BillingFeature> features, com.revenuecat.purchases.interfaces.Callback<java.lang.Boolean> callback);
    method public void close();
    method public static com.revenuecat.purchases.Purchases configureInCustomEntitlementsComputationMode(android.content.Context context, String apiKey, String appUserID);
    method public static com.revenuecat.purchases.Purchases configureInCustomEntitlementsComputationMode(com.revenuecat.purchases.PurchasesConfigurationForCustomEntitlementsComputationMode configuration);
    method @kotlin.jvm.Synchronized public String getAppUserID();
    method public static String getFrameworkVersion();
    method @kotlin.jvm.Synchronized public static com.revenuecat.purchases.LogHandler getLogHandler();
    method public static com.revenuecat.purchases.LogLevel getLogLevel();
    method public void getOfferings(com.revenuecat.purchases.interfaces.ReceiveOfferingsCallback listener);
    method public static com.revenuecat.purchases.common.PlatformInfo getPlatformInfo();
    method public void getProducts(java.util.List<java.lang.String> productIds, com.revenuecat.purchases.interfaces.GetStoreProductsCallback callback);
    method public void getProducts(java.util.List<java.lang.String> productIds, optional com.revenuecat.purchases.ProductType? type, com.revenuecat.purchases.interfaces.GetStoreProductsCallback callback);
    method public static java.net.URL? getProxyURL();
    method public static com.revenuecat.purchases.Purchases getSharedInstance();
    method @kotlin.jvm.Synchronized public String? getStorefrontCountryCode();
    method @kotlin.jvm.Synchronized public com.revenuecat.purchases.interfaces.UpdatedCustomerInfoListener? getUpdatedCustomerInfoListener();
    method public static boolean isConfigured();
    method public void purchase(com.revenuecat.purchases.PurchaseParams purchaseParams, com.revenuecat.purchases.interfaces.PurchaseCallback callback);
    method public void removeUpdatedCustomerInfoListener();
    method public void restorePurchases(com.revenuecat.purchases.interfaces.ReceiveCustomerInfoCallback callback);
    method @kotlin.jvm.Synchronized public static void setLogHandler(com.revenuecat.purchases.LogHandler);
    method public static void setLogLevel(com.revenuecat.purchases.LogLevel);
    method public static void setPlatformInfo(com.revenuecat.purchases.common.PlatformInfo);
    method public static void setProxyURL(java.net.URL?);
    method @kotlin.jvm.Synchronized public void setUpdatedCustomerInfoListener(com.revenuecat.purchases.interfaces.UpdatedCustomerInfoListener?);
    method public void showInAppMessagesIfNeeded(android.app.Activity activity);
    method public void showInAppMessagesIfNeeded(android.app.Activity activity, optional java.util.List<? extends com.revenuecat.purchases.models.InAppMessageType> inAppMessageTypes);
    method public void switchUser(String newAppUserID);
    property @kotlin.jvm.Synchronized public final String appUserID;
    property public static final String frameworkVersion;
    property public static final boolean isConfigured;
    property @kotlin.jvm.Synchronized public static final com.revenuecat.purchases.LogHandler logHandler;
    property public static final com.revenuecat.purchases.LogLevel logLevel;
    property public static final com.revenuecat.purchases.common.PlatformInfo platformInfo;
    property public static final java.net.URL? proxyURL;
    property public static final com.revenuecat.purchases.Purchases sharedInstance;
    property @kotlin.jvm.Synchronized public final String? storefrontCountryCode;
    property @kotlin.jvm.Synchronized public final com.revenuecat.purchases.interfaces.UpdatedCustomerInfoListener? updatedCustomerInfoListener;
    field public static final com.revenuecat.purchases.Purchases.Companion Companion;
  }

  public static final class Purchases.Companion {
    method public void canMakePayments(android.content.Context context, com.revenuecat.purchases.interfaces.Callback<java.lang.Boolean> callback);
    method public void canMakePayments(android.content.Context context, optional java.util.List<? extends com.revenuecat.purchases.models.BillingFeature> features, com.revenuecat.purchases.interfaces.Callback<java.lang.Boolean> callback);
    method public com.revenuecat.purchases.Purchases configureInCustomEntitlementsComputationMode(android.content.Context context, String apiKey, String appUserID);
    method public com.revenuecat.purchases.Purchases configureInCustomEntitlementsComputationMode(com.revenuecat.purchases.PurchasesConfigurationForCustomEntitlementsComputationMode configuration);
    method public String getFrameworkVersion();
    method @kotlin.jvm.Synchronized public com.revenuecat.purchases.LogHandler getLogHandler();
    method public com.revenuecat.purchases.LogLevel getLogLevel();
    method public com.revenuecat.purchases.common.PlatformInfo getPlatformInfo();
    method public java.net.URL? getProxyURL();
    method public com.revenuecat.purchases.Purchases getSharedInstance();
    method public boolean isConfigured();
    method @kotlin.jvm.Synchronized public void setLogHandler(com.revenuecat.purchases.LogHandler);
    method public void setLogLevel(com.revenuecat.purchases.LogLevel);
    method public void setPlatformInfo(com.revenuecat.purchases.common.PlatformInfo);
    method public void setProxyURL(java.net.URL?);
    property public final String frameworkVersion;
    property public final boolean isConfigured;
    property @kotlin.jvm.Synchronized public final com.revenuecat.purchases.LogHandler logHandler;
    property public final com.revenuecat.purchases.LogLevel logLevel;
    property public final com.revenuecat.purchases.common.PlatformInfo platformInfo;
    property public final java.net.URL? proxyURL;
    property public final com.revenuecat.purchases.Purchases sharedInstance;
  }

  @com.revenuecat.purchases.ExperimentalPreviewRevenueCatPurchasesAPI public static sealed interface Purchases.DeepLink {
  }

  public static final class Purchases.DeepLink.WebPurchaseRedemption implements com.revenuecat.purchases.Purchases.DeepLink {
  }

  public final class Purchases {
    method public static void canMakePayments(android.content.Context context, com.revenuecat.purchases.interfaces.Callback<java.lang.Boolean> callback);
    method public static void canMakePayments(android.content.Context context, optional java.util.List<? extends com.revenuecat.purchases.models.BillingFeature> features, com.revenuecat.purchases.interfaces.Callback<java.lang.Boolean> callback);
    method public void close();
    method public void collectDeviceIdentifiers();
    method public static com.revenuecat.purchases.Purchases configure(com.revenuecat.purchases.PurchasesConfiguration configuration);
    method @Deprecated @kotlin.jvm.Synchronized public boolean getAllowSharingPlayStoreAccount();
    method public void getAmazonLWAConsentStatus(com.revenuecat.purchases.interfaces.GetAmazonLWAConsentStatusCallback callback);
    method @kotlin.jvm.Synchronized public String getAppUserID();
    method public com.revenuecat.purchases.PurchasesConfiguration getCurrentConfiguration();
    method public com.revenuecat.purchases.customercenter.CustomerCenterListener? getCustomerCenterListener();
    method public void getCustomerInfo(com.revenuecat.purchases.CacheFetchPolicy fetchPolicy, com.revenuecat.purchases.interfaces.ReceiveCustomerInfoCallback callback);
    method public void getCustomerInfo(com.revenuecat.purchases.interfaces.ReceiveCustomerInfoCallback callback);
    method @Deprecated public static boolean getDebugLogsEnabled();
    method @Deprecated @kotlin.jvm.Synchronized public boolean getFinishTransactions();
    method public static String getFrameworkVersion();
    method @kotlin.jvm.Synchronized public static com.revenuecat.purchases.LogHandler getLogHandler();
    method public static com.revenuecat.purchases.LogLevel getLogLevel();
    method @Deprecated public void getNonSubscriptionSkus(java.util.List<java.lang.String> productIds, com.revenuecat.purchases.interfaces.GetStoreProductsCallback callback);
    method public void getOfferings(com.revenuecat.purchases.interfaces.ReceiveOfferingsCallback listener);
    method public static com.revenuecat.purchases.common.PlatformInfo getPlatformInfo();
    method public void getProducts(java.util.List<java.lang.String> productIds, com.revenuecat.purchases.interfaces.GetStoreProductsCallback callback);
    method public void getProducts(java.util.List<java.lang.String> productIds, optional com.revenuecat.purchases.ProductType? type, com.revenuecat.purchases.interfaces.GetStoreProductsCallback callback);
    method public static java.net.URL? getProxyURL();
    method @kotlin.jvm.Synchronized public com.revenuecat.purchases.PurchasesAreCompletedBy getPurchasesAreCompletedBy();
    method public static com.revenuecat.purchases.Purchases getSharedInstance();
    method public com.revenuecat.purchases.Store getStore();
    method @kotlin.jvm.Synchronized public String? getStorefrontCountryCode();
    method public void getStorefrontCountryCode(com.revenuecat.purchases.interfaces.GetStorefrontCallback callback);
    method @Deprecated public void getSubscriptionSkus(java.util.List<java.lang.String> productIds, com.revenuecat.purchases.interfaces.GetStoreProductsCallback callback);
    method @kotlin.jvm.Synchronized public com.revenuecat.purchases.interfaces.UpdatedCustomerInfoListener? getUpdatedCustomerInfoListener();
    method public void invalidateCustomerInfoCache();
    method public boolean isAnonymous();
    method public static boolean isConfigured();
    method public void logIn(String newAppUserID);
    method public void logIn(String newAppUserID, optional com.revenuecat.purchases.interfaces.LogInCallback? callback);
    method public void logOut();
    method public void logOut(optional com.revenuecat.purchases.interfaces.ReceiveCustomerInfoCallback? callback);
    method @Deprecated public void onAppBackgrounded();
    method @Deprecated public void onAppForegrounded();
    method public static com.revenuecat.purchases.WebPurchaseRedemption? parseAsWebPurchaseRedemption(android.content.Intent intent);
    method public static com.revenuecat.purchases.WebPurchaseRedemption? parseAsWebPurchaseRedemption(String string);
    method public void purchase(com.revenuecat.purchases.PurchaseParams purchaseParams, com.revenuecat.purchases.interfaces.PurchaseCallback callback);
    method @Deprecated public void purchasePackage(android.app.Activity activity, com.revenuecat.purchases.Package packageToPurchase, com.revenuecat.purchases.interfaces.PurchaseCallback listener);
    method @Deprecated public void purchaseProduct(android.app.Activity activity, com.revenuecat.purchases.models.StoreProduct storeProduct, com.revenuecat.purchases.interfaces.PurchaseCallback callback);
    method public void redeemWebPurchase(com.revenuecat.purchases.WebPurchaseRedemption webPurchaseRedemption, com.revenuecat.purchases.interfaces.RedeemWebPurchaseListener listener);
    method public void removeUpdatedCustomerInfoListener();
    method public void restorePurchases(com.revenuecat.purchases.interfaces.ReceiveCustomerInfoCallback callback);
    method public void setAd(String? ad);
    method public void setAdGroup(String? adGroup);
    method public void setAdjustID(String? adjustID);
    method public void setAirshipChannelID(String? airshipChannelID);
    method @Deprecated @kotlin.jvm.Synchronized public void setAllowSharingPlayStoreAccount(boolean);
    method public void setAppsflyerID(String? appsflyerID);
    method public void setAttributes(java.util.Map<java.lang.String,java.lang.String> attributes);
    method public void setCampaign(String? campaign);
    method public void setCleverTapID(String? cleverTapID);
    method public void setCreative(String? creative);
    method public void setCustomerCenterListener(com.revenuecat.purchases.customercenter.CustomerCenterListener?);
    method @Deprecated public static void setDebugLogsEnabled(boolean);
    method public void setDisplayName(String? displayName);
    method public void setEmail(String? email);
    method public void setFBAnonymousID(String? fbAnonymousID);
    method @Deprecated @kotlin.jvm.Synchronized public void setFinishTransactions(boolean);
    method public void setFirebaseAppInstanceID(String? firebaseAppInstanceID);
    method public void setKeyword(String? keyword);
    method public void setKochavaDeviceID(String? kochavaDeviceID);
    method @kotlin.jvm.Synchronized public static void setLogHandler(com.revenuecat.purchases.LogHandler);
    method public static void setLogLevel(com.revenuecat.purchases.LogLevel);
    method public void setMediaSource(String? mediaSource);
    method public void setMixpanelDistinctID(String? mixpanelDistinctID);
    method public void setMparticleID(String? mparticleID);
    method public void setOnesignalID(String? onesignalID);
    method public void setOnesignalUserID(String? onesignalUserID);
    method public void setPhoneNumber(String? phoneNumber);
    method public static void setPlatformInfo(com.revenuecat.purchases.common.PlatformInfo);
    method public static void setProxyURL(java.net.URL?);
    method @kotlin.jvm.Synchronized public void setPurchasesAreCompletedBy(com.revenuecat.purchases.PurchasesAreCompletedBy);
    method public void setPushToken(String? fcmToken);
    method public void setTenjinAnalyticsInstallationID(String? tenjinAnalyticsInstallationID);
    method @kotlin.jvm.Synchronized public void setUpdatedCustomerInfoListener(com.revenuecat.purchases.interfaces.UpdatedCustomerInfoListener?);
    method public void showInAppMessagesIfNeeded(android.app.Activity activity);
    method public void showInAppMessagesIfNeeded(android.app.Activity activity, optional java.util.List<? extends com.revenuecat.purchases.models.InAppMessageType> inAppMessageTypes);
    method public void syncAmazonPurchase(String productID, String receiptID, String amazonUserID, String? isoCurrencyCode, Double? price);
    method public void syncAttributesAndOfferingsIfNeeded(com.revenuecat.purchases.interfaces.SyncAttributesAndOfferingsCallback callback);
    method @Deprecated public void syncObserverModeAmazonPurchase(String productID, String receiptID, String amazonUserID, String? isoCurrencyCode, Double? price);
    method public void syncPurchases();
    method public void syncPurchases(optional com.revenuecat.purchases.interfaces.SyncPurchasesCallback? listener);
    method @com.revenuecat.purchases.ExperimentalPreviewRevenueCatPurchasesAPI @kotlin.jvm.JvmSynthetic public void track(com.revenuecat.purchases.common.events.FeatureEvent event);
    property @Deprecated @kotlin.jvm.Synchronized public final boolean allowSharingPlayStoreAccount;
    property @kotlin.jvm.Synchronized public final String appUserID;
    property public final com.revenuecat.purchases.PurchasesConfiguration currentConfiguration;
    property public final com.revenuecat.purchases.customercenter.CustomerCenterListener? customerCenterListener;
    property @Deprecated public static final boolean debugLogsEnabled;
    property @Deprecated @kotlin.jvm.Synchronized public final boolean finishTransactions;
    property public static final String frameworkVersion;
    property public final boolean isAnonymous;
    property public static final boolean isConfigured;
    property @kotlin.jvm.Synchronized public static final com.revenuecat.purchases.LogHandler logHandler;
    property public static final com.revenuecat.purchases.LogLevel logLevel;
    property public static final com.revenuecat.purchases.common.PlatformInfo platformInfo;
    property public static final java.net.URL? proxyURL;
    property @kotlin.jvm.Synchronized public final com.revenuecat.purchases.PurchasesAreCompletedBy purchasesAreCompletedBy;
    property public static final com.revenuecat.purchases.Purchases sharedInstance;
    property public final com.revenuecat.purchases.Store store;
    property @kotlin.jvm.Synchronized public final String? storefrontCountryCode;
    property @kotlin.jvm.Synchronized public final com.revenuecat.purchases.interfaces.UpdatedCustomerInfoListener? updatedCustomerInfoListener;
    field public static final com.revenuecat.purchases.Purchases.Companion Companion;
  }

  public static final class Purchases.Companion {
    method public void canMakePayments(android.content.Context context, com.revenuecat.purchases.interfaces.Callback<java.lang.Boolean> callback);
    method public void canMakePayments(android.content.Context context, optional java.util.List<? extends com.revenuecat.purchases.models.BillingFeature> features, com.revenuecat.purchases.interfaces.Callback<java.lang.Boolean> callback);
    method public com.revenuecat.purchases.Purchases configureInCustomEntitlementsComputationMode(android.content.Context context, String apiKey, String appUserID);
    method public com.revenuecat.purchases.Purchases configureInCustomEntitlementsComputationMode(com.revenuecat.purchases.PurchasesConfigurationForCustomEntitlementsComputationMode configuration);
    method public String getFrameworkVersion();
    method @kotlin.jvm.Synchronized public com.revenuecat.purchases.LogHandler getLogHandler();
    method public com.revenuecat.purchases.LogLevel getLogLevel();
    method public com.revenuecat.purchases.common.PlatformInfo getPlatformInfo();
    method public java.net.URL? getProxyURL();
    method public com.revenuecat.purchases.Purchases getSharedInstance();
    method public boolean isConfigured();
    method @kotlin.jvm.Synchronized public void setLogHandler(com.revenuecat.purchases.LogHandler);
    method public void setLogLevel(com.revenuecat.purchases.LogLevel);
    method public void setPlatformInfo(com.revenuecat.purchases.common.PlatformInfo);
    method public void setProxyURL(java.net.URL?);
    property public final String frameworkVersion;
    property public final boolean isConfigured;
    property @kotlin.jvm.Synchronized public final com.revenuecat.purchases.LogHandler logHandler;
    property public final com.revenuecat.purchases.LogLevel logLevel;
    property public final com.revenuecat.purchases.common.PlatformInfo platformInfo;
    property public final java.net.URL? proxyURL;
    property public final com.revenuecat.purchases.Purchases sharedInstance;
  }

  public enum PurchasesAreCompletedBy {
    method public static com.revenuecat.purchases.PurchasesAreCompletedBy valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.PurchasesAreCompletedBy[] values();
    enum_constant public static final com.revenuecat.purchases.PurchasesAreCompletedBy MY_APP;
    enum_constant public static final com.revenuecat.purchases.PurchasesAreCompletedBy REVENUECAT;
  }

  public class PurchasesConfiguration {
    ctor public PurchasesConfiguration(com.revenuecat.purchases.PurchasesConfiguration.Builder builder);
    method public final String getApiKey();
    method public final String? getAppUserID();
    method public final android.content.Context getContext();
    method public final com.revenuecat.purchases.DangerousSettings getDangerousSettings();
    method public final boolean getDiagnosticsEnabled();
    method @Deprecated public final boolean getObserverMode();
    method public final boolean getPendingTransactionsForPrepaidPlansEnabled();
    method public final com.revenuecat.purchases.PurchasesAreCompletedBy getPurchasesAreCompletedBy();
    method public final java.util.concurrent.ExecutorService? getService();
    method public final boolean getShowInAppMessagesAutomatically();
    method public final com.revenuecat.purchases.Store getStore();
    method public final com.revenuecat.purchases.EntitlementVerificationMode getVerificationMode();
    property public final String apiKey;
    property public final String? appUserID;
    property public final android.content.Context context;
    property public final com.revenuecat.purchases.DangerousSettings dangerousSettings;
    property public final boolean diagnosticsEnabled;
    property @Deprecated public final boolean observerMode;
    property public final boolean pendingTransactionsForPrepaidPlansEnabled;
    property public final com.revenuecat.purchases.PurchasesAreCompletedBy purchasesAreCompletedBy;
    property public final java.util.concurrent.ExecutorService? service;
    property public final boolean showInAppMessagesAutomatically;
    property public final com.revenuecat.purchases.Store store;
    property public final com.revenuecat.purchases.EntitlementVerificationMode verificationMode;
  }

  public static class PurchasesConfiguration.Builder {
    ctor public PurchasesConfiguration.Builder(android.content.Context context, String apiKey);
    method public final com.revenuecat.purchases.PurchasesConfiguration.Builder appUserID(String? appUserID);
    method public com.revenuecat.purchases.PurchasesConfiguration build();
    method public final com.revenuecat.purchases.PurchasesConfiguration.Builder dangerousSettings(com.revenuecat.purchases.DangerousSettings dangerousSettings);
    method public final com.revenuecat.purchases.PurchasesConfiguration.Builder diagnosticsEnabled(boolean diagnosticsEnabled);
    method public final com.revenuecat.purchases.PurchasesConfiguration.Builder entitlementVerificationMode(com.revenuecat.purchases.EntitlementVerificationMode verificationMode);
    method @Deprecated @com.revenuecat.purchases.ExperimentalPreviewRevenueCatPurchasesAPI @kotlin.jvm.JvmSynthetic public com.revenuecat.purchases.PurchasesConfiguration.Builder! informationalVerificationModeAndDiagnosticsEnabled(boolean enabled);
    method @Deprecated public final com.revenuecat.purchases.PurchasesConfiguration.Builder observerMode(boolean observerMode);
    method public final com.revenuecat.purchases.PurchasesConfiguration.Builder pendingTransactionsForPrepaidPlansEnabled(boolean pendingTransactionsForPrepaidPlansEnabled);
    method public final com.revenuecat.purchases.PurchasesConfiguration.Builder purchasesAreCompletedBy(com.revenuecat.purchases.PurchasesAreCompletedBy purchasesAreCompletedBy);
    method public final com.revenuecat.purchases.PurchasesConfiguration.Builder service(java.util.concurrent.ExecutorService service);
    method public final com.revenuecat.purchases.PurchasesConfiguration.Builder showInAppMessagesAutomatically(boolean showInAppMessagesAutomatically);
    method public final com.revenuecat.purchases.PurchasesConfiguration.Builder store(com.revenuecat.purchases.Store store);
  }

  public final class PurchasesConfigurationForCustomEntitlementsComputationMode {
  }

  public static final class PurchasesConfigurationForCustomEntitlementsComputationMode.Builder {
    ctor public PurchasesConfigurationForCustomEntitlementsComputationMode.Builder(android.content.Context context, String apiKey, String appUserID);
    method public com.revenuecat.purchases.PurchasesConfigurationForCustomEntitlementsComputationMode build();
    method public com.revenuecat.purchases.PurchasesConfigurationForCustomEntitlementsComputationMode.Builder pendingTransactionsForPrepaidPlansEnabled(boolean enabled);
    method public com.revenuecat.purchases.PurchasesConfigurationForCustomEntitlementsComputationMode.Builder showInAppMessagesAutomatically(boolean enabled);
  }

  public final class PurchasesConfigurationTest {
    ctor public PurchasesConfigurationTest();
    method public void PurchasesConfiguration has expected default parameters();
    method public void PurchasesConfiguration sets appUserId correctly();
    method public void PurchasesConfiguration sets dangerous settings correctly();
    method public void PurchasesConfiguration sets diagnosticsEnabled correctly();
    method public void PurchasesConfiguration sets informational mode correctly();
    method public void PurchasesConfiguration sets observerMode correctly();
    method public void PurchasesConfiguration sets pending prepaid support enabled correctly();
    method public void PurchasesConfiguration sets purchasesAreCompletedBy correctly();
    method public void PurchasesConfiguration sets service correctly();
    method public void PurchasesConfiguration sets showInAppMessagesAutomatically correctly();
    method public void PurchasesConfiguration sets store correctly();
    method public void PurchasesConfiguration trims api key();
    method public void setup();
  }

  @kotlinx.parcelize.Parcelize public final class PurchasesError implements android.os.Parcelable java.io.Serializable {
    ctor public PurchasesError(com.revenuecat.purchases.PurchasesErrorCode code, optional String? underlyingErrorMessage);
    method public com.revenuecat.purchases.PurchasesErrorCode getCode();
    method public String getMessage();
    method public String? getUnderlyingErrorMessage();
    property public final com.revenuecat.purchases.PurchasesErrorCode code;
    property public final String message;
    property public final String? underlyingErrorMessage;
    field public static final com.revenuecat.purchases.PurchasesError.Companion Companion;
  }

  public static final class PurchasesError.Companion {
  }

  public enum PurchasesErrorCode {
    method public final int getCode();
    method public final String! getDescription();
    method public static com.revenuecat.purchases.PurchasesErrorCode valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.PurchasesErrorCode[] values();
    property public final int code;
    property public final String! description;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode ConfigurationError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode CustomerInfoError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode EmptySubscriberAttributesError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode IneligibleError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode InsufficientPermissionsError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode InvalidAppUserIdError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode InvalidAppleSubscriptionKeyError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode InvalidCredentialsError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode InvalidReceiptError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode InvalidSubscriberAttributesError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode LogOutWithAnonymousUserError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode MissingReceiptFileError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode NetworkError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode OperationAlreadyInProgressError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode PaymentPendingError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode ProductAlreadyPurchasedError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode ProductNotAvailableForPurchaseError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode PurchaseCancelledError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode PurchaseInvalidError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode PurchaseNotAllowedError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode ReceiptAlreadyInUseError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode SignatureVerificationError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode StoreProblemError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode UnexpectedBackendResponseError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode UnknownBackendError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode UnknownError;
    enum_constant public static final com.revenuecat.purchases.PurchasesErrorCode UnsupportedError;
  }

  public class PurchasesException extends java.lang.Exception {
    ctor public PurchasesException(com.revenuecat.purchases.PurchasesError error);
    method public final com.revenuecat.purchases.PurchasesErrorCode getCode();
    method public final com.revenuecat.purchases.PurchasesError getError();
    method public final String? getUnderlyingErrorMessage();
    property public final com.revenuecat.purchases.PurchasesErrorCode code;
    property public final com.revenuecat.purchases.PurchasesError error;
    property public String message;
    property public final String? underlyingErrorMessage;
  }

  public final class PurchasesExceptionTest {
    ctor public PurchasesExceptionTest();
    method public void error code matches originating error();
    method public void error matches originating error();
    method public void error message matches originating error();
    method public void underlying error message matches();
  }

  public final class PurchasesExtensionsKt {
    method public static boolean getForceServerErrors(com.revenuecat.purchases.Purchases);
    method public static boolean getForceSigningErrors(com.revenuecat.purchases.Purchases);
    method public static void resetSingleton(com.revenuecat.purchases.Purchases.Companion);
    method public static void setForceServerErrors(com.revenuecat.purchases.Purchases, boolean);
    method public static void setForceSigningErrors(com.revenuecat.purchases.Purchases, boolean);
  }

  public final class PurchasesFactoryTest {
    ctor public PurchasesFactoryTest();
    method public void creating purchase checks api key is not empty();
    method public void creating purchase checks context application context is an application();
    method public void creating purchase checks context has INTERNET permission();
    method public void creating purchase validates api key is valid();
    method public void setup();
    method public void tearDown();
  }

  public final class PurchasesIntegrationTest extends com.revenuecat.purchases.BasePurchasesIntegrationTest {
    ctor public PurchasesIntegrationTest();
    method public void canFetchOfferings();
    method public void canPurchaseSubsProduct();
    method public void customerInfoCanBeFetched();
    method public void customerInfoCanBeFetchedFromBackendAndThenGottenFromCache();
    method public void failsWithUnauthorizedIfValidURLButInvalidAuth();
    method public void failsWithUnknownHostIfInvalidSubdomain();
    method public void offeringsArePersistedAndUsedOnServerErrors();
    method public void sdkCanBeConfigured();
    method public void setup();
  }

  public final class PurchasesIntegrationTest extends com.revenuecat.purchases.BasePurchasesIntegrationTest {
    ctor public PurchasesIntegrationTest();
    method public void canFetchOfferings();
    method public void canPurchaseSubsProduct();
    method public void offeringsArePersistedAndUsedOnServerErrors();
    method public void purchaseTriggersCustomerInfoListener();
    method public void sdkCanBeConfigured();
    method public void settingCustomerInfoListenerDoesNotTriggerUpdate();
    method public void setup();
    method public void switchUserWorks();
  }

  public final class PurchasesLoggerTest {
    ctor public PurchasesLoggerTest();
    method public void debugWithDebugLogsDisabled();
    method public void debugWithDebugLogsEnabled();
    method public void debugWithVerboseLogs();
    method public void errorWithDebugLogs();
    method public void errorWithNoThrowable();
    method public void errorWithThrowable();
    method public String getMessage();
    method public void info();
    method public void setUp();
    method public void tearDown();
    method public void verboseWithDebugLogs();
    method public void warning();
    property public final String message;
  }

  public final class PurchasesTransactionException extends com.revenuecat.purchases.PurchasesException {
    ctor public PurchasesTransactionException(com.revenuecat.purchases.PurchasesError purchasesError, boolean userCancelled);
    method public boolean getUserCancelled();
    property public final boolean userCancelled;
  }

  public final class PurchasesTransactionExceptionTest {
    ctor public PurchasesTransactionExceptionTest();
    method public void error code matches originating error();
    method public void error matches originating error();
    method public void error message matches originating error();
    method public void underlying error message matches();
    method public void user cancelled matches value passed in();
  }

  public final class RecurrenceModeTest {
    ctor public RecurrenceModeTest();
    method public void testToRecurrenceMode();
  }

  public interface ReplacementMode extends android.os.Parcelable {
    method public String getName();
    property public abstract String name;
  }

  @kotlinx.serialization.Serializable public enum Store {
    method public static com.revenuecat.purchases.Store valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.Store[] values();
    enum_constant @kotlinx.serialization.SerialName("amazon") public static final com.revenuecat.purchases.Store AMAZON;
    enum_constant @kotlinx.serialization.SerialName("app_store") public static final com.revenuecat.purchases.Store APP_STORE;
    enum_constant @kotlinx.serialization.SerialName("external") public static final com.revenuecat.purchases.Store EXTERNAL;
    enum_constant @kotlinx.serialization.SerialName("mac_app_store") public static final com.revenuecat.purchases.Store MAC_APP_STORE;
    enum_constant @kotlinx.serialization.SerialName("play_store") public static final com.revenuecat.purchases.Store PLAY_STORE;
    enum_constant @kotlinx.serialization.SerialName("promotional") public static final com.revenuecat.purchases.Store PROMOTIONAL;
    enum_constant @kotlinx.serialization.SerialName("rc_billing") public static final com.revenuecat.purchases.Store RC_BILLING;
    enum_constant @kotlinx.serialization.SerialName("stripe") public static final com.revenuecat.purchases.Store STRIPE;
    enum_constant @kotlinx.serialization.SerialName("unknown") public static final com.revenuecat.purchases.Store UNKNOWN_STORE;
  }

  public final class SubscriptionInfo {
    ctor @Deprecated public SubscriptionInfo(String productIdentifier, java.util.Date purchaseDate, java.util.Date? originalPurchaseDate, java.util.Date? expiresDate, com.revenuecat.purchases.Store store, java.util.Date? unsubscribeDetectedAt, boolean isSandbox, java.util.Date? billingIssuesDetectedAt, java.util.Date? gracePeriodExpiresDate, optional com.revenuecat.purchases.OwnershipType ownershipType, com.revenuecat.purchases.PeriodType periodType, java.util.Date? refundedAt, String? storeTransactionId, java.util.Date requestDate);
    ctor public SubscriptionInfo(String productIdentifier, java.util.Date purchaseDate, java.util.Date? originalPurchaseDate, java.util.Date? expiresDate, com.revenuecat.purchases.Store store, java.util.Date? unsubscribeDetectedAt, boolean isSandbox, java.util.Date? billingIssuesDetectedAt, java.util.Date? gracePeriodExpiresDate, optional com.revenuecat.purchases.OwnershipType ownershipType, com.revenuecat.purchases.PeriodType periodType, java.util.Date? refundedAt, String? storeTransactionId, java.util.Date? autoResumeDate, String? displayName, com.revenuecat.purchases.models.Price? price, String? productPlanIdentifier, java.util.Date requestDate);
    method public java.util.Date? getAutoResumeDate();
    method public java.util.Date? getBillingIssuesDetectedAt();
    method public String? getDisplayName();
    method public java.util.Date? getExpiresDate();
    method public java.util.Date? getGracePeriodExpiresDate();
    method public java.util.Date? getOriginalPurchaseDate();
    method public com.revenuecat.purchases.OwnershipType getOwnershipType();
    method public com.revenuecat.purchases.PeriodType getPeriodType();
    method public com.revenuecat.purchases.models.Price? getPrice();
    method public String getProductIdentifier();
    method public String? getProductPlanIdentifier();
    method public java.util.Date getPurchaseDate();
    method public java.util.Date? getRefundedAt();
    method public com.revenuecat.purchases.Store getStore();
    method public String? getStoreTransactionId();
    method public java.util.Date? getUnsubscribeDetectedAt();
    method public boolean getWillRenew();
    method public boolean isActive();
    method public boolean isSandbox();
    property public final java.util.Date? autoResumeDate;
    property public final java.util.Date? billingIssuesDetectedAt;
    property public final String? displayName;
    property public final java.util.Date? expiresDate;
    property public final java.util.Date? gracePeriodExpiresDate;
    property public final boolean isActive;
    property public final boolean isSandbox;
    property public final java.util.Date? originalPurchaseDate;
    property public final com.revenuecat.purchases.OwnershipType ownershipType;
    property public final com.revenuecat.purchases.PeriodType periodType;
    property public final com.revenuecat.purchases.models.Price? price;
    property public final String productIdentifier;
    property public final String? productPlanIdentifier;
    property public final java.util.Date purchaseDate;
    property public final java.util.Date? refundedAt;
    property public final com.revenuecat.purchases.Store store;
    property public final String? storeTransactionId;
    property public final java.util.Date? unsubscribeDetectedAt;
    property public final boolean willRenew;
  }

  public final class SyncPurchasesHelperTest {
    ctor public SyncPurchasesHelperTest();
    method public void calls error if error getting purchases();
    method public void calls success callback if no purchases to sync();
    method public void calls tracks sync purchases result event when error getting purchases();
    method public void calls tracks sync purchases result event when no purchases();
    method public void calls tracks sync purchases started event();
    method public void does not sync if no purchases();
    method public void posts all receipts without consuming();
    method public void returns error if error getting cached customer info();
    method public void setUp();
    method public void tries to sync all purchases even if there are errors();
  }

  public final class TestLogVerifierKt {
    method public static void assertDebugLog(String logMessage, kotlin.jvm.functions.Function0<kotlin.Unit> block);
    method public static void assertErrorLog(String logMessage, optional Throwable? throwable, kotlin.jvm.functions.Function0<kotlin.Unit> block);
    method public static void assertInfoLog(String logMessage, kotlin.jvm.functions.Function0<kotlin.Unit> block);
    method public static void assertLog(com.revenuecat.purchases.LogMessage logMessage, kotlin.jvm.functions.Function0<kotlin.Unit> block);
    method public static void assertLogs(java.util.List<com.revenuecat.purchases.LogMessage> expectedLogMessages, kotlin.jvm.functions.Function0<kotlin.Unit> block);
    method public static void assertVerboseLog(String logMessage, kotlin.jvm.functions.Function0<kotlin.Unit> block);
    method public static void assertWarnLog(String logMessage, kotlin.jvm.functions.Function0<kotlin.Unit> block);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class UiConfig {
    ctor public UiConfig(optional com.revenuecat.purchases.UiConfig.AppConfig app, optional @kotlinx.serialization.Serializable(with=LocalizedVariableLocalizationKeyMapSerializer::class) java.util.Map<com.revenuecat.purchases.paywalls.components.common.LocaleId,? extends java.util.Map<com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey,java.lang.String>> localizations, optional @kotlinx.serialization.SerialName("variable_config") com.revenuecat.purchases.UiConfig.VariableConfig variableConfig);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public static final class UiConfig.AppConfig {
    ctor public UiConfig.AppConfig(optional java.util.Map<com.revenuecat.purchases.ColorAlias,com.revenuecat.purchases.paywalls.components.properties.ColorScheme> colors, optional java.util.Map<com.revenuecat.purchases.FontAlias,com.revenuecat.purchases.UiConfig.AppConfig.FontsConfig> fonts);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public static final class UiConfig.AppConfig.FontsConfig {
    ctor public UiConfig.AppConfig.FontsConfig(com.revenuecat.purchases.UiConfig.AppConfig.FontsConfig.FontInfo android);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable public static sealed interface UiConfig.AppConfig.FontsConfig.FontInfo {
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("google_fonts") @kotlinx.serialization.Serializable public static final class UiConfig.AppConfig.FontsConfig.FontInfo.GoogleFonts implements com.revenuecat.purchases.UiConfig.AppConfig.FontsConfig.FontInfo {
    ctor public UiConfig.AppConfig.FontsConfig.FontInfo.GoogleFonts(String value);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("name") @kotlinx.serialization.Serializable public static final class UiConfig.AppConfig.FontsConfig.FontInfo.Name implements com.revenuecat.purchases.UiConfig.AppConfig.FontsConfig.FontInfo {
    ctor public UiConfig.AppConfig.FontsConfig.FontInfo.Name(String value);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public static final class UiConfig.VariableConfig {
    ctor public UiConfig.VariableConfig(optional @kotlinx.serialization.SerialName("variable_compatibility_map") java.util.Map<java.lang.String,java.lang.String> variableCompatibilityMap, optional @kotlinx.serialization.SerialName("function_compatibility_map") java.util.Map<java.lang.String,java.lang.String> functionCompatibilityMap);
  }

  public enum VerificationResult {
    method public final boolean isVerified();
    method public static com.revenuecat.purchases.VerificationResult valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.VerificationResult[] values();
    property public final boolean isVerified;
    enum_constant public static final com.revenuecat.purchases.VerificationResult FAILED;
    enum_constant public static final com.revenuecat.purchases.VerificationResult NOT_REQUESTED;
    enum_constant public static final com.revenuecat.purchases.VerificationResult VERIFIED;
    enum_constant public static final com.revenuecat.purchases.VerificationResult VERIFIED_ON_DEVICE;
  }

  public final class VerificationResultTest {
    ctor public VerificationResultTest();
    method public void isVerified returns expected values();
  }

  public final class WebPurchaseRedemption {
  }

}

package com.revenuecat.purchases.amazon {

  public final class AmazonBackendTest {
    ctor public AmazonBackendTest();
    method public void When getting Amazon receipt data is successful, onSuccess is called();
    method public void getAmazonReceiptData does not add post fields to sign();
    method public void setup();
    method public void tearDown();
    method public void when Amazon receipt data call fails, errors are passed along();
    method public void when Amazon receipt data call returns an error, errors are passed along();
  }

  public final class AmazonBillingTest {
    ctor public AmazonBillingTest();
    method public void Correct marketplace is used when getting product data();
    method public void If purchase shouldn't be finished, purchase is not fulfilled, but it is cached();
    method public void If purchase state is "purchased", purchase is fulfilled and cached();
    method public void If purchase state is pending, purchase is not fulfilled();
    method public void If there are errors getting receipt data for all receipts, an InvalidReceiptError is passed();
    method public void If there are no receipts, querying purchases returns an empty list();
    method public void If there are receipts, querying all purchases returns a list of purchases();
    method public void If there are subscription receipts, received purchases have term skus, not skus();
    method public void Purchase is fulfilled and cached even if shouldConsume is false();
    method public void Success is called when there are errors getting receipt data for just one of the receipts();
    method public void When normalizing purchase data, an error is returned if response from backend is not complete();
    method public void When normalizing purchase data, cached term sku is returned as product ID();
    method public void When normalizing purchase data, term sku is returned when passing parent sku as product ID();
    method public void When normalizing purchase data, term sku is returned when passing term sku as product ID();
    method public void When querying purchases, cached tokens don't need to fetch receipt data();
    method public void When querying purchases, canceled but not expired subscriptions are returned();
    method public void When querying purchases, consumables don't need to fetch receipt data();
    method public void When querying purchases, expired subscriptions are not returned();
    method public void When querying purchases, receipt data is fetched for all subscriptions();
    method public void calling getUserData() in DefaultPurchasingServiceProvider sets LWA flag in builder();
    method public void if not finishing transactions, registerListener not called();
    method public void if not not finishing transactions, registerListener called();
    method public void on connection, stateListener called();
    method public void queryProductDetailsAsync tracks diagnostics call with correct parameters();
    method public void queryPurchases tracks diagnostics call with correct parameters();
    method public void querying all purchases returns all purchases, even if they were canceled previously();
    method public void querying getAmazonLWAConsentStatus returns error();
    method public void querying getAmazonLWAConsentStatus returns success();
    method public void querying storefront error();
    method public void querying storefront success();
    method public void setup();
    method public void setupNotFinishingTransactions();
    method public void tearDown();
    field public static final long timestamp0 = 1676379370000L; // 0x1864fff3210L
    field public static final long timestamp123 = 1676379370123L; // 0x1864fff328bL
  }

  public final class AmazonCacheTest {
    ctor public AmazonCacheTest();
    method public void getting cached term skus when there is nothing cached();
    method public void getting cached term skus when there is termskus cached();
    method public void overriding a receipt term sku();
    method public void set receipt term skus on a non empty cache();
    method public void set receipt term skus on an empty cache();
    method public void setup();
  }

  public final class AmazonOfferingsTest {
    ctor public AmazonOfferingsTest();
    method public void Annual package type set properly();
    method public void Can create multiple offerings with packages of the same duration();
    method public void Custom package type set properly();
    method public void Lifetime package type set properly();
    method public void Monthly package type set properly();
    method public void Six months package type set properly();
    method public void Three months package type set properly();
    method public void Two months package type set properly();
    method public void Unknown package type set properly();
    method public void Weekly package type set properly();
    method public void createOffering returns Offering with offeringJson packages that match StoreProducts();
    method public void createOffering returns null if offeringJson contains no packages matching StoreProducts();
    method public void createOfferings creates offerings();
    method public void createOfferings does not set currentOffering if current_offering_id is null();
    method public void createOfferings returns empty list if no StoreProducts fetched();
    method public void createOfferings returns empty list if no offerings in json();
    method public void createOfferings returns empty list if offeringsJson contains no matching StoreProducts();
    method public void createPackage creates a Package if package json matches subscription store products();
    method public void createPackage creates a Package if packageJson matches INAPP StoreProduct();
    method public void createPackage for OTP sets offeringId on Package and OTP Product();
    method public void createPackage for sub sets presentedOfferingId on Package and product();
    method public void createPackage returns null if packageJson productIdentifier doesnt match any sub StoreProduct id();
  }

  public abstract sealed class AmazonPurchasingData implements com.revenuecat.purchases.models.PurchasingData {
  }

  public static final class AmazonPurchasingData.Product extends com.revenuecat.purchases.amazon.AmazonPurchasingData {
    ctor public AmazonPurchasingData.Product(com.revenuecat.purchases.amazon.AmazonStoreProduct storeProduct);
    method public com.revenuecat.purchases.amazon.AmazonStoreProduct component1();
    method public com.revenuecat.purchases.amazon.AmazonPurchasingData.Product copy(com.revenuecat.purchases.amazon.AmazonStoreProduct storeProduct);
    method public String getProductId();
    method public com.revenuecat.purchases.ProductType getProductType();
    method public com.revenuecat.purchases.amazon.AmazonStoreProduct getStoreProduct();
    property public String productId;
    property public com.revenuecat.purchases.ProductType productType;
    property public final com.revenuecat.purchases.amazon.AmazonStoreProduct storeProduct;
  }

  public final class AmazonStoreProduct implements com.revenuecat.purchases.models.StoreProduct {
    ctor @Deprecated public AmazonStoreProduct(String id, com.revenuecat.purchases.ProductType type, String title, String description, com.revenuecat.purchases.models.Period? period, com.revenuecat.purchases.models.Price price, com.revenuecat.purchases.models.SubscriptionOptions? subscriptionOptions, com.revenuecat.purchases.models.SubscriptionOption? defaultOption, String iconUrl, com.revenuecat.purchases.models.Period? freeTrialPeriod, org.json.JSONObject originalProductJSON, optional String? presentedOfferingIdentifier);
    ctor public AmazonStoreProduct(String id, com.revenuecat.purchases.ProductType type, String name, String title, String description, com.revenuecat.purchases.models.Period? period, com.revenuecat.purchases.models.Price price, com.revenuecat.purchases.models.SubscriptionOptions? subscriptionOptions, com.revenuecat.purchases.models.SubscriptionOption? defaultOption, String iconUrl, com.revenuecat.purchases.models.Period? freeTrialPeriod, org.json.JSONObject originalProductJSON);
    ctor public AmazonStoreProduct(String id, com.revenuecat.purchases.ProductType type, String name, String title, String description, com.revenuecat.purchases.models.Period? period, com.revenuecat.purchases.models.Price price, com.revenuecat.purchases.models.SubscriptionOptions? subscriptionOptions, com.revenuecat.purchases.models.SubscriptionOption? defaultOption, String iconUrl, com.revenuecat.purchases.models.Period? freeTrialPeriod, org.json.JSONObject originalProductJSON, optional com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext);
    ctor @Deprecated public AmazonStoreProduct(String id, com.revenuecat.purchases.ProductType type, String name, String title, String description, com.revenuecat.purchases.models.Period? period, com.revenuecat.purchases.models.Price price, com.revenuecat.purchases.models.SubscriptionOptions? subscriptionOptions, com.revenuecat.purchases.models.SubscriptionOption? defaultOption, String iconUrl, com.revenuecat.purchases.models.Period? freeTrialPeriod, org.json.JSONObject originalProductJSON, String presentedOfferingIdentifier);
    method public String component1();
    method public String component10();
    method public com.revenuecat.purchases.models.Period? component11();
    method public org.json.JSONObject component12();
    method public com.revenuecat.purchases.PresentedOfferingContext? component13();
    method public com.revenuecat.purchases.ProductType component2();
    method public String component3();
    method public String component4();
    method public String component5();
    method public com.revenuecat.purchases.models.Period? component6();
    method public com.revenuecat.purchases.models.Price component7();
    method public com.revenuecat.purchases.models.SubscriptionOptions? component8();
    method public com.revenuecat.purchases.models.SubscriptionOption? component9();
    method public com.revenuecat.purchases.amazon.AmazonStoreProduct copy(String id, com.revenuecat.purchases.ProductType type, String name, String title, String description, com.revenuecat.purchases.models.Period? period, com.revenuecat.purchases.models.Price price, com.revenuecat.purchases.models.SubscriptionOptions? subscriptionOptions, com.revenuecat.purchases.models.SubscriptionOption? defaultOption, String iconUrl, com.revenuecat.purchases.models.Period? freeTrialPeriod, org.json.JSONObject originalProductJSON, com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext);
    method @Deprecated public com.revenuecat.purchases.models.StoreProduct copyWithOfferingId(String offeringId);
    method public com.revenuecat.purchases.models.StoreProduct copyWithPresentedOfferingContext(com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext);
    method public com.revenuecat.purchases.models.SubscriptionOption? getDefaultOption();
    method public String getDescription();
    method public com.revenuecat.purchases.models.Period? getFreeTrialPeriod();
    method public String getIconUrl();
    method public String getId();
    method public String getName();
    method public org.json.JSONObject getOriginalProductJSON();
    method public com.revenuecat.purchases.models.Period? getPeriod();
    method public com.revenuecat.purchases.PresentedOfferingContext? getPresentedOfferingContext();
    method @Deprecated public String? getPresentedOfferingIdentifier();
    method public com.revenuecat.purchases.models.Price getPrice();
    method public com.revenuecat.purchases.amazon.AmazonPurchasingData getPurchasingData();
    method @Deprecated public String getSku();
    method public com.revenuecat.purchases.models.SubscriptionOptions? getSubscriptionOptions();
    method public String getTitle();
    method public com.revenuecat.purchases.ProductType getType();
    property public com.revenuecat.purchases.models.SubscriptionOption? defaultOption;
    property public String description;
    property public final com.revenuecat.purchases.models.Period? freeTrialPeriod;
    property public final String iconUrl;
    property public String id;
    property public String name;
    property public final org.json.JSONObject originalProductJSON;
    property public com.revenuecat.purchases.models.Period? period;
    property public com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext;
    property @Deprecated public String? presentedOfferingIdentifier;
    property public com.revenuecat.purchases.models.Price price;
    property public com.revenuecat.purchases.amazon.AmazonPurchasingData purchasingData;
    property @Deprecated public String sku;
    property public com.revenuecat.purchases.models.SubscriptionOptions? subscriptionOptions;
    property public String title;
    property public com.revenuecat.purchases.ProductType type;
  }

  public final class AmazonStoreProductKt {
    method public static com.revenuecat.purchases.amazon.AmazonStoreProduct? getAmazonProduct(com.revenuecat.purchases.models.StoreProduct);
  }

  public final class BillingFactoryAmazonTest {
    ctor public BillingFactoryAmazonTest();
    method public void AmazonBilling can be created();
    method public void AmazonBilling can be created without diagnostics tracker();
  }

  public final class PeriodParsingTest {
    ctor public PeriodParsingTest(String periodRaw, com.revenuecat.purchases.models.Period? periodExpected);
    method public static java.util.Collection<java.lang.Object[]> data();
    method public void period string to Period is correct();
    field public static final com.revenuecat.purchases.amazon.PeriodParsingTest.Companion Companion;
  }

  public static final class PeriodParsingTest.Companion {
    method public java.util.Collection<java.lang.Object[]> data();
  }

  public final class PriceExtractorTest {
    ctor public PriceExtractorTest();
    method public void AU marketplace 7 AUD in Spain();
    method public void AU marketplace 7 AUD in US();
    method public void BR marketplace 7 BRL in Brazil();
    method public void BR marketplace 7 BRL in Spain();
    method public void BR marketplace 7 BRL in US();
    method public void CA marketplace $7 comma();
    method public void CA marketplace $7 comma space();
    method public void CA marketplace $7 dot();
    method public void CA marketplace $7 dot space();
    method public void CA marketplace $7000 decimal comma();
    method public void CA marketplace $7000 decimal comma and dots();
    method public void CA marketplace $7000 decimal comma and dots space();
    method public void CA marketplace $7000 decimal comma space();
    method public void CA marketplace $7000 dot();
    method public void CA marketplace $7000 dot and commas();
    method public void CA marketplace $7000 dot and commas space();
    method public void CA marketplace $7000 dot space();
    method public void CA marketplace 7 CA$ comma();
    method public void CA marketplace 7 CA$ dot();
    method public void CA marketplace 7$ comma();
    method public void CA marketplace 7$ comma space();
    method public void CA marketplace 7$ dot();
    method public void CA marketplace 7$ dot space();
    method public void CA marketplace 7000 CA$ decimal comma();
    method public void CA marketplace 7000 CA$ decimal comma and dots();
    method public void CA marketplace 7000 CA$ dot();
    method public void CA marketplace 7000 CA$ dot and commas();
    method public void CA marketplace 7000$ decimal comma();
    method public void CA marketplace 7000$ decimal comma and dots();
    method public void CA marketplace 7000$ decimal comma and dots space();
    method public void CA marketplace 7000$ decimal comma space();
    method public void CA marketplace 7000$ dot();
    method public void CA marketplace 7000$ dot and commas();
    method public void CA marketplace 7000$ dot and commas space();
    method public void CA marketplace 7000$ dot space();
    method public void CA marketplace 7000CA$ decimal comma();
    method public void CA marketplace 7000CA$ decimal comma and dots();
    method public void CA marketplace 7000CA$ dot();
    method public void CA marketplace 7000CA$ dot and commas();
    method public void CA marketplace 7CA$ comma();
    method public void CA marketplace 7CA$ dot();
    method public void CA marketplace CA$ 7 comma();
    method public void CA marketplace CA$ 7 dot();
    method public void CA marketplace CA$ 7000 decimal comma();
    method public void CA marketplace CA$ 7000 decimal comma and dots();
    method public void CA marketplace CA$ 7000 dot();
    method public void CA marketplace CA$ 7000 dot and commas();
    method public void CA marketplace CA$7 comma();
    method public void CA marketplace CA$7 dot();
    method public void CA marketplace CA$7000 decimal comma();
    method public void CA marketplace CA$7000 decimal comma and dots();
    method public void CA marketplace CA$7000 dot();
    method public void CA marketplace CA$7000 dot and commas();
    method public void DE marketplace 7 Euro in Germany();
    method public void DE marketplace 7 Euro in Spain();
    method public void DE marketplace 7 Euro in US();
    method public void ES marketplace 7 Euro in US();
    method public void FR marketplace 7 Euro in US();
    method public void GB marketplace GBP7 comma();
    method public void GB marketplace £7 comma();
    method public void IN marketplace 7 INR in India();
    method public void IN marketplace 7 INR in Spain();
    method public void IN marketplace 7 INR in US();
    method public void IT marketplace 7 Euro in US();
    method public void Inconsistent case with IN marketplace but price in dollars, sets symbol as currency code();
    method public void JP marketplace 7 JPY in Japan();
    method public void JP marketplace 7 JPY in Spain();
    method public void JP marketplace 7 JPY in US();
    method public void MX marketplace 7 MXN in Brazil();
    method public void MX marketplace 7 MXN in Mexico();
    method public void MX marketplace 7 MXN in Spain();
    method public void MX marketplace 7 MXN in US();
    method public void US marketplace $0 comma 1234();
    method public void US marketplace $0 comma 99();
    method public void US marketplace $0 dot 1234();
    method public void US marketplace $0 dot 99();
    method public void US marketplace $1();
    method public void US marketplace $1 comma 0000000();
    method public void US marketplace $1000 comma without dot();
    method public void US marketplace $1000 dot();
    method public void US marketplace $1000 dot without comma();
    method public void US marketplace $100000 comma no decimals();
    method public void US marketplace $100000 dot no decimals();
    method public void US marketplace $10M();
    method public void US marketplace $1M with decimal comma and dots();
    method public void US marketplace $1M with decimal dot and commas();
    method public void US marketplace $7 123();
    method public void US marketplace $7 comma 1();
    method public void US marketplace $7 comma 12();
    method public void US marketplace $7 comma 123();
    method public void US marketplace $7 dot 1();
    method public void US marketplace $7 dot 12();
    method public void US marketplace $7 dot 123();
    method public void US marketplace 7 USD US$();
    method public void US marketplace 7 USD US$ comma();
    method public void US marketplace 7 USD US$ comma space();
    method public void US marketplace 7 USD US$ comma space symbol after();
    method public void US marketplace 7 USD US$ space();
    method public void US marketplace 7 USD US$ space symbol after();
    method public void US marketplace 7 USD US$ space symbol after and nbsp();
    method public void US marketplace 7 USD US$ symbol after();
    method public void US marketplace 7 USD comma symbol after();
    method public void US marketplace 7 USD symbol after();
  }

  public final class ProductConverterTest {
    ctor public ProductConverterTest();
    method public void description is correctly assigned();
    method public void free trial period is non-null if a free trial period();
    method public void free trial period is null if no free trial period();
    method public void icon URL is correctly assigned();
    method public void if price is missing, product is not converted();
    method public void originalJSON is correctly assigned();
    method public void price is correctly assigned();
    method public void priceAmountMicros is correctly calculated();
    method public void priceCurrencyCode is correctly assigned();
    method public void product types are correctly assigned();
    method public void sku is correctly assigned();
    method public void subscription period is non-null for a subscription();
    method public void subscription period is null for a non-subscriptions();
    method public void title is correctly assigned();
  }

  public final class ReceiptToStoreTransactionTest {
    ctor public ReceiptToStoreTransactionTest();
    method public void isAutoRenewing is false for a canceled subscription();
    method public void isAutoRenewing is false for non subscriptions();
    method public void isAutoRenewing is true for a non canceled subscription();
    method public void marketplace is correct();
    method public void orderID is always null();
    method public void original JSON is correct();
    method public void passing a term skus, sku of the purchase details is not the receipt sku, but the term sku();
    method public void presentedOfferingIdentifier is correct();
    method public void presentedOfferingIdentifier is correct when is null();
    method public void purchase time is correct();
    method public void purchase type is correct();
    method public void purchaseState is correct();
    method public void purchaseToken is the receipt ID();
    method public void signature is null();
    method public void storeUserID is correct();
    method public void type is correct for consumables();
  }

  public final class StoreProductTest {
    ctor public StoreProductTest();
    method public void Two StoreProducts with the same properties are equal and have same hashcode();
    method public void copyWithOfferingId copies product with offeringId();
    method public void formattedPricePerMonth is correct for SUBS annual product();
    method public void formattedPricePerMonth is correct for SUBS monthly product();
    method public void formattedPricePerMonth is null for INAPP product();
  }

}

package com.revenuecat.purchases.amazon.attribution {

  public final class AmazonDeviceIdentifiersFetcherTests {
    ctor public AmazonDeviceIdentifiersFetcherTests();
    method public void getDeviceIdentifiers catches SettingNotFoundException when getting advertising_id setting();
    method public void getDeviceIdentifiers catches SettingNotFoundException when getting limit_ad_tracking setting();
    method public void getDeviceIdentifiers returns advertising ID if ad tracking is not limited();
    method public void getDeviceIdentifiers returns empty advertising ID if ad tracking is limited();
    method public void setup();
    method public void tearDown();
  }

}

package com.revenuecat.purchases.amazon.handler {

  public final class ProductDataHandlerTest {
    ctor public ProductDataHandlerTest();
    method public void Exceptions are logged so they are not swallowed by Amazon();
    method public void callbacks are invoked just once();
    method public void getProductData is called if one of the products is not in cache();
    method public void products are cached after a successful response();
    method public void products are not cached after an unsuccessful response();
    method public void request does not succeed if received response after timeout();
    method public void request fails with timeout if did not receive response();
    method public void request succeeds if received response before timeout();
    method public void send cached product data if available for all skus();
    method public void setup();
    method public void timeout millis when getting products is correct();
  }

  public final class PurchaseHandlerTest {
    ctor public PurchaseHandlerTest();
    method public void ALREADY_PURCHASED response when making a purchase sends appropriate error();
    method public void Exceptions are logged so they are not swallowed by Amazon();
    method public void INVALID_SKU response when making a purchase sends appropriate error();
    method public void NOT_SUPPORTED response when making a purchase sends appropriate error();
    method public void broadcast is sent after finishing a failed purchase();
    method public void broadcast is sent after finishing a successful purchase();
    method public void callbacks are invoked just once();
    method public void making a purchase with errors tracks event correctly();
    method public void making a successful purchase returns the right values();
    method public void making a successful purchase tracks event correctly();
    method public void purchase failed sends a cancelled error();
    method public void setup();
    method public void tearDown();
  }

  public final class PurchaseUpdatesHandlerTest {
    ctor public PurchaseUpdatesHandlerTest();
    method public void Exceptions are logged so they are not swallowed by Amazon();
    method public void FAILED response status when querying purchases returns a store problem error();
    method public void NOT_SUPPORTED response status when querying purchases returns a store problem error();
    method public void callbacks are invoked just once();
    method public void if there are no receipts when successfully querying purchases, it returns an emtpy list();
    method public void setup();
    method public void successfully queries purchases();
  }

  public final class UserDataHandlerTest {
    ctor public UserDataHandlerTest();
    method public void Exceptions are logged so they are not swallowed by Amazon();
    method public void Failure getting user data sends appropriate error();
    method public void Getting user data is not supported, and sends appropriate error();
    method public void callbacks are invoked just once();
    method public void getting user data after cache expiration returns cached user data without initiating new requests();
    method public void getting user data before cache expiration returns cached user data without initiating new requests();
    method public void getting user data successfully();
    method public void request does not succeed if received response after timeout();
    method public void request fails with timeout if did not receive response();
    method public void request succeeds if received response before timeout();
    method public void setup();
    method public void timeout millis when getting user data is correct();
  }

}

package com.revenuecat.purchases.amazon.helpers {

  public final class DummiesKt {
    method public static com.amazon.device.iap.model.Product dummyAmazonProduct(optional String sku, optional com.amazon.device.iap.model.ProductType productType, optional String description, optional String? subscriptionPeriod, optional String title, optional String? price, optional String smallIconUrl, optional String? freeTrialPeriod, optional int coinsRewardAmount);
    method public static com.amazon.device.iap.model.Receipt dummyReceipt(optional String sku, optional com.amazon.device.iap.model.ProductType productType, optional java.util.Date purchaseDate, optional String receiptId, optional java.util.Date? cancelDate);
    method public static com.amazon.device.iap.model.UserData dummyUserData(optional String marketplace, optional String storeUserId, optional String lwaConsentStatus);
    method public static com.revenuecat.purchases.models.StoreProduct stubStoreProductForAmazon(String productId, optional com.revenuecat.purchases.ProductType type, optional com.revenuecat.purchases.models.Price price, optional com.revenuecat.purchases.models.Period period, optional com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext);
  }

  @kotlinx.parcelize.Parcelize public final class PurchasingServiceProviderForTest implements android.os.Parcelable {
    ctor public PurchasingServiceProviderForTest();
    method public com.amazon.device.iap.model.RequestId getProductData(java.util.Set<java.lang.String> skus);
    method public com.amazon.device.iap.model.RequestId getPurchaseUpdates(boolean reset);
    method public com.amazon.device.iap.model.RequestId getUserData();
    method public void notifyFulfillment(String receiptId, com.amazon.device.iap.model.FulfillmentResult fulfillmentResult);
    method public com.amazon.device.iap.model.RequestId purchase(String sku);
    method public void registerListener(android.content.Context context, com.amazon.device.iap.PurchasingListener listener);
  }

  public final class ResponsesKt {
    method public static String successfulRVSResponse(optional String termSku);
  }

}

package com.revenuecat.purchases.amazon.purchasing {

  public final class ProxyAmazonBillingActivityBroadcastReceiverTest {
    ctor public ProxyAmazonBillingActivityBroadcastReceiverTest();
    method public void ProxyAmazonBillingActivityBroadcastReceiver finishes Activity onReceive();
    method public void setup();
  }

  public final class ProxyAmazonBillingActivityTest {
    ctor public ProxyAmazonBillingActivityTest();
    method public void Activity onCreate creates delegate();
    method public void Activity onDestroy destroys delegate();
    method public error.NonExistentClass! getMockHandler();
    property public final error.NonExistentClass! mockHandler;
  }

  public final class ProxyAmazonBillingDelegateTest {
    ctor public ProxyAmazonBillingDelegateTest();
    method public void onCreate does not start purchase if savedInstanceState is not null();
    method public void onCreate finishes activity if PurchasingServiceProvider is missing();
    method public void onCreate finishes activity if ResultReceiver is missing();
    method public void onCreate finishes activity if sku is missing();
    method public void onCreate registers BroadcastReceiver();
    method public void onCreate sends RequestId();
    method public void onCreate starts purchase();
    method public void onCreate starts purchase and sends RequestId();
    method public void onDestroy unregisters BroadcastReceiver();
    method public void setup();
  }

}

package com.revenuecat.purchases.attributes {

  public final class SubscriberAttributesPurchasesTests {
    ctor public SubscriberAttributesPurchasesTests();
    method public void collectDeviceIdentifiers();
    method public void on app backgrounded attributes are synced();
    method public void on app foregrounded attributes are synced();
    method public void setAd();
    method public void setAdGroup();
    method public void setAdjustID();
    method public void setAirshipChannelID();
    method public void setAppsflyerID();
    method public void setCampaign();
    method public void setCleverTapID();
    method public void setCreative();
    method public void setFBAnonymousID();
    method public void setFirebaseAppInstanceID();
    method public void setKeyword();
    method public void setKochavaDeviceID();
    method public void setMediaSource();
    method public void setMixpanelDistinctID();
    method public void setMparticleID();
    method public void setOnesignalID();
    method public void setOnesignalUserID();
    method public void setTenjinAnalyticsInstallationID();
    method public void setting display name attribute();
    method public void setting email attribute();
    method public void setting phone number attribute();
    method public void setting push token attribute();
    method public void setup();
    method public void tearDown();
  }

}

package com.revenuecat.purchases.backend_integration_tests {

  public final class Constants {
    field public static final com.revenuecat.purchases.backend_integration_tests.Constants INSTANCE;
    field public static final String apiKey = "REVENUECAT_API_KEY";
    field public static final String loadShedderApiKey = "LOAD_SHEDDER_API_KEY";
  }

}

package com.revenuecat.purchases.common {

  public final class AppConfigTest {
    ctor public AppConfigTest();
    method public void Given two app configs with different data, both are not equal();
    method public void Given two app configs with same data, both are equal();
    method public void Given two same app configs, their hashcodes are the same();
    method public void customEntitlementComputation matches version from dangerous settings();
    method public void default baseURL is correct();
    method public void default forceServerErrors is correct();
    method public void default forceSigningErrors is correct();
    method public void default isAppBackgrounded is correct();
    method public void finishTransactions is set correctly when observer mode is false();
    method public void finishTransactions is set correctly when observer mode is true();
    method public void isAppBackgrounded can be modified correctly();
    method public void languageTag defaults to empty string();
    method public void languageTag is created successfully();
    method public void packageName is created successfully();
    method public void proxyURL is set as a baseURL();
    method public void showInAppMessagesAutomatically is set correctly();
    method public void tearDown();
    method public void toString works();
    method public void versionName defaults to empty string();
    method public void versionName is created successfully();
  }

  public final class CustomerInfoFactoryTest {
    ctor public CustomerInfoFactoryTest();
    method public void assigns active entitlements correctly();
    method public void assigns default request date correctly();
    method public void assigns default schema version correctly();
    method public void assigns default verification result correctly();
  }

  public final class CustomerInfoTest {
    ctor public CustomerInfoTest();
    method @kotlin.jvm.Throws(exceptionClasses=JSONException::class) public void Given a full purchase info, active entitlements are retrieved properly() throws org.json.JSONException;
    method @kotlin.jvm.Throws(exceptionClasses=JSONException::class) public void Given a full purchase info, expiration date is de-serialized properly() throws org.json.JSONException;
    method @kotlin.jvm.Throws(exceptionClasses=JSONException::class) public void Given a full purchase info, expiration dates are retrieved properly() throws org.json.JSONException;
    method @kotlin.jvm.Throws(exceptionClasses=JSONException::class) public void Given a full purchase info, latest expiration date is calculated properly() throws org.json.JSONException;
    method public void Given a full response with non subscription SKUs, all SKUs are parsed properly();
    method @kotlin.jvm.Throws(exceptionClasses=JSONException::class) public void Given a full response, active subscription is calculated properly() throws org.json.JSONException;
    method @kotlin.jvm.Throws(exceptionClasses=JSONException::class) public void Given a full response, all purchased SKUs are retrieved properly() throws org.json.JSONException;
    method @kotlin.jvm.Throws(exceptionClasses=JSONException::class) public void Given a null expiration date, expiration date is null() throws org.json.JSONException;
    method public void Given a request date, it is de-serialized properly();
    method public void Given a valid purchaser info, purchase date is parsed();
    method public void Given an empty response, empty object is created();
    method public void Given two empty purchaser infos with different active entitlements, both are not equal();
    method public void Given two empty purchaser infos with different request dates, both are equal();
    method public void Given two empty purchaser infos, both are equal();
    method public void Given two same purchaser infos, their hashcodes are the same();
    method @kotlin.jvm.Throws(exceptionClasses=JSONException::class) public void Given two valid products, json is deserialized properly() throws org.json.JSONException;
    method public void If management url is missing in the JSON, it is null in the customerInfo();
    method public void If management url is null in the JSON, the purchaser info is properly built();
    method public void Management url is properly retrieved();
    method public void Non subscription transactions is correctly created();
    method public void Non subscription transactions is empty if there are no non_subscriptions();
    method public void Non subscription transactions list is correctly created();
    method public void Original purchase date is null if it's present but it's a null string();
    method public void Original purchase date is null if missing();
    method public void Original purchase date is properly retrieved();
    method public void Test allExpirationDatesByProduct();
    method public void Test allPurchaseDatesByProduct();
    method public void Test subscriptionsByProductIdentifier();
    method public void Test subscriptionsByProductIdentifier nullable dates();
    method public void active subscriptions returns expired subscriptions in grace period();
    method public void active subscriptions returns multiple non expired subscriptions in grace period();
    method public void active subscriptions returns non-expired subscriptions();
    method public void active subscriptions returns nothing if no subscriptions in grace period();
    method public void failsToBeCreatedWithEmptyJSONObject();
  }

  public final class DeviceCacheTest {
    ctor public DeviceCacheTest();
    method public void If getting all preferences throws NullPointerException when calling findKeysThatStartWith, an empty set is returned();
    method public void cache is created properly();
    method public void cache offerings response works();
    method public void cacheProductEntitlementMapping caches empty mappings in shared preferences correctly();
    method public void cacheProductEntitlementMapping caches mappings in shared preferences correctly();
    method public void cleanupOldAttributionData cleans all old caches();
    method public void cleanupOldAttributionData doesn't crash if a null key is stored in SharedPreferences();
    method public void clear offerings response cache works();
    method public void clearing caches clears all user ID data();
    method public void clearing caches clears timestamps();
    method public void clearing customer info caches clears the shared preferences();
    method public void getPreviouslySentHashedTokens returns an emptySet if there's a ClassCastException when calling getStringSet();
    method public void getProductEntitlementMapping clears cache if cache has invalid value();
    method public void getProductEntitlementMapping returns correct product entitlements mapping from cache();
    method public void getProductEntitlementMapping returns null if cache has invalid value();
    method public void getProductEntitlementMapping returns null if nothing in cache();
    method public void getStorefront gets storefront from cache();
    method public void gets offerings from shared preferences();
    method public void getting sent tokens works();
    method public void getting the tokens not in cache returns all the active tokens that have not been sent();
    method public void given a appuserid, it is able to cache it();
    method public void given a customer info, the information is cached();
    method public void given a customer info, the information is cached with a request date();
    method public void given a customer info, the information is cached with a schema version();
    method public void given a customer info, the information is cached with a verification result();
    method public void given a customer info, the key in the cache is correct();
    method public void given a invalid customer info, the information is null();
    method public void given a non cached appuserid, the cached appuserid is null();
    method public void given a non cached appuserid, the cached appuserid is returned();
    method public void given a valid customer info with request date, the JSON is parsed correctly();
    method public void given a valid customer info with schema version, the JSON is parsed correctly();
    method public void given a valid customer info without request date, the JSON is parsed correctly();
    method public void given a valid customer info without verification result, the JSON is parsed correctly();
    method public void given a valid customer info, the JSON is parsed correctly();
    method public void given a valid customer info, the created customer info does not have verification result information();
    method public void given a valid version customer info, it is returned();
    method public void given an older version of customer info, nothing is returned();
    method public void given no cached info, cached purchased info is null();
    method public void if all tokens are active, do not remove any();
    method public void if token is not active anymore, remove it from database();
    method public void invalidating customer info caches();
    method public void isCustomerInfoCacheStale in background returns true if the cached object is stale();
    method public void isCustomerInfoCacheStale returns true if the cached object is stale();
    method public void isProductEntitlementMappingCacheStale returns not stale if cache newer than cache period();
    method public void isProductEntitlementMappingCacheStale returns stale if cache older than cache period();
    method public void isProductEntitlementMappingCacheStale returns stale if nothing in cache();
    method public void setProductEntitlementMappingCacheTimestampToNow caches cache timestamp correctly();
    method public void setStorefront saves storefront in cache();
    method public void setup();
    method public void stale if no caches();
    method public void timestamp is set when caching customer info();
    method public void token is hashed then added();
  }

  public final class DispatcherTest {
    ctor public DispatcherTest();
    method public void asyncCallHandlesFailures();
    method public void asyncCallHandlesSuccess();
    method public void canBeCreated();
    method public void closeStopsThreads();
    method public void execute on background when service is not shutdown();
    method public void execute on background when service is shutdown();
    method public void executes with correct delay when in integration tests();
    method public void executes with correct delay when not in integration tests();
    method public void executesInExecutor();
    method public void securityExceptionsAreCorrectlyConvertedToPurchaseErrors();
    method public void setup();
    method public void signatureVerificationExceptions are correctly converted to purchase errors();
  }

  public static final class DispatcherTest.CurrentThreadExecutorService extends java.util.concurrent.ThreadPoolExecutor {
    ctor public DispatcherTest.CurrentThreadExecutorService(optional java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy callerRunsPolicy);
    method public boolean getExecuteCalled();
    method public void setExecuteCalled(boolean);
    property public final boolean executeCalled;
  }

  public final class EntitlementInfoTest {
    ctor public EntitlementInfoTest();
    method public void same entitlement info are equal();
    method public void same entitlement info with different verification are not equal();
  }

  public final class EntitlementInfosTests {
    ctor public EntitlementInfosTests();
    method public void Given two same entitlementInfo, their hashcodes are the same();
    method public void Given two same entitlementInfos, their hashcodes are the same();
    method public void active subscription();
    method public void creates entitlement infos();
    method public void creates entitlement infos with non subscription and subscription();
    method public void empty subscriber info();
    method public void entitlementInfo is active if expiration time in the future();
    method public void entitlementInfo is active if within grace period();
    method public void entitlementInfo is not active if past grace period();
    method public void inactive subscription();
    method public void missing ownershipType from subscription maps to UNKNOWN();
    method public void multiple entitlements();
    method public void non subscription();
    method public void ownershipType from subscription();
    method public void period from non subscription();
    method public void period from subscription();
    method public void prepaid won't renew();
    method public void promos won't renew();
    method public void same entitlement infos with different verifications are not equal();
    method public void same entitlement infos with same verifications are equal();
    method public void store from non subscription();
    method public void store from subscription();
    method public void string accessor();
    method public void subscription is sandbox();
    method public void subscription will renew();
    method public void subscription wont renew billing error();
    method public void subscription wont renew billing error and cancelled();
    method public void subscription wont renew cancelled();
    method public void unknown ownershipType from subscription();
    method public void verification error is set correctly for entitlementInfos and entitlementInfo();
  }

  public final class FileHelperTest {
    ctor public FileHelperTest();
    method public void appendToFile appends to file if it exists with content();
    method public void appendToFile creates file if it does not exist();
    method public void deleteFile calls appropriate methods();
    method public void fileIsEmpty returns false if file exists and has text();
    method public void fileIsEmpty returns true if file does not exist();
    method public void fileIsEmpty returns true if file exists and is empty();
    method public void fileSizeInKB returns 0 if file does not exist();
    method public void fileSizeInKB returns 0 if file exists but is empty();
    method public void fileSizeInKB returns value if file has contents();
    method public void readFilePerLines returns sequence with correct content();
    method public void readFilePerLines sequence can be limited correctly();
    method public void removeFirstLinesFromFile leaves content after first lines();
    method public void removeFirstLinesFromFile leaves empty file if exact lines removed();
    method public void removeFirstLinesFromFile leaves empty file if fewer removed();
    method public void removeFirstLinesFromFile leaves multiple lines after first lines();
    method public void setup();
    method public void tearDown();
  }

  public final class LogUtilsTest {
    ctor public LogUtilsTest();
    method public void logLevelDebugLogsEnabled();
    method public void logLevelWithDebugLogsEnabled();
  }

  public final class MockCustomerInfoFactoryKt {
    method public static com.revenuecat.purchases.CustomerInfo createCustomerInfo(String response, optional java.util.Date? requestDate, optional com.revenuecat.purchases.VerificationResult verificationResult);
    method public static com.revenuecat.purchases.CustomerInfo createCustomerInfo(org.json.JSONObject jsonObject, optional java.util.Date? requestDate, optional com.revenuecat.purchases.VerificationResult verificationResult);
  }

  public final class PlatformInfo {
    ctor public PlatformInfo(String flavor, String? version);
    method public String component1();
    method public String? component2();
    method public com.revenuecat.purchases.common.PlatformInfo copy(String flavor, String? version);
    method public String getFlavor();
    method public String? getVersion();
    property public final String flavor;
    property public final String? version;
  }

  public final class ReceiptInfoTest {
    ctor public ReceiptInfoTest();
    method public void ReceiptInfo allows price and currency to be set manually();
    method public void ReceiptInfo defaults price and currency from a INAPP StoreProduct();
    method public void ReceiptInfo sets duration and pricingPhases from a StoreProduct with a subscription period and subscription options();
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI public final class SharedConstants {
    field public static final com.revenuecat.purchases.common.SharedConstants INSTANCE;
    field public static final String RC_CUSTOMER_CENTER_TAG = "rc-customer-center";
  }

  public final class TestDurationExtensionsKt {
    method public static java.util.Date ago(long);
    method public static java.util.Date fromNow(long);
  }

}

package com.revenuecat.purchases.common.backend {

  public final class BackendGetCustomerCenterConfigTest {
    ctor public BackendGetCustomerCenterConfigTest();
    method public void getCustomerCenterConfigData errors propagate correctly();
    method public void getCustomerCenterConfigData gets correctly();
    method public void given multiple getCustomerCenterConfig calls for same subscriber same body, only one is triggered();
    method public void setUp();
  }

  public final class BackendPaywallEventTest {
    ctor public BackendPaywallEventTest();
    method public void postPaywallEvents calls error handler if error response code();
    method public void postPaywallEvents calls error handler with shouldMarkAsSynced false if 404();
    method public void postPaywallEvents calls error handler with shouldMarkAsSynced false if a network error is raised();
    method public void postPaywallEvents calls error handler with shouldMarkAsSynced false if server error();
    method public void postPaywallEvents calls error handler with shouldMarkAsSynced true if 400();
    method public void postPaywallEvents calls error handler with shouldMarkAsSynced true if json error();
    method public void postPaywallEvents calls success handler();
    method public void postPaywallEvents multiple times with same request, only one is triggered();
    method public void postPaywallEvents posts events correctly();
    method public void setUp();
  }

  public final class BackendRedeemWebPurchaseTest {
    ctor public BackendRedeemWebPurchaseTest();
    method public void given multiple postRedeemWebPurchase calls for same token and user ID, only one is triggered();
    method public void postRedeemWebPurchase errors propagate correctly();
    method public void postRedeemWebPurchase errors with invalid token if backend returns that code();
    method public void postRedeemWebPurchase errors with purchase belongs to other user if backend returns that code();
    method public void postRedeemWebPurchase errors with token expired if backend returns that code();
    method public void postRedeemWebPurchase posts correctly();
    method public void setUp();
  }

  public final class BackendTest {
    ctor public BackendTest();
    method public void attemptsToParseErrorMessageFromServer();
    method public void canBeCreated();
    method public void clearing caches clears http caches();
    method public void clientErrorCallsErrorHandler();
    method public void customer info call is enqueued with delay if on background();
    method public void doesntDispatchIfClosed();
    method public void getCustomerInfo does not add post fields to sign();
    method public void getCustomerInfo error callback returns isServerError false if response code is 400();
    method public void getCustomerInfo error callback returns isServerError true if response code is 500();
    method public void getCustomerInfoCallsProperURL();
    method public void getCustomerInfoFailsIfNot20X();
    method public void getOfferings does not send post fields to sign();
    method public void getProductEntitlementMapping call is enqueued with long delay();
    method public void getProductEntitlementMapping calls error handler if status code is 400();
    method public void getProductEntitlementMapping calls error handler if status code is 500();
    method public void getProductEntitlementMapping calls error handler when Network error();
    method public void getProductEntitlementMapping calls success handler();
    method public void getProductEntitlementMapping executes same request if done after first one finishes();
    method public void getProductEntitlementMapping makes call with correct parameters();
    method public void getProductEntitlementMapping only executes once same request if one in progress();
    method public void getSubscriberInfoCallsProperURL();
    method public void getSubscriberInfoFailsIfNot20X();
    method public void gets updated subscriber after post();
    method public void given a no offerings response();
    method public void given a non server error, correct callback values are given();
    method public void given a server error, correct callback values are given();
    method public void given getCustomerInfo call on background, then one in foreground, both are executed();
    method public void given getCustomerInfo call on foreground, then one in background, only one request without delay is triggered();
    method public void given getOfferings call on background, then one in foreground, both are executed();
    method public void given getOfferings call on foreground, then one in background, only one request without delay is triggered();
    method public void given multiple get offerings calls for same user, only one is triggered();
    method public void given multiple getCustomerInfo calls for same subscriber same body, only one is triggered();
    method public void given multiple login calls for same ids, only one http call is triggered, and all onError callbacks are called if call is not successful();
    method public void given multiple login calls for same ids, only one http call is triggered, and all onError callbacks are called if customerInfo can't be parsed();
    method public void given multiple login calls for same ids, only one is triggered();
    method public void given multiple offerings get calls for different user, both are triggered();
    method public void given multiple post calls for same subscriber different durations, both are triggered();
    method public void given multiple post calls for same subscriber different offering, both are triggered();
    method public void given multiple post calls for same subscriber different price, both are triggered();
    method public void given multiple post calls for same subscriber different store user ID, both are triggered();
    method public void given multiple post calls for same subscriber same durations, only one is triggered();
    method public void given multiple post calls for same subscriber, only one is triggered();
    method public void handlesMissingMessageInErrorBody();
    method public void logIn calls OnError if customerInfo can't be parsed();
    method public void logIn correctly parses customerInfo();
    method public void logIn makes the right http call();
    method public void logIn returns created false if status isn't 201();
    method public void logIn returns created true if status is 201();
    method public void logIn uses correct post fields to sign();
    method public void offerings call is enqueued with delay if on background();
    method public void postDiagnostics call is enqueued with delay();
    method public void postDiagnostics calls error handler with retry if status code is 500();
    method public void postDiagnostics calls error handler with retry when Network error();
    method public void postDiagnostics calls error handler without retry if status code is 400();
    method public void postDiagnostics calls error handler without retry when InsufficientPermissionsError();
    method public void postDiagnostics calls success handler();
    method public void postDiagnostics executes same request if done after first one finishes();
    method public void postDiagnostics makes call with correct parameters();
    method public void postDiagnostics only executes once same request if one in progress();
    method public void postReceipt calls backend once();
    method public void postReceipt calls fail for multiple product ids errors();
    method public void postReceipt doesn't have product_plan_id in body if receipt is GoogleStoreProduct in-app();
    method public void postReceipt error callback returns isServerError false if response code is 400();
    method public void postReceipt error callback returns isServerError true if response code is 500();
    method public void postReceipt error callback says purchase can be consumed if 4xx error and not unsupported error();
    method public void postReceipt has product_plan_id in body if receipt is GoogleStoreProduct subscription();
    method public void postReceipt passes applied targeting rule in body();
    method public void postReceipt passes durations();
    method public void postReceipt passes marketplace as header();
    method public void postReceipt passes normal duration in body();
    method public void postReceipt passes paywall in body();
    method public void postReceipt passes presented_placement_identifier in body();
    method public void postReceipt passes price and currency();
    method public void postReceipt passes price_string and marketplace as header();
    method public void postReceipt passes price_string as header();
    method public void postReceipt passes replacement mode and pricing phases as maps in body();
    method public void postReceipt passes store user ID in body();
    method public void postReceipt posts initiationSource();
    method public void postReceipt uses correct post fields to sign();
    method public void postReceiptCallsFailsFor4XX();
    method public void postReceiptCallsProperURL();
    method public void postReceiptNotFinishingTransactions();
    method public void setup();
    method public error.NonExistentClass! tearDown();
  }

}

package com.revenuecat.purchases.common.caching {

  public final class DateExtensionsTest {
    ctor public DateExtensionsTest();
    method public void cache date is not stale if less than 5 minutes old and app in foreground();
    method public void cache date is not stale if less than cache duration time has passed();
    method public void cache date is not stale if more than 5 minutes old and app in background();
    method public void cache date is stale if more than 25 hours old and app in background();
    method public void cache date is stale if more than 5 minutes old and app in foreground();
    method public void cache date is stale if more than cache duration time has passed();
  }

  public final class InMemoryCachedObjectTest {
    ctor public InMemoryCachedObjectTest();
    method public void cache is cleared correctly();
    method public void cache timestamp is cleared correctly();
    method public void instance is cached correctly();
    method public void timestamp is set correctly();
    method public void timestamp is set correctly when setting instance();
  }

}

package com.revenuecat.purchases.common.diagnostics {

  public final class DiagnosticsEntryTest {
    ctor public DiagnosticsEntryTest();
    method public void setup();
    method public void toString transforms event to correct JSON();
  }

  public final class DiagnosticsFileHelperTest {
    ctor public DiagnosticsFileHelperTest();
    method public void appendEntryToDiagnosticsFile calls are correct();
    method public void deleteDiagnosticsFile calls are correct();
    method public void deleteOlderDiagnostics calls are correct();
    method public void isDiagnosticsFileTooBig is false if file smaller than limit();
    method public void isDiagnosticsFileTooBig is true if file bigger than limit();
    method public void readDiagnosticsFile reads content as json();
    method public void readDiagnosticsFile returns empty list if file is empty();
    method public void setup();
  }

  public final class DiagnosticsSynchronizerTest {
    ctor public DiagnosticsSynchronizerTest();
    method public void onEventTracked does not sync diagnostics file if file is not big enough to sync();
    method public void onEventTracked syncs diagnostics file if file is big enough to sync();
    method public void setup();
    method public void syncDiagnosticsFileIfNeeded calls backend with correct parameters if file has contents();
    method public void syncDiagnosticsFileIfNeeded cleans sent events if backend request successful();
    method public void syncDiagnosticsFileIfNeeded deletes file if IOException happens();
    method public void syncDiagnosticsFileIfNeeded deletes file if JSONException happens();
    method public void syncDiagnosticsFileIfNeeded deletes file if backend request unsuccessful and last retry();
    method public void syncDiagnosticsFileIfNeeded does not crash if IOException happens when deleting file();
    method public void syncDiagnosticsFileIfNeeded does not delete file if backend request unsuccessful once();
    method public void syncDiagnosticsFileIfNeeded does not do anything if diagnostics file is already syncing();
    method public void syncDiagnosticsFileIfNeeded does not do anything if diagnostics file is empty();
    method public void syncDiagnosticsFileIfNeeded increases consecutive errors count if backend request unsuccessful();
    method public void syncDiagnosticsFileIfNeeded removes consecutive failures count if IOException happens();
    method public void syncDiagnosticsFileIfNeeded removes consecutive failures count if request successful();
    method public void syncDiagnosticsFileIfNeeded removes consecutive failures count if request unsuccessful and last retry();
    method public void syncDiagnosticsFileIfNeeded removes consecutive failures count if should not retry();
    method public void syncDiagnosticsFileIfNeeded removes file if should not retry();
    method public void syncDiagnosticsFileIfNeeded tracks clearingDiagnosticsAfterFailedSync if should not retry();
    method public void syncDiagnosticsFileIfNeeded tracks maxDiagnosticsSyncRetriesReached if request unsuccessful and last retry();
  }

  public final class DiagnosticsTrackerFunctionalTest {
    ctor public DiagnosticsTrackerFunctionalTest();
    method public void diagnostics synchronizer file is cleared if too big();
    method public void diagnostics tracker file is not cleared if not too big when tracking files();
    method public void setup();
    method public void tearDown();
  }

  public final class DiagnosticsTrackerTest {
    ctor public DiagnosticsTrackerTest();
    method public void setup();
    method public void tearDown();
    method public void trackAmazonPurchaseAttempt tracks correct event();
    method public void trackAmazonQueryProductDetailsRequest tracks correct event();
    method public void trackAmazonQueryPurchasesRequest tracks correct event();
    method public void trackCustomerInfoVerificationResultIfNeeded does not track when verification not requested();
    method public void trackCustomerInfoVerificationResultIfNeeded tracks when verification is failed();
    method public void trackEnteredOfflineEntitlementsMode tracks correct data();
    method public void trackErrorEnteringOfflineEntitlementsMode tracks correct data for entitlement mapping error();
    method public void trackErrorEnteringOfflineEntitlementsMode tracks correct data for one time purchase error();
    method public void trackErrorEnteringOfflineEntitlementsMode tracks correct data for unknown error();
    method public void trackEvent calls listener();
    method public void trackEvent clears diagnostics file if too big, then adds event();
    method public void trackEvent handles IOException();
    method public void trackEvent performs correct calls();
    method public void trackEventInCurrentThread does not enqueue request();
    method public void trackFeatureNotSupported tracks correct event();
    method public void trackGetCustomerInfoResult tracks correct data();
    method public void trackGetCustomerInfoStarted tracks correct data();
    method public void trackGetOfferingsResult tracks correct data();
    method public void trackGetOfferingsStarted tracks correct data();
    method public void trackGetProductsResult tracks correct data();
    method public void trackGetProductsStarted tracks correct data();
    method public void trackGooglePurchaseStarted tracks correct event();
    method public void trackGooglePurchaseUpdateReceived tracks correct event();
    method public void trackGoogleQueryProductDetailsRequest tracks correct event();
    method public void trackGoogleQueryPurchaseHistoryRequest tracks correct event();
    method public void trackGoogleQueryPurchasesRequest tracks correct event();
    method public void trackHttpRequestPerformed tracks correct event when coming from backend();
    method public void trackHttpRequestPerformed tracks correct event when coming from cache();
    method public void trackHttpRequestPerformed tracks correct event when is retry();
    method public void trackMaxEventsStoredLimitReached tracks correct event();
    method public void trackPurchaseResult tracks correct data();
    method public void trackPurchaseStarted tracks correct data();
    method public void trackRestorePurchasesResult tracks correct data();
    method public void trackRestorePurchasesStarted tracks correct data();
    method public void trackSyncPurchasesResult tracks correct data();
    method public void trackSyncPurchasesStarted tracks correct data();
  }

}

package com.revenuecat.purchases.common.events {

  public final class CustomerCenterConfigDataTest {
    ctor public CustomerCenterConfigDataTest();
    method public void Appearance color information is correctly set();
    method public void CustomerCenterConfigData creation and equality();
    method public void HelpPath properties are correctly set();
    method public void Localization returns correct localized strings and default for those not found();
    method public void Screen properties are correctly set();
    method public void Support email is correctly set();
    method public void can parse json with unknown open method type();
    method public void can parse json with unknown path types();
    method public void can parse json with unknown screen types();
  }

  public final class EventsManagerTest {
    ctor public EventsManagerTest();
    method public void flushEvents multiple times only executes once();
    method public void flushEvents multiple times, then finishing, adding events and flushing again works();
    method public void flushEvents sends available events to backend();
    method public void flushEvents with events stored with removed keys from model, successfully flushes them();
    method public void flushEvents with invalid events, flushes valid events();
    method public void flushEvents with invalid events, flushes valid events when reaching max count per request();
    method public void flushEvents without events, does not call backend();
    method public void if backend errors but marking events as synced, events are deleted();
    method public void if backend errors without marking events as synced, events are not deleted();
    method public void if more than maximum events flushEvents only posts maximum events();
    method public void setUp();
    method public void tearDown();
    method public void tracking customer center events adds them to file();
    method public void tracking mixed events adds them to file();
    method public void tracking paywall events adds them to file();
  }

  @kotlinx.serialization.Serializable public final class EventsRequest {
    method public com.revenuecat.purchases.common.events.EventsRequest copy(java.util.List<? extends com.revenuecat.purchases.common.events.BackendEvent> events);
    method public java.util.List<java.lang.String> getCacheKey();
    property public final java.util.List<java.lang.String> cacheKey;
  }

  public interface FeatureEvent {
  }

}

package com.revenuecat.purchases.common.models {

  public final class ParameterizedPricingPhaseTest {
    ctor public ParameterizedPricingPhaseTest(String billingPeriodIso8601, com.revenuecat.purchases.common.models.ParameterizedPricingPhaseTest.Expected expected);
    method public static java.util.Collection<?> parameters();
    method public void should correctly calculate periodic prices for billing period();
    field public static final com.revenuecat.purchases.common.models.ParameterizedPricingPhaseTest.Companion Companion;
  }

  public static final class ParameterizedPricingPhaseTest.Companion {
    method public java.util.Collection<?> parameters();
  }

  public static final class ParameterizedPricingPhaseTest.Expected {
    ctor public ParameterizedPricingPhaseTest.Expected(com.revenuecat.purchases.models.Price daily, com.revenuecat.purchases.models.Price weekly, com.revenuecat.purchases.models.Price monthly, com.revenuecat.purchases.models.Price yearly);
    method public com.revenuecat.purchases.models.Price getDaily();
    method public com.revenuecat.purchases.models.Price getMonthly();
    method public com.revenuecat.purchases.models.Price getWeekly();
    method public com.revenuecat.purchases.models.Price getYearly();
    property public final com.revenuecat.purchases.models.Price daily;
    property public final com.revenuecat.purchases.models.Price monthly;
    property public final com.revenuecat.purchases.models.Price weekly;
    property public final com.revenuecat.purchases.models.Price yearly;
  }

  public final class PeriodOfferTest {
    ctor public PeriodOfferTest(String period, int days);
    method public static java.util.Collection<java.lang.Object[]> data();
    method public void period to number of days is correct();
    field public static final com.revenuecat.purchases.common.models.PeriodOfferTest.Companion Companion;
  }

  public static final class PeriodOfferTest.Companion {
    method public java.util.Collection<java.lang.Object[]> data();
  }

  public final class PricingPhaseTest {
    ctor public PricingPhaseTest();
    method public void finite recurring phase with 1 billing cycle has PAY_UP_FRONT payment mode();
    method public void finite recurring phase with 2 billing cycles has PAY_AS_YOU_GO payment mode();
    method public void free phase with 1 billing cycle has FREE_TRIAL payment mode();
    method public void infinite recurring (null billingCycleCount) phase has no payment mode();
    method public void non-recurring (null billingCycleCount) phase has no payment mode();
  }

  public final class SubscriptionOptionsTest {
    ctor public SubscriptionOptionsTest();
    method public void Can find free trial();
    method public void Can find intro trial();
    method public void Can find tags();
  }

  public final class TransactionTest {
    ctor public TransactionTest();
    method public void Can be created();
  }

}

package com.revenuecat.purchases.common.networking {

  public final class ETagManagerTest {
    ctor public ETagManagerTest();
    method public void An ETag Last refresh time header is added if there is a refresh time saved for that request();
    method public void An ETag header is added if there is an ETag saved for that request();
    method public void Cached result is returned when calling getStoredResult();
    method public void Clearing caches removes all shared preferences();
    method public void ETag Last refresh time header is null if there is an ETag saved but no refresh time saved for that request();
    method public void ETag Last refresh time header is null if there is no ETag saved for that request();
    method public void ETag header is empty added if there is no ETag saved for that request();
    method public void ETag headers are added if cached result is not requested and verification not requested();
    method public void ETag headers are added if cached result is verified and verification not requested();
    method public void ETag headers are not added if cached result errored();
    method public void ETag headers are not added if cached result is not requested and verification requested();
    method public void ETag headers are not added if cached result verified on device();
    method public void Expected number of headers are added when there is an Etag and last refresh time saved for that request();
    method public void GetStoredResult returns null if there's nothing cached();
    method public void HTTP Header is empty when refreshing etag();
    method public void If response code is 304, cached version should be used();
    method public void If response code is 304, don't store response in cache();
    method public void If response code is 500, don't store response in cache();
    method public void If response code is not 304, cached version should not be used();
    method public void If response code is not 304, store response in cache();
    method public void If verification failed, don't store response in cache();
    method public void If verification successful, store response in cache();
    method public void don't store result from backend if the response code is 304 and there is a cached result();
    method public void getHTTPResultFromCacheOrBackend should use requestDate from header even if cached is different();
    method public void getHTTPResultFromCacheOrBackend should use requestDate from header when no cached version exists();
    method public void getHTTPResultFromCacheOrBackend should use verification result parameter when coming from backend();
    method public void if backend returns a 200, store result from backend();
    method public void if it should not use the cached version, use and cache backend result();
    method public void if should not use cached version, and it's refreshing the etag, use and cache backend result();
    method public void if should use cached version, but there's nothing cached, return null when getting result and don't cache anything();
    method public void if should use cached version, but there's nothing cached, use backend result and don't cache anything if etag is already being refreshed();
    method public void setup();
    method public void verificationResults are expected between cache and backend();
  }

  public final class EndpointTest {
    ctor public EndpointTest();
    method public void Diagnostics has correct path();
    method public void GetAmazonReceipt has correct path();
    method public void GetCustomerInfo has correct path();
    method public void GetOfferings has correct path();
    method public void GetProductEntitlementMapping has correct path();
    method public void LogIn has correct path();
    method public void Paywall events has correct path();
    method public void PostAttributes has correct path();
    method public void PostReceipt has correct path();
    method public void PostRedeemWebPurchase has correct path();
    method public void needsNonceToPerformSigning is false for expected values();
    method public void needsNonceToPerformSigning is true for expected values();
    method public void supportsSignatureVerification returns false for expected values();
    method public void supportsSignatureVerification returns true for expected values();
    method public void verify needsNonceToPerformSigning is true only if supportsSignatureVerification is true();
  }

  public final class HTTPResultTest {
    ctor public HTTPResultTest();
    method public void result defaults when deserializing are expected if data not part of serialized string();
    method public void result is deserialized correctly();
    method public void result is serialized correctly();
    method public void result with null requestDate is serialized correctly();
  }

  public final class MapConverterTest {
    ctor public MapConverterTest();
    method public void setUp();
    method public void test convert to JSON();
    method public void test convert to JSON with nested array of strings();
    method public void test map conversion fixes wrong treatment of arrays of strings in JSON library();
  }

}

package com.revenuecat.purchases.common.offerings {

  public final class OfferingsCacheTest {
    ctor public OfferingsCacheTest();
    method public void cache is empty initially();
    method public void cache is not stale right after caching value();
    method public void cache is stale if cached value is stale();
    method public void cache is stale if cached value removes update time();
    method public void cache is stale if no cached value();
    method public void caching offerings works();
    method public void clear cache clears offerings cache and offerings response cache();
    method public void mockDeviceCacheOfferingResponse();
    method public void offerings cache returns device cache offerings response();
    method public void setUp();
  }

  public final class OfferingsFactoryTest {
    ctor public OfferingsFactoryTest();
    method public void configuration error if no products configured();
    method public void configuration error if products are not set up when fetching offerings();
    method public void createOfferings does not fail if paywall is invalid();
    method public void createOfferings returns error if json with wrong format();
    method public void createOfferings with paywall();
    method public void createOfferings with placement();
    method public void createOfferings with placement with null fallback();
    method public void createOfferings with targeting();
    method public void returns offerings when products found as inapp();
    method public void returns offerings when products found as subs();
    method public void setUp();
  }

  public final class OfferingsManagerTest {
    ctor public OfferingsManagerTest();
    method public void does not fetch offerings on app foreground if it's not stale();
    method public void fetch offerings on app foreground if it's stale();
    method public void get offerings error is called if backend error and cached response with invalid offerings();
    method public void get offerings error is called if cached response but not a server error();
    method public void get offerings error is called if server error and no cached response();
    method public void get offerings success is called if server error and cached response();
    method public void getOfferings does not pre download offering images if current offering is null();
    method public void getOfferings pre downloads offering images for current offering();
    method public void getOfferings pre downloads offering images for current offering when request fails and served from cache();
    method public void getOfferings tracks result event on error with NOT_FOUND cache();
    method public void getOfferings tracks result event on success from STALE cache();
    method public void getOfferings tracks result event on success from VALID cache();
    method public void getOfferings tracks result event on success with NOT_FOUND cache();
    method public void getOfferings tracks start event();
    method public void getOfferings with fetchCurrent tracks result event on error();
    method public void getOfferings with fetchCurrent tracks result event on success();
    method public void getOfferingsIsCached();
    method public void if cached offerings are not stale();
    method public void if cached offerings are not stale in background();
    method public void if cached offerings are stale when on background, call backend();
    method public void if cached offerings are stale, call backend();
    method public void if no cached offerings, backend is hit when getting offerings();
    method public void if no cached offerings, backend is hit when getting offerings when on background();
    method public void products are populated when getting offerings();
    method public void setUp();
  }

}

package com.revenuecat.purchases.common.offlineentitlements {

  public final class OfflineCustomerInfoCalculatorTest {
    ctor public OfflineCustomerInfoCalculatorTest();
    method public void error is triggered if active inapp purchase exists();
    method public void error is triggered when fetching products fails();
    method public void in app product also grants entitlement();
    method public void multiple products();
    method public void product with different entitlement per base plan();
    method public void product with two entitlements();
    method public void raw data();
    method public void setUp();
    method public void simple customer info();
    method public void two products with overlapping entitlements prioritizes longest expiration();
    method public void two products with overlapping entitlements prioritizes the one with no expiration();
    method public void when in app purchases found, error is tracked();
    method public void when other errors, error is tracked();
  }

  public final class OfflineEntitlementsManagerTest {
    ctor public OfflineEntitlementsManagerTest();
    method public void calculateAndCacheOfflineCustomerInfo caches computed customer info on success();
    method public void calculateAndCacheOfflineCustomerInfo clears customer info cache on success();
    method public void calculateAndCacheOfflineCustomerInfo does not cache computed customer info on error();
    method public void calculateAndCacheOfflineCustomerInfo does not clear customer info cache on error();
    method public void calculateAndCacheOfflineCustomerInfo does not track entering offline customer info mode when error();
    method public void calculateAndCacheOfflineCustomerInfo does nothing if offline entitlements disabled();
    method public void calculateAndCacheOfflineCustomerInfo only computes offline customer info one at a time and calls all error callbacks();
    method public void calculateAndCacheOfflineCustomerInfo only computes offline customer info one at a time and calls all success callbacks();
    method public void calculateAndCacheOfflineCustomerInfo returns customer info on success callback();
    method public void calculateAndCacheOfflineCustomerInfo returns error();
    method public void calculateAndCacheOfflineCustomerInfo tracks entering offline customer info mode when successful();
    method public void resetOfflineCustomerInfoCache changes offline customer info cache to null();
    method public void resetOfflineCustomerInfoCache does nothing if offline customer info is null();
    method public void setUp();
    method public void shouldCalculateOfflineCustomerInfoInGetCustomerInfoRequest returns false if custom entitlement computation();
    method public void shouldCalculateOfflineCustomerInfoInGetCustomerInfoRequest returns false if not finishing transactions();
    method public void shouldCalculateOfflineCustomerInfoInGetCustomerInfoRequest returns false if not server error and cached customer info is not null();
    method public void shouldCalculateOfflineCustomerInfoInGetCustomerInfoRequest returns false if not server error and cached customer info is null();
    method public void shouldCalculateOfflineCustomerInfoInGetCustomerInfoRequest returns false if offline entitlements disabled();
    method public void shouldCalculateOfflineCustomerInfoInGetCustomerInfoRequest returns false if server error and cached customer info is not null();
    method public void shouldCalculateOfflineCustomerInfoInGetCustomerInfoRequest returns true if server error and cached customer info is null();
    method public void shouldCalculateOfflineCustomerInfoInPostReceipt returns false if custom entitlements computation mode();
    method public void shouldCalculateOfflineCustomerInfoInPostReceipt returns false if not server error();
    method public void shouldCalculateOfflineCustomerInfoInPostReceipt returns false if offline entitlements disabled();
    method public void shouldCalculateOfflineCustomerInfoInPostReceipt returns true if server error ();
    method public void shouldCalculateOfflineCustomerInfoInPostReceipt returns true if server error but not finishing transactions();
    method public void updateProductEntitlementMappingCacheIfStale caches mapping from backend if request successful();
    method public void updateProductEntitlementMappingCacheIfStale does nothing if backend request errors();
    method public void updateProductEntitlementMappingCacheIfStale does nothing if cache not stale();
    method public void updateProductEntitlementMappingCacheIfStale does nothing if not finishing transactions();
    method public void updateProductEntitlementMappingCacheIfStale does nothing if offline entitlements disabled();
    method public void updateProductEntitlementMappingCacheIfStale does nothing in custom entitlement computation mode();
  }

  public final class ProductEntitlementMappingTest {
    ctor public ProductEntitlementMappingTest();
    method public void equals returns false if mapping are different();
    method public void equals returns true if same mappings();
    method public void fromJson parses empty mappings correctly();
    method public void fromJson parses mappings correctly();
    method public void toJson transforms mappings back to original Json();
  }

  public final class PurchasedProductsFetcherTest {
    ctor public PurchasedProductsFetcherTest();
    method public void checks onError callback is called();
    method public void checks onSuccess callback is called();
    method public void fails fetching products if product entitlement mappings not available();
    method public void one active purchased product with multiple entitlements();
    method public void one active purchased product with single entitlement();
    method public void returns empty list if there are no purchases();
    method public void setUp();
    method public void two active purchased products with different entitlement();
    method public void two active purchased products with same entitlement();
  }

}

package com.revenuecat.purchases.common.verification {

  public final class DefaultSignatureVerifierTest {
    ctor public DefaultSignatureVerifierTest();
    method public void setUp();
    method public void verify verifies correct message and signature();
    method public void verify verifies incorrect message();
    method public void verify verifies incorrect signature();
  }

  public final class IntermediateSignatureHelperTest {
    ctor public IntermediateSignatureHelperTest();
    method public void if fails to verify intermediate signature, returns error();
    method public void if intermediate signature is expired, returns error();
    method public void if intermediate signature is valid, returns verifier();
    method public void setUp();
  }

  public final class SignatureTest {
    ctor public SignatureTest();
    method public void components have correct ranges();
    method public void equals checks all fields();
    method public void equals is false if small changes();
    method public void fromString errors if invalid signature size();
    method public void fromString parses correctly();
    method public void hashCode changes if different();
    method public void hashCode includes all fields();
  }

  public final class SignatureVerificationModeTest {
    ctor public SignatureVerificationModeTest();
    method public void fromEntitlementVerificationMode transforms verification mode correctly();
    method public void intermediateSignatureHelper has values in enabled verification modes();
    method public void shouldVerify has correct values for all the verification modes();
  }

  public final class SigningManagerTest {
    ctor public SigningManagerTest();
    method public void createRandomNonce does not end with new line();
    method public void createRandomNonce returns 12 base64 encoded random bytes();
    method public void createRandomNonce returns different nonce on each call();
    method public void getPostParamsForSigningHeaderIfNeeded returns header with correct value in enforced();
    method public void getPostParamsForSigningHeaderIfNeeded returns header with correct value in informational();
    method public void getPostParamsForSigningHeaderIfNeeded returns null if empty fields passed();
    method public void getPostParamsForSigningHeaderIfNeeded returns null if endpoint does not support signing();
    method public void getPostParamsForSigningHeaderIfNeeded returns null if null fields passed();
    method public void getPostParamsForSigningHeaderIfNeeded returns null if signing disabled();
    method public void setUp();
    method public void shouldVerifyEndpoint returns false if endpoint does not support validation and mode enforced();
    method public void shouldVerifyEndpoint returns false if endpoint does not support validation and mode informational();
    method public void shouldVerifyEndpoint returns false if endpoint supports validation but verification mode disabled();
    method public void shouldVerifyEndpoint returns true if endpoint supports validation and verification mode enforced();
    method public void shouldVerifyEndpoint returns true if endpoint supports validation and verification mode informational();
    method public void verifyResponse returns NOT_REQUESTED if verification mode disabled();
    method public void verifyResponse returns error if both body and etag are null();
    method public void verifyResponse returns error if failed to verify intermediate key();
    method public void verifyResponse returns error if forceSigningErros is true();
    method public void verifyResponse returns error if intermediate key verifier returns error for given parameters();
    method public void verifyResponse returns error if request time is null();
    method public void verifyResponse returns error if signature is null();
    method public void verifyResponse returns error if status code not modified and etag is empty();
    method public void verifyResponse returns error if status code success and body is empty();
    method public void verifyResponse returns success for enforced mode if verifier returns success for given parameters();
    method public void verifyResponse returns success if intermediate key verifier returns success for given parameters();
    method public void verifyResponse returns success if intermediate key verifier returns success for not modified ();
    method public void verifyResponse with both payload and etag verifies correctly();
    method public void verifyResponse with encoded url verifies correctly();
    method public void verifyResponse with post fields to sign verifies correctly();
    method public void verifyResponse with real data verifies correctly();
    method public void verifyResponse with slightly different data does not verify correctly();
  }

}

package com.revenuecat.purchases.customercenter {

  @com.revenuecat.purchases.ExperimentalPreviewRevenueCatPurchasesAPI @kotlinx.serialization.Serializable public final class CustomerCenterConfigData {
    ctor public CustomerCenterConfigData(@kotlinx.serialization.Serializable(with=ScreenMapSerializer::class) java.util.Map<com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen.ScreenType,com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen> screens, com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Appearance appearance, com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization localization, com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Support support, optional @kotlinx.serialization.SerialName("last_published_app_version") @kotlinx.serialization.Serializable(with=EmptyStringToNullSerializer::class) String? lastPublishedAppVersion);
    method public java.util.Map<com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen.ScreenType,com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen> component1();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Appearance component2();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization component3();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Support component4();
    method public String? component5();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData copy(java.util.Map<com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen.ScreenType,com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen> screens, com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Appearance appearance, com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization localization, com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Support support, String? lastPublishedAppVersion);
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Appearance getAppearance();
    method public String? getLastPublishedAppVersion();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization getLocalization();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen? getManagementScreen();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen? getNoActiveScreen();
    method public java.util.Map<com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen.ScreenType,com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen> getScreens();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Support getSupport();
    property public final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Appearance appearance;
    property public final String? lastPublishedAppVersion;
    property public final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization localization;
    property public final java.util.Map<com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen.ScreenType,com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen> screens;
    property public final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Support support;
  }

  @kotlinx.serialization.Serializable public static final class CustomerCenterConfigData.Appearance {
    ctor public CustomerCenterConfigData.Appearance(optional com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Appearance.ColorInformation? light, optional com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Appearance.ColorInformation? dark);
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Appearance.ColorInformation? component1();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Appearance.ColorInformation? component2();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Appearance copy(com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Appearance.ColorInformation? light, com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Appearance.ColorInformation? dark);
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Appearance.ColorInformation? getDark();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Appearance.ColorInformation? getLight();
    property public final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Appearance.ColorInformation? dark;
    property public final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Appearance.ColorInformation? light;
  }

  @kotlinx.serialization.Serializable public static final class CustomerCenterConfigData.Appearance.ColorInformation {
    ctor public CustomerCenterConfigData.Appearance.ColorInformation(optional @kotlinx.serialization.SerialName("accent_color") @kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor? accentColor, optional @kotlinx.serialization.SerialName("text_color") @kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor? textColor, optional @kotlinx.serialization.SerialName("background_color") @kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor? backgroundColor, optional @kotlinx.serialization.SerialName("button_text_color") @kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor? buttonTextColor, optional @kotlinx.serialization.SerialName("button_background_color") @kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor? buttonBackgroundColor);
    method public com.revenuecat.purchases.paywalls.PaywallColor? component1();
    method public com.revenuecat.purchases.paywalls.PaywallColor? component2();
    method public com.revenuecat.purchases.paywalls.PaywallColor? component3();
    method public com.revenuecat.purchases.paywalls.PaywallColor? component4();
    method public com.revenuecat.purchases.paywalls.PaywallColor? component5();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Appearance.ColorInformation copy(com.revenuecat.purchases.paywalls.PaywallColor? accentColor, com.revenuecat.purchases.paywalls.PaywallColor? textColor, com.revenuecat.purchases.paywalls.PaywallColor? backgroundColor, com.revenuecat.purchases.paywalls.PaywallColor? buttonTextColor, com.revenuecat.purchases.paywalls.PaywallColor? buttonBackgroundColor);
    method public com.revenuecat.purchases.paywalls.PaywallColor? getAccentColor();
    method public com.revenuecat.purchases.paywalls.PaywallColor? getBackgroundColor();
    method public com.revenuecat.purchases.paywalls.PaywallColor? getButtonBackgroundColor();
    method public com.revenuecat.purchases.paywalls.PaywallColor? getButtonTextColor();
    method public com.revenuecat.purchases.paywalls.PaywallColor? getTextColor();
    property public final com.revenuecat.purchases.paywalls.PaywallColor? accentColor;
    property public final com.revenuecat.purchases.paywalls.PaywallColor? backgroundColor;
    property public final com.revenuecat.purchases.paywalls.PaywallColor? buttonBackgroundColor;
    property public final com.revenuecat.purchases.paywalls.PaywallColor? buttonTextColor;
    property public final com.revenuecat.purchases.paywalls.PaywallColor? textColor;
  }

  @kotlinx.serialization.Serializable public static final class CustomerCenterConfigData.HelpPath {
    ctor public CustomerCenterConfigData.HelpPath(String id, String title, com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathType type, optional @kotlinx.serialization.SerialName("promotional_offer") com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.PromotionalOffer? promotionalOffer, optional @kotlinx.serialization.SerialName("feedback_survey") com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.FeedbackSurvey? feedbackSurvey, optional String? url, optional @kotlinx.serialization.SerialName("open_method") com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.OpenMethod? openMethod);
    method public String component1();
    method public String component2();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathType component3();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.PromotionalOffer? component4();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.FeedbackSurvey? component5();
    method public String? component6();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.OpenMethod? component7();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath copy(String id, String title, com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathType type, com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.PromotionalOffer? promotionalOffer, com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.FeedbackSurvey? feedbackSurvey, String? url, com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.OpenMethod? openMethod);
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.FeedbackSurvey? getFeedbackSurvey();
    method public String getId();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.OpenMethod? getOpenMethod();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.PromotionalOffer? getPromotionalOffer();
    method public String getTitle();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathType getType();
    method public String? getUrl();
    property public final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.FeedbackSurvey? feedbackSurvey;
    property public final String id;
    property public final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.OpenMethod? openMethod;
    property public final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.PromotionalOffer? promotionalOffer;
    property public final String title;
    property public final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathType type;
    property public final String? url;
  }

  @kotlinx.serialization.Serializable public enum CustomerCenterConfigData.HelpPath.OpenMethod {
    method public static com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.OpenMethod valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.OpenMethod[] values();
    enum_constant public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.OpenMethod EXTERNAL;
    enum_constant public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.OpenMethod IN_APP;
  }

  @kotlinx.serialization.Serializable public abstract static sealed class CustomerCenterConfigData.HelpPath.PathDetail {
  }

  @kotlinx.serialization.Serializable public static final class CustomerCenterConfigData.HelpPath.PathDetail.FeedbackSurvey extends com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail {
    ctor public CustomerCenterConfigData.HelpPath.PathDetail.FeedbackSurvey(String title, java.util.List<com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.FeedbackSurvey.Option> options);
    method public String component1();
    method public java.util.List<com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.FeedbackSurvey.Option> component2();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.FeedbackSurvey copy(String title, java.util.List<com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.FeedbackSurvey.Option> options);
    method public java.util.List<com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.FeedbackSurvey.Option> getOptions();
    method public String getTitle();
    property public final java.util.List<com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.FeedbackSurvey.Option> options;
    property public final String title;
  }

  @kotlinx.serialization.Serializable public static final class CustomerCenterConfigData.HelpPath.PathDetail.FeedbackSurvey.Option {
    ctor public CustomerCenterConfigData.HelpPath.PathDetail.FeedbackSurvey.Option(String id, String title, optional @kotlinx.serialization.SerialName("promotional_offer") com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.PromotionalOffer? promotionalOffer);
    method public String component1();
    method public String component2();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.PromotionalOffer? component3();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.FeedbackSurvey.Option copy(String id, String title, com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.PromotionalOffer? promotionalOffer);
    method public String getId();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.PromotionalOffer? getPromotionalOffer();
    method public String getTitle();
    property public final String id;
    property public final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.PromotionalOffer? promotionalOffer;
    property public final String title;
  }

  @kotlinx.serialization.Serializable public static final class CustomerCenterConfigData.HelpPath.PathDetail.PromotionalOffer extends com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail {
    ctor public CustomerCenterConfigData.HelpPath.PathDetail.PromotionalOffer(@kotlinx.serialization.SerialName("android_offer_id") String androidOfferId, boolean eligible, String title, String subtitle, @kotlinx.serialization.SerialName("product_mapping") java.util.Map<java.lang.String,java.lang.String> productMapping);
    method public String component1();
    method public boolean component2();
    method public String component3();
    method public String component4();
    method public java.util.Map<java.lang.String,java.lang.String> component5();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathDetail.PromotionalOffer copy(String androidOfferId, boolean eligible, String title, String subtitle, java.util.Map<java.lang.String,java.lang.String> productMapping);
    method public String getAndroidOfferId();
    method public boolean getEligible();
    method public java.util.Map<java.lang.String,java.lang.String> getProductMapping();
    method public String getSubtitle();
    method public String getTitle();
    property public final String androidOfferId;
    property public final boolean eligible;
    property public final java.util.Map<java.lang.String,java.lang.String> productMapping;
    property public final String subtitle;
    property public final String title;
  }

  @kotlinx.serialization.Serializable public enum CustomerCenterConfigData.HelpPath.PathType {
    method public static com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathType valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathType[] values();
    enum_constant public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathType CANCEL;
    enum_constant public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathType CHANGE_PLANS;
    enum_constant public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathType CUSTOM_URL;
    enum_constant public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathType MISSING_PURCHASE;
    enum_constant public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathType REFUND_REQUEST;
    enum_constant public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathType UNKNOWN;
  }

  @kotlinx.serialization.Serializable public static final class CustomerCenterConfigData.Localization {
    ctor public CustomerCenterConfigData.Localization(String locale, @kotlinx.serialization.SerialName("localized_strings") java.util.Map<java.lang.String,java.lang.String> localizedStrings);
    method public String commonLocalizedString(com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString key);
    method public String component1();
    method public java.util.Map<java.lang.String,java.lang.String> component2();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization copy(String locale, java.util.Map<java.lang.String,java.lang.String> localizedStrings);
    method public String getLocale();
    method public java.util.Map<java.lang.String,java.lang.String> getLocalizedStrings();
    property public final String locale;
    property public final java.util.Map<java.lang.String,java.lang.String> localizedStrings;
  }

  @kotlinx.serialization.Serializable public enum CustomerCenterConfigData.Localization.CommonLocalizedString {
    method public final String getDefaultValue();
    method public static com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString[] values();
    property public final String defaultValue;
    enum_constant @kotlinx.serialization.SerialName("amazon_subscription_manage") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString AMAZON_SUBSCRIPTION_MANAGE;
    enum_constant @kotlinx.serialization.SerialName("apple_subscription_manage") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString APPLE_SUBSCRIPTION_MANAGE;
    enum_constant @kotlinx.serialization.SerialName("billing_cycle") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString BILLING_CYCLE;
    enum_constant @kotlinx.serialization.SerialName("cancel") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString CANCEL;
    enum_constant @kotlinx.serialization.SerialName("check_past_purchases") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString CHECK_PAST_PURCHASES;
    enum_constant @kotlinx.serialization.SerialName("contact_support") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString CONTACT_SUPPORT;
    enum_constant @kotlinx.serialization.SerialName("current_price") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString CURRENT_PRICE;
    enum_constant @kotlinx.serialization.SerialName("default_body") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString DEFAULT_BODY;
    enum_constant @kotlinx.serialization.SerialName("default_subject") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString DEFAULT_SUBJECT;
    enum_constant @kotlinx.serialization.SerialName("discounted_recurring_then_price") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString DISCOUNTED_RECURRING_THEN_PRICE;
    enum_constant @kotlinx.serialization.SerialName("dismiss") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString DISMISS;
    enum_constant @kotlinx.serialization.SerialName("done") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString DONE;
    enum_constant @kotlinx.serialization.SerialName("expired") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString EXPIRED;
    enum_constant @kotlinx.serialization.SerialName("expires") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString EXPIRES;
    enum_constant @kotlinx.serialization.SerialName("free") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString FREE;
    enum_constant @kotlinx.serialization.SerialName("free_trial_discounted_then_price") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString FREE_TRIAL_DISCOUNTED_THEN_PRICE;
    enum_constant @kotlinx.serialization.SerialName("free_trial_single_payment_then_price") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString FREE_TRIAL_SINGLE_PAYMENT_THEN_PRICE;
    enum_constant @kotlinx.serialization.SerialName("free_trial_then_price") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString FREE_TRIAL_THEN_PRICE;
    enum_constant @kotlinx.serialization.SerialName("going_to_check_purchases") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString GOING_TO_CHECK_PURCHASES;
    enum_constant @kotlinx.serialization.SerialName("google_subscription_manage") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString GOOGLE_SUBSCRIPTION_MANAGE;
    enum_constant @kotlinx.serialization.SerialName("manage_subscription") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString MANAGE_SUBSCRIPTION;
    enum_constant @kotlinx.serialization.SerialName("never") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString NEVER;
    enum_constant @kotlinx.serialization.SerialName("next_billing_date") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString NEXT_BILLING_DATE;
    enum_constant @kotlinx.serialization.SerialName("no_subscriptions_found") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString NO_SUBSCRIPTIONS_FOUND;
    enum_constant @kotlinx.serialization.SerialName("no_thanks") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString NO_THANKS;
    enum_constant @kotlinx.serialization.SerialName("platform_mismatch") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString PLATFORM_MISMATCH;
    enum_constant @kotlinx.serialization.SerialName("please_contact_support") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString PLEASE_CONTACT_SUPPORT;
    enum_constant @kotlinx.serialization.SerialName("purchases_not_found") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString PURCHASES_NOT_FOUND;
    enum_constant @kotlinx.serialization.SerialName("purchases_not_recovered") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString PURCHASES_NOT_RECOVERED;
    enum_constant @kotlinx.serialization.SerialName("purchases_recovered") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString PURCHASES_RECOVERED;
    enum_constant @kotlinx.serialization.SerialName("purchases_recovered_explanation") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString PURCHASES_RECOVERED_EXPLANATION;
    enum_constant @kotlinx.serialization.SerialName("purchases_restoring") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString PURCHASES_RESTORING;
    enum_constant @kotlinx.serialization.SerialName("refund_canceled") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString REFUND_CANCELED;
    enum_constant @kotlinx.serialization.SerialName("refund_error_generic") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString REFUND_ERROR_GENERIC;
    enum_constant @kotlinx.serialization.SerialName("refund_granted") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString REFUND_GRANTED;
    enum_constant @kotlinx.serialization.SerialName("refund_status") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString REFUND_STATUS;
    enum_constant @kotlinx.serialization.SerialName("restore_purchases") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString RESTORE_PURCHASES;
    enum_constant @kotlinx.serialization.SerialName("single_payment_then_price") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString SINGLE_PAYMENT_THEN_PRICE;
    enum_constant @kotlinx.serialization.SerialName("sub_earliest_expiration") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString SUB_EARLIEST_EXPIRATION;
    enum_constant @kotlinx.serialization.SerialName("sub_earliest_renewal") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString SUB_EARLIEST_RENEWAL;
    enum_constant @kotlinx.serialization.SerialName("sub_expired") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString SUB_EXPIRED;
    enum_constant @kotlinx.serialization.SerialName("try_check_restore") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString TRY_CHECK_RESTORE;
    enum_constant @kotlinx.serialization.SerialName("update_warning_description") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString UPDATE_WARNING_DESCRIPTION;
    enum_constant @kotlinx.serialization.SerialName("update_warning_ignore") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString UPDATE_WARNING_IGNORE;
    enum_constant @kotlinx.serialization.SerialName("update_warning_title") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString UPDATE_WARNING_TITLE;
    enum_constant @kotlinx.serialization.SerialName("update_warning_update") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString UPDATE_WARNING_UPDATE;
    enum_constant @kotlinx.serialization.SerialName("web_subscription_manage") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString WEB_SUBSCRIPTION_MANAGE;
    enum_constant @kotlinx.serialization.SerialName("you_have_lifetime") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString YOU_HAVE_LIFETIME;
    enum_constant @kotlinx.serialization.SerialName("you_have_promo") public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.CommonLocalizedString YOU_HAVE_PROMO;
  }

  public enum CustomerCenterConfigData.Localization.VariableName {
    method public final String! getIdentifier();
    method public static com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.VariableName valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.VariableName[] values();
    property public final String! identifier;
    enum_constant public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.VariableName PRICE;
    enum_constant public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.VariableName SUB_OFFER_DURATION;
    enum_constant public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.VariableName SUB_OFFER_DURATION_2;
    enum_constant public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.VariableName SUB_OFFER_PRICE;
    enum_constant public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.VariableName SUB_OFFER_PRICE_2;
    field public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.VariableName.Companion Companion;
  }

  public static final class CustomerCenterConfigData.Localization.VariableName.Companion {
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization.VariableName? valueOfIdentifier(String identifier);
  }

  @kotlinx.serialization.Serializable public static final class CustomerCenterConfigData.Screen {
    ctor public CustomerCenterConfigData.Screen(com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen.ScreenType type, String title, optional @kotlinx.serialization.Serializable(with=EmptyStringToNullSerializer::class) String? subtitle, @kotlinx.serialization.Serializable(with=HelpPathsSerializer::class) java.util.List<com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath> paths);
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen.ScreenType component1();
    method public String component2();
    method public String? component3();
    method public java.util.List<com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath> component4();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen copy(com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen.ScreenType type, String title, String? subtitle, java.util.List<com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath> paths);
    method public java.util.List<com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath> getPaths();
    method public String? getSubtitle();
    method public java.util.List<com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath> getSupportedPaths();
    method public String getTitle();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen.ScreenType getType();
    property public final java.util.List<com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath> paths;
    property public final String? subtitle;
    property public final java.util.List<com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath> supportedPaths;
    property public final String title;
    property public final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen.ScreenType type;
  }

  @kotlinx.serialization.Serializable public enum CustomerCenterConfigData.Screen.ScreenType {
    method public static com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen.ScreenType valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen.ScreenType[] values();
    enum_constant public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen.ScreenType MANAGEMENT;
    enum_constant public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen.ScreenType NO_ACTIVE;
    enum_constant public static final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Screen.ScreenType UNKNOWN;
  }

  @kotlinx.serialization.Serializable public static final class CustomerCenterConfigData.Support {
    ctor public CustomerCenterConfigData.Support(optional @kotlinx.serialization.Serializable(with=EmptyStringToNullSerializer::class) String? email, optional @kotlinx.serialization.SerialName("should_warn_customer_to_update") Boolean? shouldWarnCustomerToUpdate);
    method public String? component1();
    method public Boolean? component2();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Support copy(String? email, Boolean? shouldWarnCustomerToUpdate);
    method public String? getEmail();
    method public Boolean? getShouldWarnCustomerToUpdate();
    property public final String? email;
    property public final Boolean? shouldWarnCustomerToUpdate;
  }

  public interface CustomerCenterListener {
    method public default void onFeedbackSurveyCompleted(String feedbackSurveyOptionId);
    method public default void onManagementOptionSelected(com.revenuecat.purchases.customercenter.CustomerCenterManagementOption action);
    method public default void onRestoreCompleted(com.revenuecat.purchases.CustomerInfo customerInfo);
    method public default void onRestoreFailed(com.revenuecat.purchases.PurchasesError error);
    method public default void onRestoreStarted();
    method public default void onShowingManageSubscriptions();
  }

  public interface CustomerCenterManagementOption {
  }

  public static final class CustomerCenterManagementOption.Cancel implements com.revenuecat.purchases.customercenter.CustomerCenterManagementOption {
    field public static final com.revenuecat.purchases.customercenter.CustomerCenterManagementOption.Cancel INSTANCE;
  }

  public static final class CustomerCenterManagementOption.CustomUrl implements com.revenuecat.purchases.customercenter.CustomerCenterManagementOption {
    ctor public CustomerCenterManagementOption.CustomUrl(android.net.Uri uri);
    method public android.net.Uri component1();
    method public com.revenuecat.purchases.customercenter.CustomerCenterManagementOption.CustomUrl copy(android.net.Uri uri);
    method public android.net.Uri getUri();
    property public final android.net.Uri uri;
  }

  public static final class CustomerCenterManagementOption.MissingPurchase implements com.revenuecat.purchases.customercenter.CustomerCenterManagementOption {
    field public static final com.revenuecat.purchases.customercenter.CustomerCenterManagementOption.MissingPurchase INSTANCE;
  }

}

package com.revenuecat.purchases.customercenter.events {

  @com.revenuecat.purchases.ExperimentalPreviewRevenueCatPurchasesAPI @kotlinx.serialization.Serializable public enum CustomerCenterDisplayMode {
    method public static com.revenuecat.purchases.customercenter.events.CustomerCenterDisplayMode valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.customercenter.events.CustomerCenterDisplayMode[] values();
    enum_constant @kotlinx.serialization.SerialName("full_screen") public static final com.revenuecat.purchases.customercenter.events.CustomerCenterDisplayMode FULL_SCREEN;
  }

  @com.revenuecat.purchases.ExperimentalPreviewRevenueCatPurchasesAPI @kotlinx.serialization.Serializable public enum CustomerCenterEventType {
    method public static com.revenuecat.purchases.customercenter.events.CustomerCenterEventType valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.customercenter.events.CustomerCenterEventType[] values();
    enum_constant @kotlinx.serialization.SerialName("customer_center_impression") public static final com.revenuecat.purchases.customercenter.events.CustomerCenterEventType IMPRESSION;
    enum_constant @kotlinx.serialization.SerialName("customer_center_survey_option_chosen") public static final com.revenuecat.purchases.customercenter.events.CustomerCenterEventType SURVEY_OPTION_CHOSEN;
  }

  @com.revenuecat.purchases.ExperimentalPreviewRevenueCatPurchasesAPI @dev.drewhamilton.poko.Poko public final class CustomerCenterImpressionEvent implements com.revenuecat.purchases.common.events.FeatureEvent {
    ctor public CustomerCenterImpressionEvent(optional com.revenuecat.purchases.customercenter.events.CustomerCenterImpressionEvent.CreationData creationData, com.revenuecat.purchases.customercenter.events.CustomerCenterImpressionEvent.Data data);
    method public com.revenuecat.purchases.customercenter.events.CustomerCenterImpressionEvent.CreationData getCreationData();
    method public com.revenuecat.purchases.customercenter.events.CustomerCenterImpressionEvent.Data getData();
    property public final com.revenuecat.purchases.customercenter.events.CustomerCenterImpressionEvent.CreationData creationData;
    property public final com.revenuecat.purchases.customercenter.events.CustomerCenterImpressionEvent.Data data;
  }

  @dev.drewhamilton.poko.Poko public static final class CustomerCenterImpressionEvent.CreationData {
    ctor public CustomerCenterImpressionEvent.CreationData(optional java.util.UUID id, optional java.util.Date date);
    method public java.util.Date getDate();
    method public java.util.UUID getId();
    property public final java.util.Date date;
    property public final java.util.UUID id;
  }

  @dev.drewhamilton.poko.Poko public static final class CustomerCenterImpressionEvent.Data {
    ctor public CustomerCenterImpressionEvent.Data(java.util.Date timestamp, boolean darkMode, String locale, optional int version, optional int revisionID, optional com.revenuecat.purchases.customercenter.events.CustomerCenterDisplayMode displayMode);
    method public boolean getDarkMode();
    method public com.revenuecat.purchases.customercenter.events.CustomerCenterDisplayMode getDisplayMode();
    method public String getLocale();
    method public int getRevisionID();
    method public java.util.Date getTimestamp();
    method public com.revenuecat.purchases.customercenter.events.CustomerCenterEventType getType();
    method public int getVersion();
    property public final boolean darkMode;
    property public final com.revenuecat.purchases.customercenter.events.CustomerCenterDisplayMode displayMode;
    property public final String locale;
    property public final int revisionID;
    property public final java.util.Date timestamp;
    property public final com.revenuecat.purchases.customercenter.events.CustomerCenterEventType type;
    property public final int version;
  }

  @com.revenuecat.purchases.ExperimentalPreviewRevenueCatPurchasesAPI @dev.drewhamilton.poko.Poko public final class CustomerCenterSurveyOptionChosenEvent implements com.revenuecat.purchases.common.events.FeatureEvent {
    ctor public CustomerCenterSurveyOptionChosenEvent(optional com.revenuecat.purchases.customercenter.events.CustomerCenterSurveyOptionChosenEvent.CreationData creationData, com.revenuecat.purchases.customercenter.events.CustomerCenterSurveyOptionChosenEvent.Data data);
    method public com.revenuecat.purchases.customercenter.events.CustomerCenterSurveyOptionChosenEvent.CreationData getCreationData();
    method public com.revenuecat.purchases.customercenter.events.CustomerCenterSurveyOptionChosenEvent.Data getData();
    property public final com.revenuecat.purchases.customercenter.events.CustomerCenterSurveyOptionChosenEvent.CreationData creationData;
    property public final com.revenuecat.purchases.customercenter.events.CustomerCenterSurveyOptionChosenEvent.Data data;
    field public static final com.revenuecat.purchases.customercenter.events.CustomerCenterSurveyOptionChosenEvent.Companion Companion;
  }

  public static final class CustomerCenterSurveyOptionChosenEvent.Companion {
  }

  @com.revenuecat.purchases.ExperimentalPreviewRevenueCatPurchasesAPI @dev.drewhamilton.poko.Poko public static final class CustomerCenterSurveyOptionChosenEvent.CreationData {
    ctor public CustomerCenterSurveyOptionChosenEvent.CreationData(optional java.util.UUID id, optional java.util.Date date);
    method public java.util.Date getDate();
    method public java.util.UUID getId();
    property public final java.util.Date date;
    property public final java.util.UUID id;
  }

  @com.revenuecat.purchases.ExperimentalPreviewRevenueCatPurchasesAPI @dev.drewhamilton.poko.Poko public static final class CustomerCenterSurveyOptionChosenEvent.Data {
    ctor public CustomerCenterSurveyOptionChosenEvent.Data(java.util.Date timestamp, boolean darkMode, String locale, optional int version, optional int revisionID, optional com.revenuecat.purchases.customercenter.events.CustomerCenterDisplayMode displayMode, com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathType path, String? url, String surveyOptionID, optional String? additionalContext);
    method public String? getAdditionalContext();
    method public boolean getDarkMode();
    method public com.revenuecat.purchases.customercenter.events.CustomerCenterDisplayMode getDisplayMode();
    method public String getLocale();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathType getPath();
    method public int getRevisionID();
    method public String getSurveyOptionID();
    method public java.util.Date getTimestamp();
    method public com.revenuecat.purchases.customercenter.events.CustomerCenterEventType getType();
    method public String? getUrl();
    method public int getVersion();
    property public final String? additionalContext;
    property public final boolean darkMode;
    property public final com.revenuecat.purchases.customercenter.events.CustomerCenterDisplayMode displayMode;
    property public final String locale;
    property public final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.HelpPath.PathType path;
    property public final int revisionID;
    property public final String surveyOptionID;
    property public final java.util.Date timestamp;
    property public final com.revenuecat.purchases.customercenter.events.CustomerCenterEventType type;
    property public final String? url;
    property public final int version;
  }

}

package com.revenuecat.purchases.data {

  public final class LogInResult {
    ctor public LogInResult(com.revenuecat.purchases.CustomerInfo customerInfo, boolean created);
    method public com.revenuecat.purchases.CustomerInfo component1();
    method public boolean component2();
    method public com.revenuecat.purchases.data.LogInResult copy(com.revenuecat.purchases.CustomerInfo customerInfo, boolean created);
    method public boolean getCreated();
    method public com.revenuecat.purchases.CustomerInfo getCustomerInfo();
    property public final boolean created;
    property public final com.revenuecat.purchases.CustomerInfo customerInfo;
  }

}

package com.revenuecat.purchases.deeplinks {

  public final class WebPurchaseRedemptionHelperTest {
    ctor public WebPurchaseRedemptionHelperTest();
    method public void handleRedeemWebPurchase posts token and notifies listener on success();
    method public void handleRedeemWebPurchase posts token and resets offline entitlements cache on success();
    method public void handleRedeemWebPurchase posts token and returns belongs to other user();
    method public void handleRedeemWebPurchase posts token and returns error();
    method public void handleRedeemWebPurchase posts token and returns invalid token();
    method public void handleRedeemWebPurchase posts token and returns success();
    method public void handleRedeemWebPurchase posts token and returns token expired();
    method public void setUp();
  }

}

package com.revenuecat.purchases.factories {

  public final class StoreProductFactory {
    method public com.revenuecat.purchases.models.StoreProduct createGoogleStoreProduct(optional String productId, optional String? basePlanId, optional com.revenuecat.purchases.ProductType type, optional com.revenuecat.purchases.models.Price price, optional String name, optional String title, optional String description, optional com.revenuecat.purchases.models.Period? period, optional int defaultOptionIndex, optional com.android.billingclient.api.ProductDetails productDetails, optional java.util.List<? extends com.revenuecat.purchases.models.SubscriptionOption>? subscriptionOptionsList);
    method public com.revenuecat.purchases.models.GoogleSubscriptionOption createGoogleSubscriptionOption(optional String productId, optional String basePlanId, optional String? offerId, optional java.util.List<com.revenuecat.purchases.models.PricingPhase> pricingPhases, optional java.util.List<java.lang.String> tags, optional com.android.billingclient.api.ProductDetails productDetails, optional String offerToken);
    method public com.revenuecat.purchases.models.Period createPeriod(optional int value, optional com.revenuecat.purchases.models.Period.Unit unit, optional String iso8601);
    method public com.revenuecat.purchases.models.Price createPrice(optional String price, optional long priceAmountMicros, optional String priceCurrencyCode);
    method public com.revenuecat.purchases.models.PricingPhase createPricingPhase(optional com.revenuecat.purchases.models.Period period, optional com.revenuecat.purchases.models.RecurrenceMode recurrenceMode, optional int numberOfPeriods, optional com.revenuecat.purchases.models.Price price);
    field public static final com.revenuecat.purchases.factories.StoreProductFactory INSTANCE;
  }

  public final class StoreTransactionFactory {
    method public com.revenuecat.purchases.models.StoreTransaction createStoreTransaction(optional String? orderId, optional java.util.List<java.lang.String> skus, optional com.revenuecat.purchases.ProductType type, optional long purchaseTime, optional String purchaseToken, optional com.revenuecat.purchases.models.PurchaseState purchaseState, optional Boolean? isAutoRenewing, optional String? signature, optional org.json.JSONObject originalJson, optional String? presentedOfferingIdentifier, optional String? storeUserID, optional com.revenuecat.purchases.models.PurchaseType purchaseType, optional String? marketplace, optional String? subscriptionOptionId, optional com.revenuecat.purchases.ReplacementMode? replacementMode);
    field public static final com.revenuecat.purchases.factories.StoreTransactionFactory INSTANCE;
  }

}

package com.revenuecat.purchases.google {

  public final class BillingResponseCodeTest {
    ctor public BillingResponseCodeTest();
    method public void All BillingResponseCodes are handled when converting to PurchasesError();
    method public void BillingResponseCode covers all cases();
    method public void BillingResponseCodeNames are correctly generated();
    method public void There are no new BillingResponseCodes();
  }

  public final class BillingWrapperTest {
    ctor public BillingWrapperTest();
    method public void BILLING_UNAVAILABLE errors are forwarded to billing client calls();
    method public void Can disable pending prepaid subs();
    method public void If starting connection throws an IllegalStateException, error is forwarded();
    method public void Presented offering is properly forwarded();
    method public void When building the BillingClient enabledPendingPurchases for OTP and prepaid are called();
    method public void calling billing close() sets purchasesUpdatedListener to null and disconnects from BillingClient();
    method public void calling close before purchase completes doesn't crash();
    method public void calling close before setup finishes doesn't crash();
    method public void calling end connection before client is ready ends connection();
    method public void callsBuildOnTheFactory();
    method public void callsLaunchFlowFromMainThread();
    method public void can make a purchase();
    method public void canBeCreated();
    method public void canDeferMultipleCallsUntilConnected();
    method public void closingBillingClientAfterEndingConnection();
    method public void connectsToPlayBilling();
    method public void defersBillingFlowIfNotConnected();
    method public void defersCallUntilConnected();
    method public void getting all purchases gets both subs and inapps();
    method public void if billing setup returns code that doesnt merit retry, will not try to reconnect();
    method public void if billing setup returns recoverable error code, will try to reconnect with exponential backoff();
    method public void installment plan details are properly forwarded();
    method public void make a purchase tracks start purchase event();
    method public void making a deferred purchase uses previous product id cached context();
    method public void makingARequestTriggersAConnectionAttempt();
    method public void newBillingClientIsCreatedWhenSettingListener();
    method public void normalizing Google purchase returns correct product ID and null store user ID();
    method public void obfuscatedAccountId is not set for transfer purchases();
    method public void obfuscatedAccountId is set for non-transfer purchases();
    method public void on successfully connected billing client, listener is called();
    method public void onBillingServiceDisconnected tracks diagnostics call with correct parameters();
    method public void onBillingSetupFinished tracks diagnostics call with correct parameters();
    method public void properly sets ProductDetailsParams for inapp product();
    method public void properly sets ProductDetailsParams for subscription product();
    method public void properly sets billingFlowParams for inapp purchase();
    method public void properly sets billingFlowParams for subscription purchase();
    method public void purchase fails if store product is not GoogleStoreProduct();
    method public void purchaseUpdateFailedCalledIfNotOK();
    method public void purchasesUpdatedCalls call the error callback if result is ok but with a null purchase();
    method public void purchasesUpdatedCallsAreForwarded();
    method public void querySkuDetailsAsync tracks diagnostics call with correct parameters();
    method public void querySkuDetailsAsync tracks diagnostics call with correct parameters on error();
    method public void setup();
    method public void showing inapp messages calls show inapp messages correctly();
    method public void showing inapp messages does nothing and logs if no types passed();
    method public void showing inapp messages handles inapp messages listener response correctly when no messages();
    method public void showing inapp messages handles inapp messages listener response correctly when subscription updated();
    method public void showing inapp messages triggers connection if not connected();
    method public void skips setting on BillingFlowPrams when replacementmode or personalized price null for subscription purchase();
    method public void startConnectionOnMainThread tracks diagnostics call with correct parameters();
    method public void subscription purchase fails if subscription option is not GoogleSubscriptionOption();
    method public void subscriptionOptionId is properly forwarded();
    method public void tearDown();
    method public void trackProductDetailsNotSupported is called when receiving a FEATURE_NOT_SUPPORTED error from isFeatureSupported after setup();
    method public void tracks purchase update received event();
    method public void whenExecutingRequestAndThereIsNoListenerDoNotTryToStartConnection();
    method public void whenSettingListenerStartConnection();
    field public static final long timestamp0 = 1676379370000L; // 0x1864fff3210L
    field public static final long timestamp123 = 1676379370123L; // 0x1864fff328bL
  }

  public final class ParcelableTests {
    ctor public ParcelableTests();
    method public void Period is Parcelable();
    method public void Price is Parcelable();
    method public void PricingPhase is Parcelable();
  }

  public final class QueryProductDetailsParamsExtensionsKt {
    method public static String getProductId(com.android.billingclient.api.QueryProductDetailsParams.Product);
    method public static java.util.List<com.android.billingclient.api.QueryProductDetailsParams.Product> getProductList(com.android.billingclient.api.QueryProductDetailsParams);
    method public static String getProductType(com.android.billingclient.api.QueryProductDetailsParams);
    method public static String getProductType(com.android.billingclient.api.QueryProductDetailsParams.Product);
  }

  public final class StoreProductConversionsTest {
    ctor public StoreProductConversionsTest();
    method public void list of INAPP ProductDetails maps to StoreProducts();
    method public void list of INAPP and SUBS ProductDetails maps to StoreProducts();
    method public void list of SUB ProductDetails allows recurring and prepaid with same billing cycle();
    method public void list of SUBS ProductDetails maps to StoreProducts();
    method public void list of SUBS ProductDetails with multiple subscription offers maps to multiple StoreProducts();
    method public void list of invalid ProductDetails with no price maps to empty list();
  }

  public final class StoreProductTest {
    ctor public StoreProductTest();
    method public void GoogleStoreProduct can access computed properties correctly();
    method public void Two StoreProducts with the same properties are equal();
    method public void Two StoreProducts with the same properties have the same hashcode();
    method public void copyWithOfferingId copies product with offeringId applied to itself and all subscriptionOptions();
    method public void formattedPricePerMonth is correct for SUBS annual product with free trial();
    method public void formattedPricePerMonth is correct for SUBS monthly product with free trial();
    method public void formattedPricePerMonth is null for INAPP product();
  }

  public final class SubscriptionOptionTest {
    ctor public SubscriptionOptionTest();
    method public void SubscriptionOption can find free phase();
    method public void SubscriptionOption can find intro phase();
    method public void SubscriptionOption can find recurring phase with INFINITE_RECURRING();
    method public void SubscriptionOption can find recurring phase with NON_RECURRING();
  }

}

package com.revenuecat.purchases.google.attribution {

  public final class GoogleDeviceIdentifiersFetcherTests {
    ctor public GoogleDeviceIdentifiersFetcherTests();
    method public void GooglePlayServicesNotAvailableException when calling getDeviceIdentifiers();
    method public void GooglePlayServicesRepairableException when calling getDeviceIdentifiers();
    method public void IOException when getting device identifiers();
    method public void NullPointerException when getting device identifiers();
    method public void TimeoutException when getting device identifiers();
    method public void getDeviceIdentifiers();
    method public void getDeviceIdentifiers when ad tracking is limited();
    method public void getDeviceIdentifiers when returns all zeros();
    method public void setup();
    method public void tearDown();
  }

}

package com.revenuecat.purchases.identity {

  public final class IdentityManagerTests {
    ctor public IdentityManagerTests();
    method public void logOut clears backend caches();
    method public void logOut clears old caches();
    method public void logOut creates random ID and caches it();
    method public void logOut resets offline customer info cache();
    method public void logOut returns an error if the current user is anonymous();
    method public void login caches customerInfo and appUserID for new user on successful completion();
    method public void login clears caches for old appUserID on successful completion();
    method public void login copies unsynced attributes from old user to new one if old is anonymous on successful completion();
    method public void login does not copy unsynced attributes from old user to new one if old is not anonymous();
    method public void login does not reset offline customer info cache on error();
    method public void login fails with error if the appUserID is blank();
    method public void login fails with error if the appUserID is empty();
    method public void login passes backend errors();
    method public void login passes received created and customerInfo from backend();
    method public void login resets offline customer info cache on success();
    method public void login synchronizes subscriber attributes();
    method public void logout synchronizes subscriber attributes();
    method public void setup();
    method public void switching users clears all caches();
    method public void switching users saves the new user();
    method public void testAnonymousIDsMatchesFormat();
    method public void testConfigureCleansUpOldAttributionDataCacheForAnonymousUsers();
    method public void testConfigureCleansUpOldAttributionDataCacheForNonAnonymousUsers();
    method public void testConfigureSavesTheIDInTheCache();
    method public void testConfigureWithAnonymousUserIDGeneratesAnAppUserID();
    method public void testConfigureWithAnonymousUserSavesTheIDInTheCache();
    method public void testConfigureWithEmptyUserIDGeneratesAnAnonymousAppUserID();
    method public void testConfiguringWithIdentifiedDoesntUseCaches();
    method public void testMigrationFromRandomIDConfiguringAnonymously();
    method public void testMigrationFromRandomIDConfiguringWithUser();
    method public void we don't invalidate customer info and etag caches if no customer info cached();
    method public void we don't invalidate customer info and etag caches if verification is disabled and cached customer info is not requested();
    method public void we don't invalidate customer info and etag caches if verification is enabled and cached customer info is success();
    method public void we invalidate etag caches if verification is enforced and cached customer info is not requested();
    method public void we invalidate etag caches if verification is informational and cached customer info is not requested();
    method public void when configuring with a specific user, cache is cleaned up();
    method public void when configuring with a specific user, subscriber attributes are cleaned up();
    method public void when configuring with an anonymous user, cache is cleaned up();
    method public void when configuring with an anonymous user, subscriber attributes are cleaned up();
  }

}

package com.revenuecat.purchases.interfaces {

  @java.lang.FunctionalInterface public interface Callback<T> {
    method public void onReceived(T!);
  }

  public interface GetAmazonLWAConsentStatusCallback {
    method public void onError(com.revenuecat.purchases.PurchasesError error);
    method public void onSuccess(com.revenuecat.purchases.AmazonLWAConsentStatus consentStatus);
  }

  public interface GetStoreProductsCallback {
    method public void onError(com.revenuecat.purchases.PurchasesError error);
    method @kotlin.jvm.JvmSuppressWildcards public void onReceived(java.util.List<com.revenuecat.purchases.models.StoreProduct> storeProducts);
  }

  public interface GetStorefrontCallback {
    method public void onError(com.revenuecat.purchases.PurchasesError error);
    method public void onReceived(String storefrontCountryCode);
  }

  public interface LogInCallback {
    method public void onError(com.revenuecat.purchases.PurchasesError error);
    method public void onReceived(com.revenuecat.purchases.CustomerInfo customerInfo, boolean created);
  }

  @Deprecated public interface ProductChangeCallback extends com.revenuecat.purchases.interfaces.PurchaseErrorCallback {
    method @Deprecated public void onCompleted(com.revenuecat.purchases.models.StoreTransaction? storeTransaction, com.revenuecat.purchases.CustomerInfo customerInfo);
  }

  public interface PurchaseCallback extends com.revenuecat.purchases.interfaces.PurchaseErrorCallback {
    method public void onCompleted(com.revenuecat.purchases.models.StoreTransaction storeTransaction, com.revenuecat.purchases.CustomerInfo customerInfo);
  }

  public interface PurchaseErrorCallback {
    method public void onError(com.revenuecat.purchases.PurchasesError error, boolean userCancelled);
  }

  public interface ReceiveCustomerInfoCallback {
    method public void onError(com.revenuecat.purchases.PurchasesError error);
    method public void onReceived(com.revenuecat.purchases.CustomerInfo customerInfo);
  }

  public interface ReceiveOfferingsCallback {
    method public void onError(com.revenuecat.purchases.PurchasesError error);
    method public void onReceived(com.revenuecat.purchases.Offerings offerings);
  }

  public fun interface RedeemWebPurchaseListener {
    method public void handleResult(com.revenuecat.purchases.interfaces.RedeemWebPurchaseListener.Result result);
  }

  public abstract static sealed class RedeemWebPurchaseListener.Result {
    method public final boolean isSuccess();
    property public final boolean isSuccess;
  }

  public static final class RedeemWebPurchaseListener.Result.Error extends com.revenuecat.purchases.interfaces.RedeemWebPurchaseListener.Result {
    ctor public RedeemWebPurchaseListener.Result.Error(com.revenuecat.purchases.PurchasesError error);
    method public com.revenuecat.purchases.PurchasesError component1();
    method public com.revenuecat.purchases.interfaces.RedeemWebPurchaseListener.Result.Error copy(com.revenuecat.purchases.PurchasesError error);
    method public com.revenuecat.purchases.PurchasesError getError();
    property public final com.revenuecat.purchases.PurchasesError error;
  }

  public static final class RedeemWebPurchaseListener.Result.Expired extends com.revenuecat.purchases.interfaces.RedeemWebPurchaseListener.Result {
    ctor public RedeemWebPurchaseListener.Result.Expired(String obfuscatedEmail);
    method public String component1();
    method public com.revenuecat.purchases.interfaces.RedeemWebPurchaseListener.Result.Expired copy(String obfuscatedEmail);
    method public String getObfuscatedEmail();
    property public final String obfuscatedEmail;
  }

  public static final class RedeemWebPurchaseListener.Result.InvalidToken extends com.revenuecat.purchases.interfaces.RedeemWebPurchaseListener.Result {
    field public static final com.revenuecat.purchases.interfaces.RedeemWebPurchaseListener.Result.InvalidToken INSTANCE;
  }

  public static final class RedeemWebPurchaseListener.Result.PurchaseBelongsToOtherUser extends com.revenuecat.purchases.interfaces.RedeemWebPurchaseListener.Result {
    field public static final com.revenuecat.purchases.interfaces.RedeemWebPurchaseListener.Result.PurchaseBelongsToOtherUser INSTANCE;
  }

  public static final class RedeemWebPurchaseListener.Result.Success extends com.revenuecat.purchases.interfaces.RedeemWebPurchaseListener.Result {
    ctor public RedeemWebPurchaseListener.Result.Success(com.revenuecat.purchases.CustomerInfo customerInfo);
    method public com.revenuecat.purchases.CustomerInfo component1();
    method public com.revenuecat.purchases.interfaces.RedeemWebPurchaseListener.Result.Success copy(com.revenuecat.purchases.CustomerInfo customerInfo);
    method public com.revenuecat.purchases.CustomerInfo getCustomerInfo();
    property public final com.revenuecat.purchases.CustomerInfo customerInfo;
  }

  public interface StorefrontProvider {
    method public String? getStorefront();
  }

  public interface SyncAttributesAndOfferingsCallback {
    method public void onError(com.revenuecat.purchases.PurchasesError error);
    method public void onSuccess(com.revenuecat.purchases.Offerings offerings);
  }

  public interface SyncPurchasesCallback {
    method public void onError(com.revenuecat.purchases.PurchasesError error);
    method public void onSuccess(com.revenuecat.purchases.CustomerInfo customerInfo);
  }

  public interface UpdatedCustomerInfoListener {
    method public void onReceived(com.revenuecat.purchases.CustomerInfo);
  }

}

package com.revenuecat.purchases.models {

  public enum BillingFeature {
    method public final String! getPlayBillingClientName();
    method public static com.revenuecat.purchases.models.BillingFeature valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.models.BillingFeature[] values();
    property public final String! playBillingClientName;
    enum_constant public static final com.revenuecat.purchases.models.BillingFeature PRICE_CHANGE_CONFIRMATION;
    enum_constant public static final com.revenuecat.purchases.models.BillingFeature SUBSCRIPTIONS;
    enum_constant public static final com.revenuecat.purchases.models.BillingFeature SUBSCRIPTIONS_UPDATE;
  }

  public final class GoogleInstallmentsInfo implements com.revenuecat.purchases.models.InstallmentsInfo {
    ctor public GoogleInstallmentsInfo(int commitmentPaymentsCount, int renewalCommitmentPaymentsCount);
    method public int component1();
    method public int component2();
    method public com.revenuecat.purchases.models.GoogleInstallmentsInfo copy(int commitmentPaymentsCount, int renewalCommitmentPaymentsCount);
    method public int getCommitmentPaymentsCount();
    method public int getRenewalCommitmentPaymentsCount();
    property public int commitmentPaymentsCount;
    property public int renewalCommitmentPaymentsCount;
  }

  public abstract sealed class GooglePurchasingData implements com.revenuecat.purchases.models.PurchasingData {
    method public com.revenuecat.purchases.ProductType getProductType();
    property public com.revenuecat.purchases.ProductType productType;
  }

  public static final class GooglePurchasingData.InAppProduct extends com.revenuecat.purchases.models.GooglePurchasingData {
    ctor public GooglePurchasingData.InAppProduct(String productId, com.android.billingclient.api.ProductDetails productDetails);
    method public String component1();
    method public com.android.billingclient.api.ProductDetails component2();
    method public com.revenuecat.purchases.models.GooglePurchasingData.InAppProduct copy(String productId, com.android.billingclient.api.ProductDetails productDetails);
    method public com.android.billingclient.api.ProductDetails getProductDetails();
    method public String getProductId();
    property public final com.android.billingclient.api.ProductDetails productDetails;
    property public String productId;
  }

  public static final class GooglePurchasingData.Subscription extends com.revenuecat.purchases.models.GooglePurchasingData {
    ctor public GooglePurchasingData.Subscription(String productId, String optionId, com.android.billingclient.api.ProductDetails productDetails, String token);
    method public String component1();
    method public String component2();
    method public com.android.billingclient.api.ProductDetails component3();
    method public String component4();
    method public com.revenuecat.purchases.models.GooglePurchasingData.Subscription copy(String productId, String optionId, com.android.billingclient.api.ProductDetails productDetails, String token);
    method public String getOptionId();
    method public com.android.billingclient.api.ProductDetails getProductDetails();
    method public String getProductId();
    method public String getToken();
    property public final String optionId;
    property public final com.android.billingclient.api.ProductDetails productDetails;
    property public String productId;
    property public final String token;
  }

  public enum GoogleReplacementMode implements com.revenuecat.purchases.ReplacementMode {
    method public int describeContents();
    method public final int getPlayBillingClientMode();
    method public static com.revenuecat.purchases.models.GoogleReplacementMode valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.models.GoogleReplacementMode[] values();
    method public void writeToParcel(android.os.Parcel out, int flags);
    property public final int playBillingClientMode;
    enum_constant public static final com.revenuecat.purchases.models.GoogleReplacementMode CHARGE_FULL_PRICE;
    enum_constant public static final com.revenuecat.purchases.models.GoogleReplacementMode CHARGE_PRORATED_PRICE;
    enum_constant public static final com.revenuecat.purchases.models.GoogleReplacementMode DEFERRED;
    enum_constant public static final com.revenuecat.purchases.models.GoogleReplacementMode WITHOUT_PRORATION;
    enum_constant public static final com.revenuecat.purchases.models.GoogleReplacementMode WITH_TIME_PRORATION;
    field public static final com.revenuecat.purchases.models.GoogleReplacementMode.CREATOR CREATOR;
  }

  public static final class GoogleReplacementMode.CREATOR implements android.os.Parcelable.Creator<com.revenuecat.purchases.models.GoogleReplacementMode> {
    method public com.revenuecat.purchases.models.GoogleReplacementMode? createFromParcel(android.os.Parcel in);
    method public com.revenuecat.purchases.models.GoogleReplacementMode? fromPlayBillingClientMode(@com.android.billingclient.api.BillingFlowParams.SubscriptionUpdateParams.ReplacementMode Integer? playBillingClientMode);
    method public com.revenuecat.purchases.models.GoogleReplacementMode![] newArray(int size);
  }

  public final class GoogleStoreProduct implements com.revenuecat.purchases.models.StoreProduct {
    ctor @Deprecated public GoogleStoreProduct(String productId, String? basePlanId, com.revenuecat.purchases.ProductType type, com.revenuecat.purchases.models.Price price, String title, String description, com.revenuecat.purchases.models.Period? period, com.revenuecat.purchases.models.SubscriptionOptions? subscriptionOptions, com.revenuecat.purchases.models.SubscriptionOption? defaultOption, com.android.billingclient.api.ProductDetails productDetails, optional String? presentedOfferingIdentifier);
    ctor @Deprecated public GoogleStoreProduct(String productId, String? basePlanId, com.revenuecat.purchases.ProductType type, com.revenuecat.purchases.models.Price price, String name, String title, String description, com.revenuecat.purchases.models.Period? period, com.revenuecat.purchases.models.SubscriptionOptions? subscriptionOptions, com.revenuecat.purchases.models.SubscriptionOption? defaultOption, com.android.billingclient.api.ProductDetails productDetails);
    ctor @Deprecated public GoogleStoreProduct(String productId, String? basePlanId, com.revenuecat.purchases.ProductType type, com.revenuecat.purchases.models.Price price, String name, String title, String description, com.revenuecat.purchases.models.Period? period, com.revenuecat.purchases.models.SubscriptionOptions? subscriptionOptions, com.revenuecat.purchases.models.SubscriptionOption? defaultOption, com.android.billingclient.api.ProductDetails productDetails, optional @Deprecated String? presentedOfferingIdentifier);
    ctor @Deprecated public GoogleStoreProduct(String productId, String? basePlanId, com.revenuecat.purchases.ProductType type, com.revenuecat.purchases.models.Price price, String name, String title, String description, com.revenuecat.purchases.models.Period? period, com.revenuecat.purchases.models.SubscriptionOptions? subscriptionOptions, com.revenuecat.purchases.models.SubscriptionOption? defaultOption, com.android.billingclient.api.ProductDetails productDetails, optional @Deprecated String? presentedOfferingIdentifier, optional com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext);
    method public String component1();
    method public com.revenuecat.purchases.models.SubscriptionOption? component10();
    method public com.android.billingclient.api.ProductDetails component11();
    method @Deprecated public String? component12();
    method public com.revenuecat.purchases.PresentedOfferingContext? component13();
    method public String? component2();
    method public com.revenuecat.purchases.ProductType component3();
    method public com.revenuecat.purchases.models.Price component4();
    method public String component5();
    method public String component6();
    method public String component7();
    method public com.revenuecat.purchases.models.Period? component8();
    method public com.revenuecat.purchases.models.SubscriptionOptions? component9();
    method public com.revenuecat.purchases.models.GoogleStoreProduct copy(String productId, String? basePlanId, com.revenuecat.purchases.ProductType type, com.revenuecat.purchases.models.Price price, String name, String title, String description, com.revenuecat.purchases.models.Period? period, com.revenuecat.purchases.models.SubscriptionOptions? subscriptionOptions, com.revenuecat.purchases.models.SubscriptionOption? defaultOption, com.android.billingclient.api.ProductDetails productDetails, String? presentedOfferingIdentifier, com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext);
    method @Deprecated public com.revenuecat.purchases.models.StoreProduct copyWithOfferingId(String offeringId);
    method public com.revenuecat.purchases.models.StoreProduct copyWithPresentedOfferingContext(com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext);
    method public String? getBasePlanId();
    method public com.revenuecat.purchases.models.SubscriptionOption? getDefaultOption();
    method public String getDescription();
    method public String getId();
    method public String getName();
    method public com.revenuecat.purchases.models.Period? getPeriod();
    method public com.revenuecat.purchases.PresentedOfferingContext? getPresentedOfferingContext();
    method @Deprecated public String? getPresentedOfferingIdentifier();
    method public com.revenuecat.purchases.models.Price getPrice();
    method public com.android.billingclient.api.ProductDetails getProductDetails();
    method public String getProductId();
    method public com.revenuecat.purchases.models.PurchasingData getPurchasingData();
    method @Deprecated public String getSku();
    method public com.revenuecat.purchases.models.SubscriptionOptions? getSubscriptionOptions();
    method public String getTitle();
    method public com.revenuecat.purchases.ProductType getType();
    property public final String? basePlanId;
    property public com.revenuecat.purchases.models.SubscriptionOption? defaultOption;
    property public String description;
    property public String id;
    property public String name;
    property public com.revenuecat.purchases.models.Period? period;
    property public com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext;
    property @Deprecated public String? presentedOfferingIdentifier;
    property public com.revenuecat.purchases.models.Price price;
    property public final com.android.billingclient.api.ProductDetails productDetails;
    property public final String productId;
    property public com.revenuecat.purchases.models.PurchasingData purchasingData;
    property @Deprecated public String sku;
    property public com.revenuecat.purchases.models.SubscriptionOptions? subscriptionOptions;
    property public String title;
    property public com.revenuecat.purchases.ProductType type;
  }

  public final class GoogleStoreProductKt {
    method public static com.revenuecat.purchases.models.GoogleStoreProduct? getGoogleProduct(com.revenuecat.purchases.models.StoreProduct);
  }

  public final class GoogleSubscriptionOption implements com.revenuecat.purchases.models.SubscriptionOption {
    ctor public GoogleSubscriptionOption(String productId, String basePlanId, String? offerId, java.util.List<com.revenuecat.purchases.models.PricingPhase> pricingPhases, java.util.List<java.lang.String> tags, com.android.billingclient.api.ProductDetails productDetails, String offerToken);
    ctor public GoogleSubscriptionOption(String productId, String basePlanId, String? offerId, java.util.List<com.revenuecat.purchases.models.PricingPhase> pricingPhases, java.util.List<java.lang.String> tags, com.android.billingclient.api.ProductDetails productDetails, String offerToken, optional com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext);
    ctor public GoogleSubscriptionOption(String productId, String basePlanId, String? offerId, java.util.List<com.revenuecat.purchases.models.PricingPhase> pricingPhases, java.util.List<java.lang.String> tags, com.android.billingclient.api.ProductDetails productDetails, String offerToken, optional com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext, optional com.revenuecat.purchases.models.GoogleInstallmentsInfo? installmentsInfo);
    ctor @Deprecated public GoogleSubscriptionOption(String productId, String basePlanId, String? offerId, java.util.List<com.revenuecat.purchases.models.PricingPhase> pricingPhases, java.util.List<java.lang.String> tags, com.android.billingclient.api.ProductDetails productDetails, String offerToken, String presentedOfferingId);
    method public String component1();
    method public String component2();
    method public String? component3();
    method public java.util.List<com.revenuecat.purchases.models.PricingPhase> component4();
    method public java.util.List<java.lang.String> component5();
    method public com.android.billingclient.api.ProductDetails component6();
    method public String component7();
    method public com.revenuecat.purchases.PresentedOfferingContext? component8();
    method public com.revenuecat.purchases.models.GoogleInstallmentsInfo? component9();
    method public com.revenuecat.purchases.models.GoogleSubscriptionOption copy(String productId, String basePlanId, String? offerId, java.util.List<com.revenuecat.purchases.models.PricingPhase> pricingPhases, java.util.List<java.lang.String> tags, com.android.billingclient.api.ProductDetails productDetails, String offerToken, com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext, com.revenuecat.purchases.models.GoogleInstallmentsInfo? installmentsInfo);
    method public String getBasePlanId();
    method public String getId();
    method public com.revenuecat.purchases.models.GoogleInstallmentsInfo? getInstallmentsInfo();
    method public String? getOfferId();
    method public String getOfferToken();
    method public com.revenuecat.purchases.PresentedOfferingContext? getPresentedOfferingContext();
    method @Deprecated public String? getPresentedOfferingIdentifier();
    method public java.util.List<com.revenuecat.purchases.models.PricingPhase> getPricingPhases();
    method public com.android.billingclient.api.ProductDetails getProductDetails();
    method public String getProductId();
    method public com.revenuecat.purchases.models.PurchasingData getPurchasingData();
    method public java.util.List<java.lang.String> getTags();
    property public final String basePlanId;
    property public String id;
    property public com.revenuecat.purchases.models.GoogleInstallmentsInfo? installmentsInfo;
    property public final String? offerId;
    property public final String offerToken;
    property public com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext;
    property @Deprecated public String? presentedOfferingIdentifier;
    property public java.util.List<com.revenuecat.purchases.models.PricingPhase> pricingPhases;
    property public final com.android.billingclient.api.ProductDetails productDetails;
    property public final String productId;
    property public com.revenuecat.purchases.models.PurchasingData purchasingData;
    property public java.util.List<java.lang.String> tags;
  }

  public enum InAppMessageType {
    method public static com.revenuecat.purchases.models.InAppMessageType valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.models.InAppMessageType[] values();
    enum_constant public static final com.revenuecat.purchases.models.InAppMessageType BILLING_ISSUES;
  }

  public interface InstallmentsInfo {
    method public int getCommitmentPaymentsCount();
    method public int getRenewalCommitmentPaymentsCount();
    property public abstract int commitmentPaymentsCount;
    property public abstract int renewalCommitmentPaymentsCount;
  }

  public enum OfferPaymentMode {
    method public static com.revenuecat.purchases.models.OfferPaymentMode valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.models.OfferPaymentMode[] values();
    enum_constant public static final com.revenuecat.purchases.models.OfferPaymentMode DISCOUNTED_RECURRING_PAYMENT;
    enum_constant public static final com.revenuecat.purchases.models.OfferPaymentMode FREE_TRIAL;
    enum_constant public static final com.revenuecat.purchases.models.OfferPaymentMode SINGLE_PAYMENT;
  }

  @kotlinx.parcelize.Parcelize public final class Period implements android.os.Parcelable {
    ctor public Period(int value, com.revenuecat.purchases.models.Period.Unit unit, String iso8601);
    method public int component1();
    method public com.revenuecat.purchases.models.Period.Unit component2();
    method public String component3();
    method public com.revenuecat.purchases.models.Period copy(int value, com.revenuecat.purchases.models.Period.Unit unit, String iso8601);
    method public String getIso8601();
    method public com.revenuecat.purchases.models.Period.Unit getUnit();
    method public int getValue();
    method public double getValueInDays();
    method public double getValueInMonths();
    method public double getValueInWeeks();
    method public double getValueInYears();
    property public final String iso8601;
    property public final com.revenuecat.purchases.models.Period.Unit unit;
    property public final int value;
    property @com.revenuecat.purchases.InternalRevenueCatAPI public final double valueInDays;
    property public final double valueInMonths;
    property @com.revenuecat.purchases.InternalRevenueCatAPI public final double valueInWeeks;
    property @com.revenuecat.purchases.InternalRevenueCatAPI public final double valueInYears;
    field public static final com.revenuecat.purchases.models.Period.Factory Factory;
  }

  public static final class Period.Factory {
    method public com.revenuecat.purchases.models.Period create(String iso8601);
  }

  public enum Period.Unit {
    method public static com.revenuecat.purchases.models.Period.Unit valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.models.Period.Unit[] values();
    enum_constant public static final com.revenuecat.purchases.models.Period.Unit DAY;
    enum_constant public static final com.revenuecat.purchases.models.Period.Unit MONTH;
    enum_constant public static final com.revenuecat.purchases.models.Period.Unit UNKNOWN;
    enum_constant public static final com.revenuecat.purchases.models.Period.Unit WEEK;
    enum_constant public static final com.revenuecat.purchases.models.Period.Unit YEAR;
  }

  public final class PeriodTest {
    ctor public PeriodTest();
    method public void create period creates expected period class for days();
    method public void create period creates expected period class for months();
    method public void create period creates expected period class for multiple different units();
    method public void create period creates expected period class for multiple different units with min unit months();
    method public void create period creates expected period class for multiple units();
    method public void create period creates expected period class for weeks();
    method public void create period creates expected period class for years();
    method public void valueInMonths is 0 for unknown();
    method public void valueInMonths is correct for days();
    method public void valueInMonths is correct for months();
    method public void valueInMonths is correct for weeks();
    method public void valueInMonths is correct for years();
    field public static final com.revenuecat.purchases.models.PeriodTest.Companion Companion;
  }

  public static final class PeriodTest.Companion {
  }

  @kotlinx.parcelize.Parcelize public final class Price implements android.os.Parcelable {
    ctor public Price(String formatted, long amountMicros, String currencyCode);
    method public String component1();
    method public long component2();
    method public String component3();
    method public com.revenuecat.purchases.models.Price copy(String formatted, long amountMicros, String currencyCode);
    method public long getAmountMicros();
    method public String getCurrencyCode();
    method public String getFormatted();
    property public final long amountMicros;
    property public final String currencyCode;
    property public final String formatted;
  }

  @kotlinx.parcelize.Parcelize public final class PricingPhase implements android.os.Parcelable {
    ctor public PricingPhase(com.revenuecat.purchases.models.Period billingPeriod, com.revenuecat.purchases.models.RecurrenceMode recurrenceMode, Integer? billingCycleCount, com.revenuecat.purchases.models.Price price);
    method public com.revenuecat.purchases.models.Period component1();
    method public com.revenuecat.purchases.models.RecurrenceMode component2();
    method public Integer? component3();
    method public com.revenuecat.purchases.models.Price component4();
    method public com.revenuecat.purchases.models.PricingPhase copy(com.revenuecat.purchases.models.Period billingPeriod, com.revenuecat.purchases.models.RecurrenceMode recurrenceMode, Integer? billingCycleCount, com.revenuecat.purchases.models.Price price);
    method @Deprecated public String formattedPriceInMonths();
    method @Deprecated public String formattedPriceInMonths(optional java.util.Locale locale);
    method public Integer? getBillingCycleCount();
    method public com.revenuecat.purchases.models.Period getBillingPeriod();
    method public com.revenuecat.purchases.models.OfferPaymentMode? getOfferPaymentMode();
    method public com.revenuecat.purchases.models.Price getPrice();
    method public com.revenuecat.purchases.models.RecurrenceMode getRecurrenceMode();
    method public com.revenuecat.purchases.models.Price pricePerDay();
    method public com.revenuecat.purchases.models.Price pricePerDay(optional java.util.Locale locale);
    method public com.revenuecat.purchases.models.Price pricePerMonth();
    method public com.revenuecat.purchases.models.Price pricePerMonth(optional java.util.Locale locale);
    method public com.revenuecat.purchases.models.Price pricePerWeek();
    method public com.revenuecat.purchases.models.Price pricePerWeek(optional java.util.Locale locale);
    method public com.revenuecat.purchases.models.Price pricePerYear();
    method public com.revenuecat.purchases.models.Price pricePerYear(optional java.util.Locale locale);
    property public final Integer? billingCycleCount;
    property public final com.revenuecat.purchases.models.Period billingPeriod;
    property public final com.revenuecat.purchases.models.OfferPaymentMode? offerPaymentMode;
    property public final com.revenuecat.purchases.models.Price price;
    property public final com.revenuecat.purchases.models.RecurrenceMode recurrenceMode;
  }

  public enum PurchaseState {
    method public static com.revenuecat.purchases.models.PurchaseState valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.models.PurchaseState[] values();
    enum_constant public static final com.revenuecat.purchases.models.PurchaseState PENDING;
    enum_constant public static final com.revenuecat.purchases.models.PurchaseState PURCHASED;
    enum_constant public static final com.revenuecat.purchases.models.PurchaseState UNSPECIFIED_STATE;
  }

  public enum PurchaseType {
    method public static com.revenuecat.purchases.models.PurchaseType valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.models.PurchaseType[] values();
    enum_constant public static final com.revenuecat.purchases.models.PurchaseType AMAZON_PURCHASE;
    enum_constant public static final com.revenuecat.purchases.models.PurchaseType GOOGLE_PURCHASE;
    enum_constant public static final com.revenuecat.purchases.models.PurchaseType GOOGLE_RESTORED_PURCHASE;
  }

  public interface PurchasingData {
    method public String getProductId();
    method public com.revenuecat.purchases.ProductType getProductType();
    property public abstract String productId;
    property public abstract com.revenuecat.purchases.ProductType productType;
  }

  public interface RawDataContainer<DataType> {
    method public DataType getRawData();
    property public abstract DataType rawData;
  }

  public enum RecurrenceMode {
    method public final Integer! getIdentifier();
    method public static com.revenuecat.purchases.models.RecurrenceMode valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.models.RecurrenceMode[] values();
    property public final Integer! identifier;
    enum_constant public static final com.revenuecat.purchases.models.RecurrenceMode FINITE_RECURRING;
    enum_constant public static final com.revenuecat.purchases.models.RecurrenceMode INFINITE_RECURRING;
    enum_constant public static final com.revenuecat.purchases.models.RecurrenceMode NON_RECURRING;
    enum_constant public static final com.revenuecat.purchases.models.RecurrenceMode UNKNOWN;
  }

  public final class RecurrenceModeKt {
    method public static com.revenuecat.purchases.models.RecurrenceMode toRecurrenceMode(Integer?);
  }

  public interface StoreProduct {
    method @Deprecated public com.revenuecat.purchases.models.StoreProduct copyWithOfferingId(String offeringId);
    method public com.revenuecat.purchases.models.StoreProduct copyWithPresentedOfferingContext(com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext);
    method public default String? formattedPricePerMonth(optional java.util.Locale locale);
    method public com.revenuecat.purchases.models.SubscriptionOption? getDefaultOption();
    method public String getDescription();
    method public String getId();
    method public String getName();
    method public com.revenuecat.purchases.models.Period? getPeriod();
    method public com.revenuecat.purchases.PresentedOfferingContext? getPresentedOfferingContext();
    method @Deprecated public String? getPresentedOfferingIdentifier();
    method public com.revenuecat.purchases.models.Price getPrice();
    method public com.revenuecat.purchases.models.PurchasingData getPurchasingData();
    method @Deprecated public String getSku();
    method public com.revenuecat.purchases.models.SubscriptionOptions? getSubscriptionOptions();
    method public String getTitle();
    method public com.revenuecat.purchases.ProductType getType();
    method public default com.revenuecat.purchases.models.Price? pricePerDay(optional java.util.Locale locale);
    method public default com.revenuecat.purchases.models.Price? pricePerMonth(optional java.util.Locale locale);
    method public default com.revenuecat.purchases.models.Price? pricePerWeek(optional java.util.Locale locale);
    method public default com.revenuecat.purchases.models.Price? pricePerYear(optional java.util.Locale locale);
    property public abstract com.revenuecat.purchases.models.SubscriptionOption? defaultOption;
    property public abstract String description;
    property public abstract String id;
    property public abstract String name;
    property public abstract com.revenuecat.purchases.models.Period? period;
    property public abstract com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext;
    property @Deprecated public abstract String? presentedOfferingIdentifier;
    property public abstract com.revenuecat.purchases.models.Price price;
    property public abstract com.revenuecat.purchases.models.PurchasingData purchasingData;
    property @Deprecated public abstract String sku;
    property public abstract com.revenuecat.purchases.models.SubscriptionOptions? subscriptionOptions;
    property public abstract String title;
    property public abstract com.revenuecat.purchases.ProductType type;
  }

  @kotlinx.parcelize.Parcelize @kotlinx.parcelize.TypeParceler public final class StoreTransaction implements android.os.Parcelable {
    ctor public StoreTransaction(String? orderId, java.util.List<java.lang.String> productIds, com.revenuecat.purchases.ProductType type, long purchaseTime, String purchaseToken, com.revenuecat.purchases.models.PurchaseState purchaseState, Boolean? isAutoRenewing, String? signature, org.json.JSONObject originalJson, com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext, String? storeUserID, com.revenuecat.purchases.models.PurchaseType purchaseType, String? marketplace, String? subscriptionOptionId, com.revenuecat.purchases.ReplacementMode? replacementMode);
    ctor @Deprecated public StoreTransaction(String? orderId, java.util.List<java.lang.String> productIds, com.revenuecat.purchases.ProductType type, long purchaseTime, String purchaseToken, com.revenuecat.purchases.models.PurchaseState purchaseState, Boolean? isAutoRenewing, String? signature, org.json.JSONObject originalJson, String? presentedOfferingIdentifier, String? storeUserID, com.revenuecat.purchases.models.PurchaseType purchaseType, String? marketplace, String? subscriptionOptionId, com.revenuecat.purchases.ReplacementMode? replacementMode);
    method public String? component1();
    method public com.revenuecat.purchases.PresentedOfferingContext? component10();
    method public String? component11();
    method public com.revenuecat.purchases.models.PurchaseType component12();
    method public String? component13();
    method public String? component14();
    method public com.revenuecat.purchases.ReplacementMode? component15();
    method public java.util.List<java.lang.String> component2();
    method public com.revenuecat.purchases.ProductType component3();
    method public long component4();
    method public String component5();
    method public com.revenuecat.purchases.models.PurchaseState component6();
    method public Boolean? component7();
    method public String? component8();
    method public org.json.JSONObject component9();
    method public com.revenuecat.purchases.models.StoreTransaction copy(String? orderId, java.util.List<java.lang.String> productIds, com.revenuecat.purchases.ProductType type, long purchaseTime, String purchaseToken, com.revenuecat.purchases.models.PurchaseState purchaseState, Boolean? isAutoRenewing, String? signature, org.json.JSONObject originalJson, com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext, String? storeUserID, com.revenuecat.purchases.models.PurchaseType purchaseType, String? marketplace, String? subscriptionOptionId, com.revenuecat.purchases.ReplacementMode? replacementMode);
    method public String? getMarketplace();
    method public String? getOrderId();
    method public org.json.JSONObject getOriginalJson();
    method public com.revenuecat.purchases.PresentedOfferingContext? getPresentedOfferingContext();
    method @Deprecated public String? getPresentedOfferingIdentifier();
    method public java.util.List<java.lang.String> getProductIds();
    method public com.revenuecat.purchases.models.PurchaseState getPurchaseState();
    method public long getPurchaseTime();
    method public String getPurchaseToken();
    method public com.revenuecat.purchases.models.PurchaseType getPurchaseType();
    method public com.revenuecat.purchases.ReplacementMode? getReplacementMode();
    method public String? getSignature();
    method @Deprecated public java.util.List<java.lang.String> getSkus();
    method public String? getStoreUserID();
    method public String? getSubscriptionOptionId();
    method public com.revenuecat.purchases.ProductType getType();
    method public Boolean? isAutoRenewing();
    property public final Boolean? isAutoRenewing;
    property public final String? marketplace;
    property public final String? orderId;
    property public final org.json.JSONObject originalJson;
    property public final com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext;
    property @Deprecated public final String? presentedOfferingIdentifier;
    property public final java.util.List<java.lang.String> productIds;
    property public final com.revenuecat.purchases.models.PurchaseState purchaseState;
    property public final long purchaseTime;
    property public final String purchaseToken;
    property public final com.revenuecat.purchases.models.PurchaseType purchaseType;
    property public final com.revenuecat.purchases.ReplacementMode? replacementMode;
    property public final String? signature;
    property @Deprecated @kotlinx.parcelize.IgnoredOnParcel public final java.util.List<java.lang.String> skus;
    property public final String? storeUserID;
    property public final String? subscriptionOptionId;
    property public final com.revenuecat.purchases.ProductType type;
  }

  public interface SubscriptionOption {
    method public default com.revenuecat.purchases.models.Period? getBillingPeriod();
    method public default com.revenuecat.purchases.models.PricingPhase? getFreePhase();
    method public default com.revenuecat.purchases.models.PricingPhase? getFullPricePhase();
    method public String getId();
    method public com.revenuecat.purchases.models.InstallmentsInfo? getInstallmentsInfo();
    method public default com.revenuecat.purchases.models.PricingPhase? getIntroPhase();
    method public com.revenuecat.purchases.PresentedOfferingContext? getPresentedOfferingContext();
    method @Deprecated public String? getPresentedOfferingIdentifier();
    method public java.util.List<com.revenuecat.purchases.models.PricingPhase> getPricingPhases();
    method public com.revenuecat.purchases.models.PurchasingData getPurchasingData();
    method public java.util.List<java.lang.String> getTags();
    method public default boolean isBasePlan();
    method public default boolean isPrepaid();
    property public default com.revenuecat.purchases.models.Period? billingPeriod;
    property public default com.revenuecat.purchases.models.PricingPhase? freePhase;
    property public default com.revenuecat.purchases.models.PricingPhase? fullPricePhase;
    property public abstract String id;
    property public abstract com.revenuecat.purchases.models.InstallmentsInfo? installmentsInfo;
    property public default com.revenuecat.purchases.models.PricingPhase? introPhase;
    property public default boolean isBasePlan;
    property public default boolean isPrepaid;
    property public abstract com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext;
    property @Deprecated public abstract String? presentedOfferingIdentifier;
    property public abstract java.util.List<com.revenuecat.purchases.models.PricingPhase> pricingPhases;
    property public abstract com.revenuecat.purchases.models.PurchasingData purchasingData;
    property public abstract java.util.List<java.lang.String> tags;
  }

  public final class SubscriptionOptions implements kotlin.jvm.internal.markers.KMappedMarker java.util.List<com.revenuecat.purchases.models.SubscriptionOption> {
    ctor public SubscriptionOptions(java.util.List<? extends com.revenuecat.purchases.models.SubscriptionOption> subscriptionOptions);
    method public com.revenuecat.purchases.models.SubscriptionOption? getBasePlan();
    method public com.revenuecat.purchases.models.SubscriptionOption? getDefaultOffer();
    method public com.revenuecat.purchases.models.SubscriptionOption? getFreeTrial();
    method public com.revenuecat.purchases.models.SubscriptionOption? getIntroOffer();
    method public java.util.List<com.revenuecat.purchases.models.SubscriptionOption> withTag(String tag);
    property public final com.revenuecat.purchases.models.SubscriptionOption? basePlan;
    property public final com.revenuecat.purchases.models.SubscriptionOption? defaultOffer;
    property public final com.revenuecat.purchases.models.SubscriptionOption? freeTrial;
    property public final com.revenuecat.purchases.models.SubscriptionOption? introOffer;
    field public static final String RC_IGNORE_OFFER_TAG = "rc-ignore-offer";
  }

  public final class TestStoreProduct implements com.revenuecat.purchases.models.StoreProduct {
    ctor @Deprecated public TestStoreProduct(String id, String title, String description, com.revenuecat.purchases.models.Price price, com.revenuecat.purchases.models.Period? period, optional com.revenuecat.purchases.models.Period? freeTrialPeriod, optional com.revenuecat.purchases.models.Price? introPrice);
    ctor public TestStoreProduct(String id, String name, String title, String description, com.revenuecat.purchases.models.Price price, com.revenuecat.purchases.models.Period? period, optional com.revenuecat.purchases.models.Period? freeTrialPeriod, optional com.revenuecat.purchases.models.Price? introPrice);
    method public String component1();
    method public String component2();
    method public String component3();
    method public String component4();
    method public com.revenuecat.purchases.models.Price component5();
    method public com.revenuecat.purchases.models.Period? component6();
    method public com.revenuecat.purchases.models.TestStoreProduct copy(String id, String name, String title, String description, com.revenuecat.purchases.models.Price price, com.revenuecat.purchases.models.Period? period, com.revenuecat.purchases.models.Period? freeTrialPeriod, com.revenuecat.purchases.models.Price? introPrice);
    method @Deprecated public com.revenuecat.purchases.models.StoreProduct copyWithOfferingId(String offeringId);
    method public com.revenuecat.purchases.models.StoreProduct copyWithPresentedOfferingContext(com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext);
    method public com.revenuecat.purchases.models.SubscriptionOption? getDefaultOption();
    method public String getDescription();
    method public String getId();
    method public String getName();
    method public com.revenuecat.purchases.models.Period? getPeriod();
    method public com.revenuecat.purchases.PresentedOfferingContext? getPresentedOfferingContext();
    method @Deprecated public String? getPresentedOfferingIdentifier();
    method public com.revenuecat.purchases.models.Price getPrice();
    method public com.revenuecat.purchases.models.PurchasingData getPurchasingData();
    method public String getSku();
    method public com.revenuecat.purchases.models.SubscriptionOptions? getSubscriptionOptions();
    method public String getTitle();
    method public com.revenuecat.purchases.ProductType getType();
    property public com.revenuecat.purchases.models.SubscriptionOption? defaultOption;
    property public String description;
    property public String id;
    property public String name;
    property public com.revenuecat.purchases.models.Period? period;
    property public com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext;
    property @Deprecated public String? presentedOfferingIdentifier;
    property public com.revenuecat.purchases.models.Price price;
    property public com.revenuecat.purchases.models.PurchasingData purchasingData;
    property public String sku;
    property public com.revenuecat.purchases.models.SubscriptionOptions? subscriptionOptions;
    property public String title;
    property public com.revenuecat.purchases.ProductType type;
  }

  @kotlinx.parcelize.Parcelize public final class Transaction implements android.os.Parcelable {
    ctor @Deprecated public Transaction(String transactionIdentifier, String revenuecatId, String productIdentifier, String productId, java.util.Date purchaseDate, String? storeTransactionId, com.revenuecat.purchases.Store store);
    ctor public Transaction(String transactionIdentifier, @Deprecated String revenuecatId, String productIdentifier, @Deprecated String productId, java.util.Date purchaseDate, String? storeTransactionId, com.revenuecat.purchases.Store store, String? displayName, optional boolean isSandbox, java.util.Date? originalPurchaseDate, com.revenuecat.purchases.models.Price? price);
    method public String component1();
    method public java.util.Date? component10();
    method public com.revenuecat.purchases.models.Price? component11();
    method @Deprecated public String component2();
    method public String component3();
    method @Deprecated public String component4();
    method public java.util.Date component5();
    method public String? component6();
    method public com.revenuecat.purchases.Store component7();
    method public String? component8();
    method public boolean component9();
    method public com.revenuecat.purchases.models.Transaction copy(String transactionIdentifier, String revenuecatId, String productIdentifier, String productId, java.util.Date purchaseDate, String? storeTransactionId, com.revenuecat.purchases.Store store, String? displayName, boolean isSandbox, java.util.Date? originalPurchaseDate, com.revenuecat.purchases.models.Price? price);
    method public String? getDisplayName();
    method public java.util.Date? getOriginalPurchaseDate();
    method public com.revenuecat.purchases.models.Price? getPrice();
    method @Deprecated public String getProductId();
    method public String getProductIdentifier();
    method public java.util.Date getPurchaseDate();
    method @Deprecated public String getRevenuecatId();
    method public com.revenuecat.purchases.Store getStore();
    method public String? getStoreTransactionId();
    method public String getTransactionIdentifier();
    method public boolean isSandbox();
    property public final String? displayName;
    property public final boolean isSandbox;
    property public final java.util.Date? originalPurchaseDate;
    property public final com.revenuecat.purchases.models.Price? price;
    property @Deprecated public final String productId;
    property public final String productIdentifier;
    property public final java.util.Date purchaseDate;
    property @Deprecated public final String revenuecatId;
    property public final com.revenuecat.purchases.Store store;
    property public final String? storeTransactionId;
    property public final String transactionIdentifier;
  }

}

package com.revenuecat.purchases.offlineentitlements {

  public abstract class BaseOfflineEntitlementsIntegrationTest extends com.revenuecat.purchases.BasePurchasesIntegrationTest {
    ctor public BaseOfflineEntitlementsIntegrationTest();
    method protected final void assertAcknowledgePurchaseDidHappen(optional long timeout);
    method protected final void assertAcknowledgePurchaseDidNotHappen();
    method protected final void assertCustomerInfoDoesNotHavePurchaseData(com.revenuecat.purchases.CustomerInfo customerInfo);
    method protected final void assertCustomerInfoHasExpectedPurchaseData(com.revenuecat.purchases.CustomerInfo customerInfo);
    method protected final java.util.Map<java.lang.String,com.revenuecat.purchases.models.StoreTransaction> getInitialActivePurchases();
    method protected final void mockPurchaseResult(optional java.util.Map<java.lang.String,com.revenuecat.purchases.models.StoreTransaction> activePurchases);
    property protected final java.util.Map<java.lang.String,com.revenuecat.purchases.models.StoreTransaction> initialActivePurchases;
  }

  public abstract class BaseOfflineEntitlementsWithInitialRequestsCompletedIntegrationTest extends com.revenuecat.purchases.offlineentitlements.BaseOfflineEntitlementsIntegrationTest {
    ctor public BaseOfflineEntitlementsWithInitialRequestsCompletedIntegrationTest();
    method public final void setUp();
  }

  public final class OfflineEntitlementsFreshInstallInitialPurchasesIntegrationTest extends com.revenuecat.purchases.offlineentitlements.BaseOfflineEntitlementsIntegrationTest {
    ctor public OfflineEntitlementsFreshInstallInitialPurchasesIntegrationTest();
    method public void doesNotEnterOfflineEntitlementsModeIfNoProductEntitlementMappingAvailable();
    method public void setUp();
    property protected java.util.Map<java.lang.String,com.revenuecat.purchases.models.StoreTransaction> initialActivePurchasesToUse;
    property protected boolean initialForceServerErrors;
  }

  public final class OfflineEntitlementsFreshInstallIntegrationNoPurchasesTest extends com.revenuecat.purchases.offlineentitlements.BaseOfflineEntitlementsIntegrationTest {
    ctor public OfflineEntitlementsFreshInstallIntegrationNoPurchasesTest();
    method public void doesNotEnterOfflineEntitlementsModeIfNoProductEntitlementMappingAvailable();
    method public void setUp();
    property protected boolean initialForceServerErrors;
  }

  public final class OfflineEntitlementsWithInitialRequestsCompletedAndInitialPurchasesIntegrationTest extends com.revenuecat.purchases.offlineentitlements.BaseOfflineEntitlementsWithInitialRequestsCompletedIntegrationTest {
    ctor public OfflineEntitlementsWithInitialRequestsCompletedAndInitialPurchasesIntegrationTest();
    method public void entersOfflineEntitlementsModeIfCachedCustomerInfoAndPostingPendingPurchasesReturns500();
    method public void entersOfflineEntitlementsModeIfNoCachedCustomerInfoAndPostingPendingPurchasesReturns500();
    property protected java.util.Map<java.lang.String,com.revenuecat.purchases.models.StoreTransaction> initialActivePurchasesToUse;
  }

  public final class OfflineEntitlementsWithInitialRequestsCompletedAndNoInitialPurchasesIntegrationTest extends com.revenuecat.purchases.offlineentitlements.BaseOfflineEntitlementsWithInitialRequestsCompletedIntegrationTest {
    ctor public OfflineEntitlementsWithInitialRequestsCompletedAndNoInitialPurchasesIntegrationTest();
    method public void doesNotEnterOfflineEntitlementsModeIfCachedCustomerInfoAndCustomerInfoRequestReturns500();
    method public void doesNotEnterOfflineEntitlementsModeIfPurchasesConsumable();
    method public void entersOfflineEntitlementsModeIfPurchaseRequestReturns500();
    method public void gettingCustomerInfoWhileInOfflineEntitlementsModeReturnsOfflineCustomerInfo();
    method public void recoversFromOfflineEntitlementsModeIfRestoreSucceeds();
    method public void sendsOfflinePurchasesAfterForegroundingApp();
    method public void sendsOfflinePurchasesAfterRestartingApp();
  }

}

package com.revenuecat.purchases.paywalls {

  public final class PaywallColor {
    ctor public PaywallColor(@ColorInt int colorInt);
    ctor public PaywallColor(String stringRepresentation);
    ctor public PaywallColor(String stringRepresentation, @RequiresApi(android.os.Build.VERSION_CODES.O) android.graphics.Color? underlyingColor);
    method public String component1();
    method public android.graphics.Color? component2();
    method public com.revenuecat.purchases.paywalls.PaywallColor copy(String stringRepresentation, android.graphics.Color? underlyingColor);
    method public int getColorInt();
    method public String getStringRepresentation();
    method public android.graphics.Color? getUnderlyingColor();
    property public final int colorInt;
    property public final String stringRepresentation;
    property public final android.graphics.Color? underlyingColor;
  }

  public static final class PaywallColor.Serializer implements kotlinx.serialization.KSerializer<com.revenuecat.purchases.paywalls.PaywallColor> {
    method public com.revenuecat.purchases.paywalls.PaywallColor deserialize(kotlinx.serialization.encoding.Decoder decoder);
    method public kotlinx.serialization.descriptors.SerialDescriptor getDescriptor();
    method public void serialize(kotlinx.serialization.encoding.Encoder encoder, com.revenuecat.purchases.paywalls.PaywallColor value);
    property public kotlinx.serialization.descriptors.SerialDescriptor descriptor;
    field public static final com.revenuecat.purchases.paywalls.PaywallColor.Serializer INSTANCE;
  }

  public final class PaywallColorTest {
    ctor public PaywallColorTest();
    method public void paywall color can be created from RGB string();
    method public void paywall color can be created from RGBA string();
    method public void paywall color can be created from an RGB ColorInt();
  }

  @kotlinx.serialization.Serializable public final class PaywallData {
    ctor public PaywallData(@kotlinx.serialization.SerialName("template_name") String templateName, com.revenuecat.purchases.paywalls.PaywallData.Configuration config, @kotlinx.serialization.SerialName("asset_base_url") @kotlinx.serialization.Serializable(with=URLSerializer::class) java.net.URL assetBaseURL, optional int revision, @kotlinx.serialization.SerialName("localized_strings") java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration> localization, optional @kotlinx.serialization.SerialName("localized_strings_by_tier") java.util.Map<java.lang.String,? extends java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration>> localizationByTier, optional @kotlinx.serialization.SerialName("zero_decimal_place_countries") @kotlinx.serialization.Serializable(with=GoogleListSerializer::class) java.util.List<java.lang.String> zeroDecimalPlaceCountries, optional @kotlinx.serialization.SerialName("default_locale") String? defaultLocale);
    method public String component1();
    method public com.revenuecat.purchases.paywalls.PaywallData.Configuration component2();
    method public java.net.URL component3();
    method public int component4();
    method public java.util.List<java.lang.String> component7();
    method public String? component8();
    method public com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration? configForLocale(java.util.Locale requiredLocale);
    method public com.revenuecat.purchases.paywalls.PaywallData copy(String templateName, com.revenuecat.purchases.paywalls.PaywallData.Configuration config, java.net.URL assetBaseURL, int revision, java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration> localization, java.util.Map<java.lang.String,? extends java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration>> localizationByTier, java.util.List<java.lang.String> zeroDecimalPlaceCountries, String? defaultLocale);
    method public java.net.URL getAssetBaseURL();
    method public com.revenuecat.purchases.paywalls.PaywallData.Configuration getConfig();
    method public String? getDefaultLocale();
    method public kotlin.Pair<java.util.Locale,com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration> getLocalizedConfiguration();
    method public int getRevision();
    method public String getTemplateName();
    method public kotlin.Pair<java.util.Locale,java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration>> getTieredLocalizedConfiguration();
    method public java.util.List<java.lang.String> getZeroDecimalPlaceCountries();
    method @VisibleForTesting public kotlin.Pair<java.util.Locale,com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration> localizedConfiguration(java.util.List<java.util.Locale> locales);
    method @VisibleForTesting public java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration>? tieredConfigForLocale(java.util.Locale requiredLocale);
    property public final java.net.URL assetBaseURL;
    property public final com.revenuecat.purchases.paywalls.PaywallData.Configuration config;
    property public final String? defaultLocale;
    property public final kotlin.Pair<java.util.Locale,com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration> localizedConfiguration;
    property public final int revision;
    property public final String templateName;
    property public final kotlin.Pair<java.util.Locale,java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration>> tieredLocalizedConfiguration;
    property public final java.util.List<java.lang.String> zeroDecimalPlaceCountries;
  }

  @kotlinx.serialization.Serializable public static final class PaywallData.Configuration {
    ctor public PaywallData.Configuration(optional @kotlinx.serialization.SerialName("packages") java.util.List<java.lang.String> packageIds, optional @kotlinx.serialization.SerialName("default_package") String? defaultPackage, optional @kotlinx.serialization.SerialName("images_webp") com.revenuecat.purchases.paywalls.PaywallData.Configuration.Images? imagesWebp, optional @kotlinx.serialization.SerialName("images") com.revenuecat.purchases.paywalls.PaywallData.Configuration.Images? legacyImages, optional @kotlinx.serialization.SerialName("images_by_tier") java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.Configuration.Images>? imagesByTier, optional @kotlinx.serialization.SerialName("blurred_background_image") boolean blurredBackgroundImage, optional @kotlinx.serialization.SerialName("display_restore_purchases") boolean displayRestorePurchases, optional @kotlinx.serialization.SerialName("tos_url") @kotlinx.serialization.Serializable(with=OptionalURLSerializer::class) java.net.URL? termsOfServiceURL, optional @kotlinx.serialization.SerialName("privacy_url") @kotlinx.serialization.Serializable(with=OptionalURLSerializer::class) java.net.URL? privacyURL, com.revenuecat.purchases.paywalls.PaywallData.Configuration.ColorInformation colors, optional @kotlinx.serialization.SerialName("colors_by_tier") java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.Configuration.ColorInformation>? colorsByTier, optional java.util.List<com.revenuecat.purchases.paywalls.PaywallData.Configuration.Tier>? tiers, optional @kotlinx.serialization.SerialName("default_tier") String? defaultTier);
    ctor public PaywallData.Configuration(java.util.List<java.lang.String> packageIds, optional String? defaultPackage, com.revenuecat.purchases.paywalls.PaywallData.Configuration.Images images, optional java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.Configuration.Images>? imagesByTier, com.revenuecat.purchases.paywalls.PaywallData.Configuration.ColorInformation colors, optional java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.Configuration.ColorInformation>? colorsByTier, optional java.util.List<com.revenuecat.purchases.paywalls.PaywallData.Configuration.Tier>? tiers, optional boolean blurredBackgroundImage, optional boolean displayRestorePurchases, optional java.net.URL? termsOfServiceURL, optional java.net.URL? privacyURL);
    method public java.util.List<java.lang.String> component1();
    method public com.revenuecat.purchases.paywalls.PaywallData.Configuration.ColorInformation component10();
    method public java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.Configuration.ColorInformation>? component11();
    method public java.util.List<com.revenuecat.purchases.paywalls.PaywallData.Configuration.Tier>? component12();
    method public String? component13();
    method public String? component2();
    method public java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.Configuration.Images>? component5();
    method public boolean component6();
    method public boolean component7();
    method public java.net.URL? component8();
    method public java.net.URL? component9();
    method public com.revenuecat.purchases.paywalls.PaywallData.Configuration copy(java.util.List<java.lang.String> packageIds, String? defaultPackage, com.revenuecat.purchases.paywalls.PaywallData.Configuration.Images? imagesWebp, com.revenuecat.purchases.paywalls.PaywallData.Configuration.Images? legacyImages, java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.Configuration.Images>? imagesByTier, boolean blurredBackgroundImage, boolean displayRestorePurchases, java.net.URL? termsOfServiceURL, java.net.URL? privacyURL, com.revenuecat.purchases.paywalls.PaywallData.Configuration.ColorInformation colors, java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.Configuration.ColorInformation>? colorsByTier, java.util.List<com.revenuecat.purchases.paywalls.PaywallData.Configuration.Tier>? tiers, String? defaultTier);
    method public boolean getBlurredBackgroundImage();
    method public com.revenuecat.purchases.paywalls.PaywallData.Configuration.ColorInformation getColors();
    method public java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.Configuration.ColorInformation>? getColorsByTier();
    method public String? getDefaultPackage();
    method public String? getDefaultTier();
    method public boolean getDisplayRestorePurchases();
    method public com.revenuecat.purchases.paywalls.PaywallData.Configuration.Images getImages();
    method public java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.Configuration.Images>? getImagesByTier();
    method public java.util.List<java.lang.String> getPackageIds();
    method public java.net.URL? getPrivacyURL();
    method public java.net.URL? getTermsOfServiceURL();
    method public java.util.List<com.revenuecat.purchases.paywalls.PaywallData.Configuration.Tier>? getTiers();
    property public final boolean blurredBackgroundImage;
    property public final com.revenuecat.purchases.paywalls.PaywallData.Configuration.ColorInformation colors;
    property public final java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.Configuration.ColorInformation>? colorsByTier;
    property public final String? defaultPackage;
    property public final String? defaultTier;
    property public final boolean displayRestorePurchases;
    property public final com.revenuecat.purchases.paywalls.PaywallData.Configuration.Images images;
    property public final java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.Configuration.Images>? imagesByTier;
    property public final java.util.List<java.lang.String> packageIds;
    property public final java.net.URL? privacyURL;
    property public final java.net.URL? termsOfServiceURL;
    property public final java.util.List<com.revenuecat.purchases.paywalls.PaywallData.Configuration.Tier>? tiers;
  }

  @kotlinx.serialization.Serializable public static final class PaywallData.Configuration.ColorInformation {
    ctor public PaywallData.Configuration.ColorInformation(com.revenuecat.purchases.paywalls.PaywallData.Configuration.Colors light, optional com.revenuecat.purchases.paywalls.PaywallData.Configuration.Colors? dark);
    method public com.revenuecat.purchases.paywalls.PaywallData.Configuration.Colors component1();
    method public com.revenuecat.purchases.paywalls.PaywallData.Configuration.Colors? component2();
    method public com.revenuecat.purchases.paywalls.PaywallData.Configuration.ColorInformation copy(com.revenuecat.purchases.paywalls.PaywallData.Configuration.Colors light, com.revenuecat.purchases.paywalls.PaywallData.Configuration.Colors? dark);
    method public com.revenuecat.purchases.paywalls.PaywallData.Configuration.Colors? getDark();
    method public com.revenuecat.purchases.paywalls.PaywallData.Configuration.Colors getLight();
    property public final com.revenuecat.purchases.paywalls.PaywallData.Configuration.Colors? dark;
    property public final com.revenuecat.purchases.paywalls.PaywallData.Configuration.Colors light;
  }

  @kotlinx.serialization.Serializable public static final class PaywallData.Configuration.Colors {
    ctor public PaywallData.Configuration.Colors(@kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor background, @kotlinx.serialization.SerialName("text_1") @kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor text1, optional @kotlinx.serialization.SerialName("text_2") @kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor? text2, optional @kotlinx.serialization.SerialName("text_3") @kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor? text3, @kotlinx.serialization.SerialName("call_to_action_background") @kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor callToActionBackground, @kotlinx.serialization.SerialName("call_to_action_foreground") @kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor callToActionForeground, optional @kotlinx.serialization.SerialName("call_to_action_secondary_background") @kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor? callToActionSecondaryBackground, optional @kotlinx.serialization.SerialName("accent_1") @kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor? accent1, optional @kotlinx.serialization.SerialName("accent_2") @kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor? accent2, optional @kotlinx.serialization.SerialName("accent_3") @kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor? accent3, optional @kotlinx.serialization.SerialName("close_button") @kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor? closeButton, optional @kotlinx.serialization.SerialName("tier_control_background") @kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor? tierControlBackground, optional @kotlinx.serialization.SerialName("tier_control_foreground") @kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor? tierControlForeground, optional @kotlinx.serialization.SerialName("tier_control_selected_background") @kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor? tierControlSelectedBackground, optional @kotlinx.serialization.SerialName("tier_control_selected_foreground") @kotlinx.serialization.Serializable(with=PaywallColor.Serializer::class) com.revenuecat.purchases.paywalls.PaywallColor? tierControlSelectedForeground);
    method public com.revenuecat.purchases.paywalls.PaywallColor component1();
    method public com.revenuecat.purchases.paywalls.PaywallColor? component10();
    method public com.revenuecat.purchases.paywalls.PaywallColor? component11();
    method public com.revenuecat.purchases.paywalls.PaywallColor? component12();
    method public com.revenuecat.purchases.paywalls.PaywallColor? component13();
    method public com.revenuecat.purchases.paywalls.PaywallColor? component14();
    method public com.revenuecat.purchases.paywalls.PaywallColor? component15();
    method public com.revenuecat.purchases.paywalls.PaywallColor component2();
    method public com.revenuecat.purchases.paywalls.PaywallColor? component3();
    method public com.revenuecat.purchases.paywalls.PaywallColor? component4();
    method public com.revenuecat.purchases.paywalls.PaywallColor component5();
    method public com.revenuecat.purchases.paywalls.PaywallColor component6();
    method public com.revenuecat.purchases.paywalls.PaywallColor? component7();
    method public com.revenuecat.purchases.paywalls.PaywallColor? component8();
    method public com.revenuecat.purchases.paywalls.PaywallColor? component9();
    method public com.revenuecat.purchases.paywalls.PaywallData.Configuration.Colors copy(com.revenuecat.purchases.paywalls.PaywallColor background, com.revenuecat.purchases.paywalls.PaywallColor text1, com.revenuecat.purchases.paywalls.PaywallColor? text2, com.revenuecat.purchases.paywalls.PaywallColor? text3, com.revenuecat.purchases.paywalls.PaywallColor callToActionBackground, com.revenuecat.purchases.paywalls.PaywallColor callToActionForeground, com.revenuecat.purchases.paywalls.PaywallColor? callToActionSecondaryBackground, com.revenuecat.purchases.paywalls.PaywallColor? accent1, com.revenuecat.purchases.paywalls.PaywallColor? accent2, com.revenuecat.purchases.paywalls.PaywallColor? accent3, com.revenuecat.purchases.paywalls.PaywallColor? closeButton, com.revenuecat.purchases.paywalls.PaywallColor? tierControlBackground, com.revenuecat.purchases.paywalls.PaywallColor? tierControlForeground, com.revenuecat.purchases.paywalls.PaywallColor? tierControlSelectedBackground, com.revenuecat.purchases.paywalls.PaywallColor? tierControlSelectedForeground);
    method public com.revenuecat.purchases.paywalls.PaywallColor? getAccent1();
    method public com.revenuecat.purchases.paywalls.PaywallColor? getAccent2();
    method public com.revenuecat.purchases.paywalls.PaywallColor? getAccent3();
    method public com.revenuecat.purchases.paywalls.PaywallColor getBackground();
    method public com.revenuecat.purchases.paywalls.PaywallColor getCallToActionBackground();
    method public com.revenuecat.purchases.paywalls.PaywallColor getCallToActionForeground();
    method public com.revenuecat.purchases.paywalls.PaywallColor? getCallToActionSecondaryBackground();
    method public com.revenuecat.purchases.paywalls.PaywallColor? getCloseButton();
    method public com.revenuecat.purchases.paywalls.PaywallColor getText1();
    method public com.revenuecat.purchases.paywalls.PaywallColor? getText2();
    method public com.revenuecat.purchases.paywalls.PaywallColor? getText3();
    method public com.revenuecat.purchases.paywalls.PaywallColor? getTierControlBackground();
    method public com.revenuecat.purchases.paywalls.PaywallColor? getTierControlForeground();
    method public com.revenuecat.purchases.paywalls.PaywallColor? getTierControlSelectedBackground();
    method public com.revenuecat.purchases.paywalls.PaywallColor? getTierControlSelectedForeground();
    property public final com.revenuecat.purchases.paywalls.PaywallColor? accent1;
    property public final com.revenuecat.purchases.paywalls.PaywallColor? accent2;
    property public final com.revenuecat.purchases.paywalls.PaywallColor? accent3;
    property public final com.revenuecat.purchases.paywalls.PaywallColor background;
    property public final com.revenuecat.purchases.paywalls.PaywallColor callToActionBackground;
    property public final com.revenuecat.purchases.paywalls.PaywallColor callToActionForeground;
    property public final com.revenuecat.purchases.paywalls.PaywallColor? callToActionSecondaryBackground;
    property public final com.revenuecat.purchases.paywalls.PaywallColor? closeButton;
    property public final com.revenuecat.purchases.paywalls.PaywallColor text1;
    property public final com.revenuecat.purchases.paywalls.PaywallColor? text2;
    property public final com.revenuecat.purchases.paywalls.PaywallColor? text3;
    property public final com.revenuecat.purchases.paywalls.PaywallColor? tierControlBackground;
    property public final com.revenuecat.purchases.paywalls.PaywallColor? tierControlForeground;
    property public final com.revenuecat.purchases.paywalls.PaywallColor? tierControlSelectedBackground;
    property public final com.revenuecat.purchases.paywalls.PaywallColor? tierControlSelectedForeground;
  }

  @kotlinx.serialization.Serializable public static final class PaywallData.Configuration.Images {
    ctor public PaywallData.Configuration.Images(optional @kotlinx.serialization.Serializable(with=EmptyStringToNullSerializer::class) String? header, optional @kotlinx.serialization.Serializable(with=EmptyStringToNullSerializer::class) String? background, optional @kotlinx.serialization.Serializable(with=EmptyStringToNullSerializer::class) String? icon);
    method public String? component1();
    method public String? component2();
    method public String? component3();
    method public com.revenuecat.purchases.paywalls.PaywallData.Configuration.Images copy(String? header, String? background, String? icon);
    method public String? getBackground();
    method public String? getHeader();
    method public String? getIcon();
    property public final String? background;
    property public final String? header;
    property public final String? icon;
  }

  @kotlinx.serialization.Serializable public static final class PaywallData.Configuration.Tier {
    ctor public PaywallData.Configuration.Tier(String id, @kotlinx.serialization.SerialName("packages") java.util.List<java.lang.String> packageIds, @kotlinx.serialization.SerialName("default_package") String defaultPackageId);
    method public String component1();
    method public java.util.List<java.lang.String> component2();
    method public String component3();
    method public com.revenuecat.purchases.paywalls.PaywallData.Configuration.Tier copy(String id, java.util.List<java.lang.String> packageIds, String defaultPackageId);
    method public String getDefaultPackageId();
    method public String getId();
    method public java.util.List<java.lang.String> getPackageIds();
    property public final String defaultPackageId;
    property public final String id;
    property public final java.util.List<java.lang.String> packageIds;
  }

  @kotlinx.serialization.Serializable public static final class PaywallData.LocalizedConfiguration {
    ctor public PaywallData.LocalizedConfiguration(String title, optional @kotlinx.serialization.Serializable(with=EmptyStringToNullSerializer::class) String? subtitle, @kotlinx.serialization.SerialName("call_to_action") String callToAction, optional @kotlinx.serialization.SerialName("call_to_action_with_intro_offer") @kotlinx.serialization.Serializable(with=EmptyStringToNullSerializer::class) String? callToActionWithIntroOffer, optional @kotlinx.serialization.SerialName("call_to_action_with_multiple_intro_offers") @kotlinx.serialization.Serializable(with=EmptyStringToNullSerializer::class) String? callToActionWithMultipleIntroOffers, optional @kotlinx.serialization.SerialName("offer_details") @kotlinx.serialization.Serializable(with=EmptyStringToNullSerializer::class) String? offerDetails, optional @kotlinx.serialization.SerialName("offer_details_with_intro_offer") @kotlinx.serialization.Serializable(with=EmptyStringToNullSerializer::class) String? offerDetailsWithIntroOffer, optional @kotlinx.serialization.SerialName("offer_details_with_multiple_intro_offers") @kotlinx.serialization.Serializable(with=EmptyStringToNullSerializer::class) String? offerDetailsWithMultipleIntroOffers, optional @kotlinx.serialization.SerialName("offer_name") @kotlinx.serialization.Serializable(with=EmptyStringToNullSerializer::class) String? offerName, optional java.util.List<com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration.Feature> features, optional @kotlinx.serialization.SerialName("tier_name") @kotlinx.serialization.Serializable(with=EmptyStringToNullSerializer::class) String? tierName, optional @kotlinx.serialization.SerialName("offer_overrides") java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration.OfferOverride> offerOverrides);
    method public String component1();
    method public java.util.List<com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration.Feature> component10();
    method public String? component11();
    method public java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration.OfferOverride> component12();
    method public String? component2();
    method public String component3();
    method public String? component4();
    method public String? component5();
    method public String? component6();
    method public String? component7();
    method public String? component8();
    method public String? component9();
    method public com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration copy(String title, String? subtitle, String callToAction, String? callToActionWithIntroOffer, String? callToActionWithMultipleIntroOffers, String? offerDetails, String? offerDetailsWithIntroOffer, String? offerDetailsWithMultipleIntroOffers, String? offerName, java.util.List<com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration.Feature> features, String? tierName, java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration.OfferOverride> offerOverrides);
    method public String getCallToAction();
    method public String? getCallToActionWithIntroOffer();
    method public String? getCallToActionWithMultipleIntroOffers();
    method public java.util.List<com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration.Feature> getFeatures();
    method public String? getOfferDetails();
    method public String? getOfferDetailsWithIntroOffer();
    method public String? getOfferDetailsWithMultipleIntroOffers();
    method public String? getOfferName();
    method public java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration.OfferOverride> getOfferOverrides();
    method public String? getSubtitle();
    method public String? getTierName();
    method public String getTitle();
    property public final String callToAction;
    property public final String? callToActionWithIntroOffer;
    property public final String? callToActionWithMultipleIntroOffers;
    property public final java.util.List<com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration.Feature> features;
    property public final String? offerDetails;
    property public final String? offerDetailsWithIntroOffer;
    property public final String? offerDetailsWithMultipleIntroOffers;
    property public final String? offerName;
    property public final java.util.Map<java.lang.String,com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration.OfferOverride> offerOverrides;
    property public final String? subtitle;
    property public final String? tierName;
    property public final String title;
  }

  @kotlinx.serialization.Serializable public static final class PaywallData.LocalizedConfiguration.Feature {
    ctor public PaywallData.LocalizedConfiguration.Feature(String title, optional String? content, optional @kotlinx.serialization.SerialName("icon_id") String? iconID);
    method public String component1();
    method public String? component2();
    method public String? component3();
    method public com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration.Feature copy(String title, String? content, String? iconID);
    method public String? getContent();
    method public String? getIconID();
    method public String getTitle();
    property public final String? content;
    property public final String? iconID;
    property public final String title;
  }

  @kotlinx.serialization.Serializable public static final class PaywallData.LocalizedConfiguration.OfferOverride {
    ctor public PaywallData.LocalizedConfiguration.OfferOverride(@kotlinx.serialization.SerialName("offer_name") String offerName, @kotlinx.serialization.SerialName("offer_details") String offerDetails, optional @kotlinx.serialization.SerialName("offer_details_with_intro_offer") @kotlinx.serialization.Serializable(with=EmptyStringToNullSerializer::class) String? offerDetailsWithIntroOffer, optional @kotlinx.serialization.SerialName("offer_details_with_multiple_intro_offers") @kotlinx.serialization.Serializable(with=EmptyStringToNullSerializer::class) String? offerDetailsWithMultipleIntroOffers, optional @kotlinx.serialization.SerialName("offer_badge") @kotlinx.serialization.Serializable(with=EmptyStringToNullSerializer::class) String? offerBadge);
    method public String component1();
    method public String component2();
    method public String? component3();
    method public String? component4();
    method public String? component5();
    method public com.revenuecat.purchases.paywalls.PaywallData.LocalizedConfiguration.OfferOverride copy(String offerName, String offerDetails, String? offerDetailsWithIntroOffer, String? offerDetailsWithMultipleIntroOffers, String? offerBadge);
    method public String? getOfferBadge();
    method public String getOfferDetails();
    method public String? getOfferDetailsWithIntroOffer();
    method public String? getOfferDetailsWithMultipleIntroOffers();
    method public String getOfferName();
    property public final String? offerBadge;
    property public final String offerDetails;
    property public final String? offerDetailsWithIntroOffer;
    property public final String? offerDetailsWithMultipleIntroOffers;
    property public final String offerName;
  }

  public final class PaywallDataTest {
    ctor public PaywallDataTest();
    method public void Chinese localization();
    method public void decodes empty images as null();
    method public void does not fail to decode invalid URLs();
    method public void does not return a locale if no matching language();
    method public void finds locale if it only has language();
    method public void if current locale is missing it loads available locale();
    method public void if current locale is missing it loads default locale();
    method public void localized configuration finds locale with different region();
    method public void paywall color can be created from a ColorInt();
    method public void test PaywallData properties();
  }

}

package com.revenuecat.purchases.paywalls.components {

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("button") @kotlinx.serialization.Serializable public final class ButtonComponent implements com.revenuecat.purchases.paywalls.components.PaywallComponent {
    ctor public ButtonComponent(com.revenuecat.purchases.paywalls.components.ButtonComponent.Action action, com.revenuecat.purchases.paywalls.components.StackComponent stack);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable(with=ActionSerializer::class) public static sealed interface ButtonComponent.Action {
  }

  @kotlinx.serialization.Serializable public static final class ButtonComponent.Action.NavigateBack implements com.revenuecat.purchases.paywalls.components.ButtonComponent.Action {
    field public static final com.revenuecat.purchases.paywalls.components.ButtonComponent.Action.NavigateBack INSTANCE;
  }

  @kotlinx.serialization.Serializable public static final class ButtonComponent.Action.NavigateTo implements com.revenuecat.purchases.paywalls.components.ButtonComponent.Action {
    ctor public ButtonComponent.Action.NavigateTo(com.revenuecat.purchases.paywalls.components.ButtonComponent.Destination destination);
    method public com.revenuecat.purchases.paywalls.components.ButtonComponent.Destination component1();
    method public com.revenuecat.purchases.paywalls.components.ButtonComponent.Action.NavigateTo copy(com.revenuecat.purchases.paywalls.components.ButtonComponent.Destination destination);
  }

  @kotlinx.serialization.Serializable public static final class ButtonComponent.Action.RestorePurchases implements com.revenuecat.purchases.paywalls.components.ButtonComponent.Action {
    field public static final com.revenuecat.purchases.paywalls.components.ButtonComponent.Action.RestorePurchases INSTANCE;
  }

  @kotlinx.serialization.Serializable public static final class ButtonComponent.Action.Unknown implements com.revenuecat.purchases.paywalls.components.ButtonComponent.Action {
    field public static final com.revenuecat.purchases.paywalls.components.ButtonComponent.Action.Unknown INSTANCE;
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable public static sealed interface ButtonComponent.Destination {
  }

  @kotlinx.serialization.Serializable public static final class ButtonComponent.Destination.CustomerCenter implements com.revenuecat.purchases.paywalls.components.ButtonComponent.Destination {
    field public static final com.revenuecat.purchases.paywalls.components.ButtonComponent.Destination.CustomerCenter INSTANCE;
  }

  @kotlinx.serialization.Serializable public static final class ButtonComponent.Destination.PrivacyPolicy implements com.revenuecat.purchases.paywalls.components.ButtonComponent.Destination {
    ctor public ButtonComponent.Destination.PrivacyPolicy(String urlLid, com.revenuecat.purchases.paywalls.components.ButtonComponent.UrlMethod method);
    method public String component1-z7Tp-4o();
    method public com.revenuecat.purchases.paywalls.components.ButtonComponent.UrlMethod component2();
    method public com.revenuecat.purchases.paywalls.components.ButtonComponent.Destination.PrivacyPolicy copy-26kQY28(String urlLid, com.revenuecat.purchases.paywalls.components.ButtonComponent.UrlMethod method);
  }

  @kotlinx.serialization.Serializable public static final class ButtonComponent.Destination.Terms implements com.revenuecat.purchases.paywalls.components.ButtonComponent.Destination {
    ctor public ButtonComponent.Destination.Terms(String urlLid, com.revenuecat.purchases.paywalls.components.ButtonComponent.UrlMethod method);
    method public String component1-z7Tp-4o();
    method public com.revenuecat.purchases.paywalls.components.ButtonComponent.UrlMethod component2();
    method public com.revenuecat.purchases.paywalls.components.ButtonComponent.Destination.Terms copy-26kQY28(String urlLid, com.revenuecat.purchases.paywalls.components.ButtonComponent.UrlMethod method);
  }

  @kotlinx.serialization.Serializable public static final class ButtonComponent.Destination.Unknown implements com.revenuecat.purchases.paywalls.components.ButtonComponent.Destination {
    field public static final com.revenuecat.purchases.paywalls.components.ButtonComponent.Destination.Unknown INSTANCE;
  }

  @kotlinx.serialization.Serializable public static final class ButtonComponent.Destination.Url implements com.revenuecat.purchases.paywalls.components.ButtonComponent.Destination {
    ctor public ButtonComponent.Destination.Url(String urlLid, com.revenuecat.purchases.paywalls.components.ButtonComponent.UrlMethod method);
    method public String component1-z7Tp-4o();
    method public com.revenuecat.purchases.paywalls.components.ButtonComponent.UrlMethod component2();
    method public com.revenuecat.purchases.paywalls.components.ButtonComponent.Destination.Url copy-26kQY28(String urlLid, com.revenuecat.purchases.paywalls.components.ButtonComponent.UrlMethod method);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable(with=UrlMethodDeserializer::class) public enum ButtonComponent.UrlMethod {
    method public static com.revenuecat.purchases.paywalls.components.ButtonComponent.UrlMethod valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.paywalls.components.ButtonComponent.UrlMethod[] values();
    enum_constant public static final com.revenuecat.purchases.paywalls.components.ButtonComponent.UrlMethod DEEP_LINK;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.ButtonComponent.UrlMethod EXTERNAL_BROWSER;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.ButtonComponent.UrlMethod IN_APP_BROWSER;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.ButtonComponent.UrlMethod UNKNOWN;
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("carousel") @kotlinx.serialization.Serializable public final class CarouselComponent implements com.revenuecat.purchases.paywalls.components.PaywallComponent {
    ctor public CarouselComponent(java.util.List<com.revenuecat.purchases.paywalls.components.StackComponent> pages, optional Boolean? visible, optional @kotlinx.serialization.SerialName("initial_page_index") Integer? initialPageIndex, @kotlinx.serialization.SerialName("page_alignment") com.revenuecat.purchases.paywalls.components.properties.VerticalAlignment pageAlignment, optional com.revenuecat.purchases.paywalls.components.properties.Size size, optional @kotlinx.serialization.SerialName("page_peek") Integer? pagePeek, optional @kotlinx.serialization.SerialName("page_spacing") Float? pageSpacing, optional @kotlinx.serialization.SerialName("background_color") com.revenuecat.purchases.paywalls.components.properties.ColorScheme? backgroundColor, optional com.revenuecat.purchases.paywalls.components.common.Background? background, optional com.revenuecat.purchases.paywalls.components.properties.Padding padding, optional com.revenuecat.purchases.paywalls.components.properties.Padding margin, optional com.revenuecat.purchases.paywalls.components.properties.Shape? shape, optional com.revenuecat.purchases.paywalls.components.properties.Border? border, optional com.revenuecat.purchases.paywalls.components.properties.Shadow? shadow, optional @kotlinx.serialization.SerialName("page_control") com.revenuecat.purchases.paywalls.components.CarouselComponent.PageControl? pageControl, optional Boolean? loop, optional @kotlinx.serialization.SerialName("auto_advance") com.revenuecat.purchases.paywalls.components.CarouselComponent.AutoAdvancePages? autoAdvance, optional java.util.List<com.revenuecat.purchases.paywalls.components.common.ComponentOverride<com.revenuecat.purchases.paywalls.components.PartialCarouselComponent>> overrides);
  }

  @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public static final class CarouselComponent.AutoAdvancePages {
    ctor public CarouselComponent.AutoAdvancePages(@kotlinx.serialization.SerialName("ms_time_per_page") int msTimePerPage, @kotlinx.serialization.SerialName("ms_transition_time") int msTransitionTime);
  }

  @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public static final class CarouselComponent.PageControl {
    ctor public CarouselComponent.PageControl(com.revenuecat.purchases.paywalls.components.CarouselComponent.PageControl.Position position, optional Integer? spacing, optional com.revenuecat.purchases.paywalls.components.properties.Padding padding, optional com.revenuecat.purchases.paywalls.components.properties.Padding margin, optional @kotlinx.serialization.SerialName("background_color") com.revenuecat.purchases.paywalls.components.properties.ColorScheme? backgroundColor, optional com.revenuecat.purchases.paywalls.components.properties.Shape? shape, optional com.revenuecat.purchases.paywalls.components.properties.Border? border, optional com.revenuecat.purchases.paywalls.components.properties.Shadow? shadow, com.revenuecat.purchases.paywalls.components.CarouselComponent.PageControl.Indicator active, com.revenuecat.purchases.paywalls.components.CarouselComponent.PageControl.Indicator default);
  }

  @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public static final class CarouselComponent.PageControl.Indicator {
    ctor public CarouselComponent.PageControl.Indicator(int width, int height, com.revenuecat.purchases.paywalls.components.properties.ColorScheme color);
  }

  @kotlinx.serialization.Serializable(with=CarouselPageControlPositionDeserializer::class) public enum CarouselComponent.PageControl.Position {
    method public static com.revenuecat.purchases.paywalls.components.CarouselComponent.PageControl.Position valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.paywalls.components.CarouselComponent.PageControl.Position[] values();
    enum_constant public static final com.revenuecat.purchases.paywalls.components.CarouselComponent.PageControl.Position BOTTOM;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.CarouselComponent.PageControl.Position TOP;
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("icon") @kotlinx.serialization.Serializable public final class IconComponent implements com.revenuecat.purchases.paywalls.components.PaywallComponent {
    ctor public IconComponent(@kotlinx.serialization.SerialName("base_url") String baseUrl, @kotlinx.serialization.SerialName("icon_name") String iconName, com.revenuecat.purchases.paywalls.components.IconComponent.Formats formats, optional Boolean? visible, optional com.revenuecat.purchases.paywalls.components.properties.Size size, optional com.revenuecat.purchases.paywalls.components.properties.ColorScheme? color, optional com.revenuecat.purchases.paywalls.components.properties.Padding padding, optional com.revenuecat.purchases.paywalls.components.properties.Padding margin, optional @kotlinx.serialization.SerialName("icon_background") com.revenuecat.purchases.paywalls.components.IconComponent.IconBackground? iconBackground, optional java.util.List<com.revenuecat.purchases.paywalls.components.common.ComponentOverride<com.revenuecat.purchases.paywalls.components.PartialIconComponent>> overrides);
  }

  @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public static final class IconComponent.Formats {
    ctor public IconComponent.Formats(String webp);
  }

  @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public static final class IconComponent.IconBackground {
    ctor public IconComponent.IconBackground(com.revenuecat.purchases.paywalls.components.properties.ColorScheme color, com.revenuecat.purchases.paywalls.components.properties.MaskShape shape, optional com.revenuecat.purchases.paywalls.components.properties.Border? border, optional com.revenuecat.purchases.paywalls.components.properties.Shadow? shadow);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("image") @kotlinx.serialization.Serializable public final class ImageComponent implements com.revenuecat.purchases.paywalls.components.PaywallComponent {
    ctor public ImageComponent(com.revenuecat.purchases.paywalls.components.properties.ThemeImageUrls source, optional Boolean? visible, optional com.revenuecat.purchases.paywalls.components.properties.Size size, optional @kotlinx.serialization.SerialName("override_source_lid") String? overrideSourceLid, optional @kotlinx.serialization.SerialName("mask_shape") com.revenuecat.purchases.paywalls.components.properties.MaskShape? maskShape, optional @kotlinx.serialization.SerialName("color_overlay") com.revenuecat.purchases.paywalls.components.properties.ColorScheme? colorOverlay, optional @kotlinx.serialization.SerialName("fit_mode") com.revenuecat.purchases.paywalls.components.properties.FitMode fitMode, optional com.revenuecat.purchases.paywalls.components.properties.Padding padding, optional com.revenuecat.purchases.paywalls.components.properties.Padding margin, optional com.revenuecat.purchases.paywalls.components.properties.Border? border, optional com.revenuecat.purchases.paywalls.components.properties.Shadow? shadow, optional java.util.List<com.revenuecat.purchases.paywalls.components.common.ComponentOverride<com.revenuecat.purchases.paywalls.components.PartialImageComponent>> overrides);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("package") @kotlinx.serialization.Serializable public final class PackageComponent implements com.revenuecat.purchases.paywalls.components.PaywallComponent {
    ctor public PackageComponent(@kotlinx.serialization.SerialName("package_id") String packageId, @kotlinx.serialization.SerialName("is_selected_by_default") boolean isSelectedByDefault, com.revenuecat.purchases.paywalls.components.StackComponent stack);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class PartialCarouselComponent implements com.revenuecat.purchases.paywalls.components.PartialComponent {
    ctor public PartialCarouselComponent(optional Boolean? visible, optional @kotlinx.serialization.SerialName("initial_page_index") Integer? initialPageIndex, optional @kotlinx.serialization.SerialName("page_alignment") com.revenuecat.purchases.paywalls.components.properties.VerticalAlignment? pageAlignment, optional com.revenuecat.purchases.paywalls.components.properties.Size? size, optional @kotlinx.serialization.SerialName("page_peek") Integer? pagePeek, optional @kotlinx.serialization.SerialName("page_spacing") Float? pageSpacing, optional @kotlinx.serialization.SerialName("background_color") com.revenuecat.purchases.paywalls.components.properties.ColorScheme? backgroundColor, optional com.revenuecat.purchases.paywalls.components.common.Background? background, optional com.revenuecat.purchases.paywalls.components.properties.Padding? padding, optional com.revenuecat.purchases.paywalls.components.properties.Padding? margin, optional com.revenuecat.purchases.paywalls.components.properties.Shape? shape, optional com.revenuecat.purchases.paywalls.components.properties.Border? border, optional com.revenuecat.purchases.paywalls.components.properties.Shadow? shadow, optional @kotlinx.serialization.SerialName("page_control") com.revenuecat.purchases.paywalls.components.CarouselComponent.PageControl? pageControl, optional Boolean? loop, optional @kotlinx.serialization.SerialName("auto_advance") com.revenuecat.purchases.paywalls.components.CarouselComponent.AutoAdvancePages? autoAdvance);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI public sealed interface PartialComponent {
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class PartialIconComponent implements com.revenuecat.purchases.paywalls.components.PartialComponent {
    ctor public PartialIconComponent(optional Boolean? visible, optional @kotlinx.serialization.SerialName("base_url") String? baseUrl, optional @kotlinx.serialization.SerialName("icon_name") String? iconName, optional com.revenuecat.purchases.paywalls.components.IconComponent.Formats? formats, optional com.revenuecat.purchases.paywalls.components.properties.Size? size, optional com.revenuecat.purchases.paywalls.components.properties.ColorScheme? color, optional com.revenuecat.purchases.paywalls.components.properties.Padding? padding, optional com.revenuecat.purchases.paywalls.components.properties.Padding? margin, optional @kotlinx.serialization.SerialName("icon_background") com.revenuecat.purchases.paywalls.components.IconComponent.IconBackground? iconBackground);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class PartialImageComponent implements com.revenuecat.purchases.paywalls.components.PartialComponent {
    ctor public PartialImageComponent(optional Boolean? visible, optional com.revenuecat.purchases.paywalls.components.properties.ThemeImageUrls? source, optional com.revenuecat.purchases.paywalls.components.properties.Size? size, optional @kotlinx.serialization.SerialName("override_source_lid") String? overrideSourceLid, optional @kotlinx.serialization.SerialName("fit_mode") com.revenuecat.purchases.paywalls.components.properties.FitMode? fitMode, optional @kotlinx.serialization.SerialName("mask_shape") com.revenuecat.purchases.paywalls.components.properties.MaskShape? maskShape, optional @kotlinx.serialization.SerialName("color_overlay") com.revenuecat.purchases.paywalls.components.properties.ColorScheme? colorOverlay, optional com.revenuecat.purchases.paywalls.components.properties.Padding? padding, optional com.revenuecat.purchases.paywalls.components.properties.Padding? margin, optional com.revenuecat.purchases.paywalls.components.properties.Border? border, optional com.revenuecat.purchases.paywalls.components.properties.Shadow? shadow);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class PartialStackComponent implements com.revenuecat.purchases.paywalls.components.PartialComponent {
    ctor public PartialStackComponent(optional Boolean? visible, optional com.revenuecat.purchases.paywalls.components.properties.Dimension? dimension, optional com.revenuecat.purchases.paywalls.components.properties.Size? size, optional Float? spacing, optional @kotlinx.serialization.SerialName("background_color") com.revenuecat.purchases.paywalls.components.properties.ColorScheme? backgroundColor, optional com.revenuecat.purchases.paywalls.components.common.Background? background, optional com.revenuecat.purchases.paywalls.components.properties.Padding? padding, optional com.revenuecat.purchases.paywalls.components.properties.Padding? margin, optional com.revenuecat.purchases.paywalls.components.properties.Shape? shape, optional com.revenuecat.purchases.paywalls.components.properties.Border? border, optional com.revenuecat.purchases.paywalls.components.properties.Shadow? shadow, optional com.revenuecat.purchases.paywalls.components.properties.Badge? badge, optional com.revenuecat.purchases.paywalls.components.StackComponent.Overflow? overflow);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class PartialTabsComponent implements com.revenuecat.purchases.paywalls.components.PartialComponent {
    ctor public PartialTabsComponent(optional Boolean? visible, optional com.revenuecat.purchases.paywalls.components.properties.Size? size, optional com.revenuecat.purchases.paywalls.components.properties.Padding? padding, optional com.revenuecat.purchases.paywalls.components.properties.Padding? margin, optional @kotlinx.serialization.SerialName("background_color") com.revenuecat.purchases.paywalls.components.properties.ColorScheme? backgroundColor, optional com.revenuecat.purchases.paywalls.components.common.Background? background, optional com.revenuecat.purchases.paywalls.components.properties.Shape? shape, optional com.revenuecat.purchases.paywalls.components.properties.Border? border, optional com.revenuecat.purchases.paywalls.components.properties.Shadow? shadow);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class PartialTextComponent implements com.revenuecat.purchases.paywalls.components.PartialComponent {
    ctor public PartialTextComponent(optional Boolean? visible, optional @kotlinx.serialization.SerialName("text_lid") String? text, optional com.revenuecat.purchases.paywalls.components.properties.ColorScheme? color, optional @kotlinx.serialization.SerialName("background_color") com.revenuecat.purchases.paywalls.components.properties.ColorScheme? backgroundColor, optional @kotlinx.serialization.SerialName("font_name") String? fontName, optional @kotlinx.serialization.SerialName("font_weight") com.revenuecat.purchases.paywalls.components.properties.FontWeight? fontWeight, optional @kotlinx.serialization.SerialName("font_size") @kotlinx.serialization.Serializable(with=FontSizeSerializer::class) Integer? fontSize, optional @kotlinx.serialization.SerialName("horizontal_alignment") com.revenuecat.purchases.paywalls.components.properties.HorizontalAlignment? horizontalAlignment, optional com.revenuecat.purchases.paywalls.components.properties.Size? size, optional com.revenuecat.purchases.paywalls.components.properties.Padding? padding, optional com.revenuecat.purchases.paywalls.components.properties.Padding? margin);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class PartialTimelineComponent implements com.revenuecat.purchases.paywalls.components.PartialComponent {
    ctor public PartialTimelineComponent(optional Boolean? visible, optional @kotlinx.serialization.SerialName("item_spacing") Integer? itemSpacing, optional @kotlinx.serialization.SerialName("text_spacing") Integer? textSpacing, optional @kotlinx.serialization.SerialName("column_gutter") Integer? columnGutter, optional @kotlinx.serialization.SerialName("icon_alignment") com.revenuecat.purchases.paywalls.components.TimelineComponent.IconAlignment? iconAlignment, optional com.revenuecat.purchases.paywalls.components.properties.Size? size, optional com.revenuecat.purchases.paywalls.components.properties.Padding? padding, optional com.revenuecat.purchases.paywalls.components.properties.Padding? margin);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class PartialTimelineComponentItem implements com.revenuecat.purchases.paywalls.components.PartialComponent {
    ctor public PartialTimelineComponentItem(optional Boolean? visible, optional com.revenuecat.purchases.paywalls.components.TimelineComponent.Connector? connector);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable(with=PaywallComponentSerializer::class) public sealed interface PaywallComponent {
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("purchase_button") @kotlinx.serialization.Serializable public final class PurchaseButtonComponent implements com.revenuecat.purchases.paywalls.components.PaywallComponent {
    ctor public PurchaseButtonComponent(com.revenuecat.purchases.paywalls.components.StackComponent stack);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("stack") @kotlinx.serialization.Serializable public final class StackComponent implements com.revenuecat.purchases.paywalls.components.PaywallComponent {
    ctor public StackComponent(java.util.List<? extends com.revenuecat.purchases.paywalls.components.PaywallComponent> components, optional Boolean? visible, optional com.revenuecat.purchases.paywalls.components.properties.Dimension dimension, optional com.revenuecat.purchases.paywalls.components.properties.Size size, optional Float? spacing, optional @kotlinx.serialization.SerialName("background_color") com.revenuecat.purchases.paywalls.components.properties.ColorScheme? backgroundColor, optional com.revenuecat.purchases.paywalls.components.common.Background? background, optional com.revenuecat.purchases.paywalls.components.properties.Padding padding, optional com.revenuecat.purchases.paywalls.components.properties.Padding margin, optional com.revenuecat.purchases.paywalls.components.properties.Shape? shape, optional com.revenuecat.purchases.paywalls.components.properties.Border? border, optional com.revenuecat.purchases.paywalls.components.properties.Shadow? shadow, optional com.revenuecat.purchases.paywalls.components.properties.Badge? badge, optional com.revenuecat.purchases.paywalls.components.StackComponent.Overflow? overflow, optional java.util.List<com.revenuecat.purchases.paywalls.components.common.ComponentOverride<com.revenuecat.purchases.paywalls.components.PartialStackComponent>> overrides);
  }

  @kotlinx.serialization.Serializable(with=StackOverflowDeserializer::class) public enum StackComponent.Overflow {
    method public static com.revenuecat.purchases.paywalls.components.StackComponent.Overflow valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.paywalls.components.StackComponent.Overflow[] values();
    enum_constant public static final com.revenuecat.purchases.paywalls.components.StackComponent.Overflow NONE;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.StackComponent.Overflow SCROLL;
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("sticky_footer") @kotlinx.serialization.Serializable public final class StickyFooterComponent implements com.revenuecat.purchases.paywalls.components.PaywallComponent {
    ctor public StickyFooterComponent(com.revenuecat.purchases.paywalls.components.StackComponent stack);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("tab_control_button") @kotlinx.serialization.Serializable public final class TabControlButtonComponent implements com.revenuecat.purchases.paywalls.components.PaywallComponent {
    ctor public TabControlButtonComponent(@kotlinx.serialization.SerialName("tab_index") int tabIndex, com.revenuecat.purchases.paywalls.components.StackComponent stack);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.SerialName("tab_control") @kotlinx.serialization.Serializable public final class TabControlComponent implements com.revenuecat.purchases.paywalls.components.PaywallComponent {
    field public static final com.revenuecat.purchases.paywalls.components.TabControlComponent INSTANCE;
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("tab_control_toggle") @kotlinx.serialization.Serializable public final class TabControlToggleComponent implements com.revenuecat.purchases.paywalls.components.PaywallComponent {
    ctor public TabControlToggleComponent(@kotlinx.serialization.SerialName("default_value") boolean defaultValue, @kotlinx.serialization.SerialName("thumb_color_on") com.revenuecat.purchases.paywalls.components.properties.ColorScheme thumbColorOn, @kotlinx.serialization.SerialName("thumb_color_off") com.revenuecat.purchases.paywalls.components.properties.ColorScheme thumbColorOff, @kotlinx.serialization.SerialName("track_color_on") com.revenuecat.purchases.paywalls.components.properties.ColorScheme trackColorOn, @kotlinx.serialization.SerialName("track_color_off") com.revenuecat.purchases.paywalls.components.properties.ColorScheme trackColorOff);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("tabs") @kotlinx.serialization.Serializable public final class TabsComponent implements com.revenuecat.purchases.paywalls.components.PaywallComponent {
    ctor public TabsComponent(optional Boolean? visible, optional com.revenuecat.purchases.paywalls.components.properties.Size size, optional com.revenuecat.purchases.paywalls.components.properties.Padding padding, optional com.revenuecat.purchases.paywalls.components.properties.Padding margin, optional @kotlinx.serialization.SerialName("background_color") com.revenuecat.purchases.paywalls.components.properties.ColorScheme? backgroundColor, optional com.revenuecat.purchases.paywalls.components.common.Background? background, optional com.revenuecat.purchases.paywalls.components.properties.Shape? shape, optional com.revenuecat.purchases.paywalls.components.properties.Border? border, optional com.revenuecat.purchases.paywalls.components.properties.Shadow? shadow, com.revenuecat.purchases.paywalls.components.TabsComponent.TabControl control, java.util.List<com.revenuecat.purchases.paywalls.components.TabsComponent.Tab> tabs, optional java.util.List<com.revenuecat.purchases.paywalls.components.common.ComponentOverride<com.revenuecat.purchases.paywalls.components.PartialTabsComponent>> overrides);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public static final class TabsComponent.Tab {
    ctor public TabsComponent.Tab(com.revenuecat.purchases.paywalls.components.StackComponent stack);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable public static sealed interface TabsComponent.TabControl {
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("buttons") @kotlinx.serialization.Serializable public static final class TabsComponent.TabControl.Buttons implements com.revenuecat.purchases.paywalls.components.TabsComponent.TabControl {
    ctor public TabsComponent.TabControl.Buttons(com.revenuecat.purchases.paywalls.components.StackComponent stack);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("toggle") @kotlinx.serialization.Serializable public static final class TabsComponent.TabControl.Toggle implements com.revenuecat.purchases.paywalls.components.TabsComponent.TabControl {
    ctor public TabsComponent.TabControl.Toggle(com.revenuecat.purchases.paywalls.components.StackComponent stack);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("text") @kotlinx.serialization.Serializable public final class TextComponent implements com.revenuecat.purchases.paywalls.components.PaywallComponent {
    ctor public TextComponent(@kotlinx.serialization.SerialName("text_lid") String text, com.revenuecat.purchases.paywalls.components.properties.ColorScheme color, optional Boolean? visible, optional @kotlinx.serialization.SerialName("background_color") com.revenuecat.purchases.paywalls.components.properties.ColorScheme? backgroundColor, optional @kotlinx.serialization.SerialName("font_name") String? fontName, optional @kotlinx.serialization.SerialName("font_weight") com.revenuecat.purchases.paywalls.components.properties.FontWeight fontWeight, optional @kotlinx.serialization.SerialName("font_size") @kotlinx.serialization.Serializable(with=FontSizeSerializer::class) int fontSize, optional @kotlinx.serialization.SerialName("horizontal_alignment") com.revenuecat.purchases.paywalls.components.properties.HorizontalAlignment horizontalAlignment, optional com.revenuecat.purchases.paywalls.components.properties.Size size, optional com.revenuecat.purchases.paywalls.components.properties.Padding padding, optional com.revenuecat.purchases.paywalls.components.properties.Padding margin, optional java.util.List<com.revenuecat.purchases.paywalls.components.common.ComponentOverride<com.revenuecat.purchases.paywalls.components.PartialTextComponent>> overrides);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("timeline") @kotlinx.serialization.Serializable public final class TimelineComponent implements com.revenuecat.purchases.paywalls.components.PaywallComponent {
    ctor public TimelineComponent(@kotlinx.serialization.SerialName("item_spacing") int itemSpacing, @kotlinx.serialization.SerialName("text_spacing") int textSpacing, @kotlinx.serialization.SerialName("column_gutter") int columnGutter, @kotlinx.serialization.SerialName("icon_alignment") com.revenuecat.purchases.paywalls.components.TimelineComponent.IconAlignment iconAlignment, optional Boolean? visible, optional com.revenuecat.purchases.paywalls.components.properties.Size size, optional com.revenuecat.purchases.paywalls.components.properties.Padding padding, optional com.revenuecat.purchases.paywalls.components.properties.Padding margin, optional java.util.List<com.revenuecat.purchases.paywalls.components.TimelineComponent.Item> items, optional java.util.List<com.revenuecat.purchases.paywalls.components.common.ComponentOverride<com.revenuecat.purchases.paywalls.components.PartialTimelineComponent>> overrides);
  }

  @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public static final class TimelineComponent.Connector {
    ctor public TimelineComponent.Connector(int width, com.revenuecat.purchases.paywalls.components.properties.Padding margin, com.revenuecat.purchases.paywalls.components.properties.ColorScheme color);
  }

  @kotlinx.serialization.Serializable(with=TimelineIconAlignmentDeserializer::class) public enum TimelineComponent.IconAlignment {
    method public static com.revenuecat.purchases.paywalls.components.TimelineComponent.IconAlignment valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.paywalls.components.TimelineComponent.IconAlignment[] values();
    enum_constant public static final com.revenuecat.purchases.paywalls.components.TimelineComponent.IconAlignment Title;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.TimelineComponent.IconAlignment TitleAndDescription;
  }

  @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public static final class TimelineComponent.Item {
    ctor public TimelineComponent.Item(com.revenuecat.purchases.paywalls.components.TextComponent title, optional Boolean? visible, optional com.revenuecat.purchases.paywalls.components.TextComponent? description, com.revenuecat.purchases.paywalls.components.IconComponent icon, optional com.revenuecat.purchases.paywalls.components.TimelineComponent.Connector? connector, optional java.util.List<com.revenuecat.purchases.paywalls.components.common.ComponentOverride<com.revenuecat.purchases.paywalls.components.PartialTimelineComponentItem>> overrides);
  }

}

package com.revenuecat.purchases.paywalls.components.common {

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable(with=BackgroundDeserializer::class) public sealed interface Background {
  }

  @kotlinx.serialization.Serializable public static final class Background.Color implements com.revenuecat.purchases.paywalls.components.common.Background {
    ctor public Background.Color(com.revenuecat.purchases.paywalls.components.properties.ColorScheme value);
    method public com.revenuecat.purchases.paywalls.components.properties.ColorScheme component1();
    method public com.revenuecat.purchases.paywalls.components.common.Background.Color copy(com.revenuecat.purchases.paywalls.components.properties.ColorScheme value);
  }

  @kotlinx.serialization.Serializable public static final class Background.Image implements com.revenuecat.purchases.paywalls.components.common.Background {
    ctor public Background.Image(com.revenuecat.purchases.paywalls.components.properties.ThemeImageUrls value, optional @kotlinx.serialization.SerialName("fit_mode") com.revenuecat.purchases.paywalls.components.properties.FitMode fitMode, optional @kotlinx.serialization.SerialName("color_overlay") com.revenuecat.purchases.paywalls.components.properties.ColorScheme? colorOverlay);
    method public com.revenuecat.purchases.paywalls.components.properties.ThemeImageUrls component1();
    method public com.revenuecat.purchases.paywalls.components.properties.FitMode component2();
    method public com.revenuecat.purchases.paywalls.components.properties.ColorScheme? component3();
    method public com.revenuecat.purchases.paywalls.components.common.Background.Image copy(com.revenuecat.purchases.paywalls.components.properties.ThemeImageUrls value, com.revenuecat.purchases.paywalls.components.properties.FitMode fitMode, com.revenuecat.purchases.paywalls.components.properties.ColorScheme? colorOverlay);
  }

  @kotlinx.serialization.Serializable public static final class Background.Unknown implements com.revenuecat.purchases.paywalls.components.common.Background {
    ctor public Background.Unknown(String type);
    method public String component1();
    method public com.revenuecat.purchases.paywalls.components.common.Background.Unknown copy(String type);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class ComponentOverride<T extends com.revenuecat.purchases.paywalls.components.PartialComponent> {
    ctor public ComponentOverride(java.util.List<? extends com.revenuecat.purchases.paywalls.components.common.ComponentOverride.Condition> conditions, T properties);
  }

  @kotlinx.serialization.Serializable(with=ConditionSerializer::class) public static sealed interface ComponentOverride.Condition {
  }

  @kotlinx.serialization.Serializable public static final class ComponentOverride.Condition.Compact implements com.revenuecat.purchases.paywalls.components.common.ComponentOverride.Condition {
    field public static final com.revenuecat.purchases.paywalls.components.common.ComponentOverride.Condition.Compact INSTANCE;
  }

  @kotlinx.serialization.Serializable public static final class ComponentOverride.Condition.Expanded implements com.revenuecat.purchases.paywalls.components.common.ComponentOverride.Condition {
    field public static final com.revenuecat.purchases.paywalls.components.common.ComponentOverride.Condition.Expanded INSTANCE;
  }

  @kotlinx.serialization.Serializable public static final class ComponentOverride.Condition.IntroOffer implements com.revenuecat.purchases.paywalls.components.common.ComponentOverride.Condition {
    field public static final com.revenuecat.purchases.paywalls.components.common.ComponentOverride.Condition.IntroOffer INSTANCE;
  }

  @kotlinx.serialization.Serializable public static final class ComponentOverride.Condition.Medium implements com.revenuecat.purchases.paywalls.components.common.ComponentOverride.Condition {
    field public static final com.revenuecat.purchases.paywalls.components.common.ComponentOverride.Condition.Medium INSTANCE;
  }

  @kotlinx.serialization.Serializable public static final class ComponentOverride.Condition.MultipleIntroOffers implements com.revenuecat.purchases.paywalls.components.common.ComponentOverride.Condition {
    field public static final com.revenuecat.purchases.paywalls.components.common.ComponentOverride.Condition.MultipleIntroOffers INSTANCE;
  }

  @kotlinx.serialization.Serializable public static final class ComponentOverride.Condition.Selected implements com.revenuecat.purchases.paywalls.components.common.ComponentOverride.Condition {
    field public static final com.revenuecat.purchases.paywalls.components.common.ComponentOverride.Condition.Selected INSTANCE;
  }

  @kotlinx.serialization.Serializable public static final class ComponentOverride.Condition.Unsupported implements com.revenuecat.purchases.paywalls.components.common.ComponentOverride.Condition {
    field public static final com.revenuecat.purchases.paywalls.components.common.ComponentOverride.Condition.Unsupported INSTANCE;
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class ComponentsConfig {
    ctor public ComponentsConfig(com.revenuecat.purchases.paywalls.components.common.PaywallComponentsConfig base);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlin.jvm.JvmInline @kotlinx.serialization.Serializable public final value class LocaleId {
    ctor public LocaleId(String value);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable(with=LocalizationDataSerializer::class) public sealed interface LocalizationData {
  }

  @kotlin.jvm.JvmInline @kotlinx.serialization.Serializable public static final value class LocalizationData.Image implements com.revenuecat.purchases.paywalls.components.common.LocalizationData {
    ctor public LocalizationData.Image(com.revenuecat.purchases.paywalls.components.properties.ThemeImageUrls value);
  }

  @kotlin.jvm.JvmInline @kotlinx.serialization.Serializable public static final value class LocalizationData.Text implements com.revenuecat.purchases.paywalls.components.common.LocalizationData {
    ctor public LocalizationData.Text(String value);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlin.jvm.JvmInline @kotlinx.serialization.Serializable public final value class LocalizationKey {
    ctor public LocalizationKey(String value);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class PaywallComponentsConfig {
    ctor public PaywallComponentsConfig(com.revenuecat.purchases.paywalls.components.StackComponent stack, com.revenuecat.purchases.paywalls.components.common.Background background, optional @kotlinx.serialization.SerialName("sticky_footer") com.revenuecat.purchases.paywalls.components.StickyFooterComponent? stickyFooter);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class PaywallComponentsData {
    ctor public PaywallComponentsData(@kotlinx.serialization.SerialName("template_name") String templateName, @kotlinx.serialization.SerialName("asset_base_url") @kotlinx.serialization.Serializable(with=URLSerializer::class) java.net.URL assetBaseURL, @kotlinx.serialization.SerialName("components_config") com.revenuecat.purchases.paywalls.components.common.ComponentsConfig componentsConfig, @kotlinx.serialization.SerialName("components_localizations") java.util.Map<com.revenuecat.purchases.paywalls.components.common.LocaleId,? extends java.util.Map<com.revenuecat.purchases.paywalls.components.common.LocalizationKey,? extends com.revenuecat.purchases.paywalls.components.common.LocalizationData>> componentsLocalizations, @kotlinx.serialization.SerialName("default_locale") String defaultLocaleIdentifier, optional int revision, optional @kotlinx.serialization.SerialName("zero_decimal_place_countries") @kotlinx.serialization.Serializable(with=GoogleListSerializer::class) java.util.List<java.lang.String> zeroDecimalPlaceCountries);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable public enum VariableLocalizationKey {
    method public static com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey[] values();
    enum_constant @kotlinx.serialization.SerialName("annual") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey ANNUAL;
    enum_constant @kotlinx.serialization.SerialName("annually") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey ANNUALLY;
    enum_constant @kotlinx.serialization.SerialName("annual_short") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey ANNUAL_SHORT;
    enum_constant @kotlinx.serialization.SerialName("daily") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey DAILY;
    enum_constant @kotlinx.serialization.SerialName("day") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey DAY;
    enum_constant @kotlinx.serialization.SerialName("day_short") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey DAY_SHORT;
    enum_constant @kotlinx.serialization.SerialName("free_price") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey FREE_PRICE;
    enum_constant @kotlinx.serialization.SerialName("lifetime") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey LIFETIME;
    enum_constant @kotlinx.serialization.SerialName("month") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey MONTH;
    enum_constant @kotlinx.serialization.SerialName("monthly") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey MONTHLY;
    enum_constant @kotlinx.serialization.SerialName("month_short") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey MONTH_SHORT;
    enum_constant @kotlinx.serialization.SerialName("num_days_short") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_DAYS_SHORT;
    enum_constant @kotlinx.serialization.SerialName("num_day_few") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_DAY_FEW;
    enum_constant @kotlinx.serialization.SerialName("num_day_many") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_DAY_MANY;
    enum_constant @kotlinx.serialization.SerialName("num_day_one") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_DAY_ONE;
    enum_constant @kotlinx.serialization.SerialName("num_day_other") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_DAY_OTHER;
    enum_constant @kotlinx.serialization.SerialName("num_day_two") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_DAY_TWO;
    enum_constant @kotlinx.serialization.SerialName("num_day_zero") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_DAY_ZERO;
    enum_constant @kotlinx.serialization.SerialName("num_months_short") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_MONTHS_SHORT;
    enum_constant @kotlinx.serialization.SerialName("num_month_few") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_MONTH_FEW;
    enum_constant @kotlinx.serialization.SerialName("num_month_many") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_MONTH_MANY;
    enum_constant @kotlinx.serialization.SerialName("num_month_one") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_MONTH_ONE;
    enum_constant @kotlinx.serialization.SerialName("num_month_other") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_MONTH_OTHER;
    enum_constant @kotlinx.serialization.SerialName("num_month_two") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_MONTH_TWO;
    enum_constant @kotlinx.serialization.SerialName("num_month_zero") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_MONTH_ZERO;
    enum_constant @kotlinx.serialization.SerialName("num_weeks_short") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_WEEKS_SHORT;
    enum_constant @kotlinx.serialization.SerialName("num_week_few") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_WEEK_FEW;
    enum_constant @kotlinx.serialization.SerialName("num_week_many") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_WEEK_MANY;
    enum_constant @kotlinx.serialization.SerialName("num_week_one") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_WEEK_ONE;
    enum_constant @kotlinx.serialization.SerialName("num_week_other") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_WEEK_OTHER;
    enum_constant @kotlinx.serialization.SerialName("num_week_two") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_WEEK_TWO;
    enum_constant @kotlinx.serialization.SerialName("num_week_zero") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_WEEK_ZERO;
    enum_constant @kotlinx.serialization.SerialName("num_years_short") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_YEARS_SHORT;
    enum_constant @kotlinx.serialization.SerialName("num_year_few") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_YEAR_FEW;
    enum_constant @kotlinx.serialization.SerialName("num_year_many") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_YEAR_MANY;
    enum_constant @kotlinx.serialization.SerialName("num_year_one") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_YEAR_ONE;
    enum_constant @kotlinx.serialization.SerialName("num_year_other") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_YEAR_OTHER;
    enum_constant @kotlinx.serialization.SerialName("num_year_two") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_YEAR_TWO;
    enum_constant @kotlinx.serialization.SerialName("num_year_zero") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey NUM_YEAR_ZERO;
    enum_constant @kotlinx.serialization.SerialName("percent") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey PERCENT;
    enum_constant @kotlinx.serialization.SerialName("week") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey WEEK;
    enum_constant @kotlinx.serialization.SerialName("weekly") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey WEEKLY;
    enum_constant @kotlinx.serialization.SerialName("week_short") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey WEEK_SHORT;
    enum_constant @kotlinx.serialization.SerialName("year") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey YEAR;
    enum_constant @kotlinx.serialization.SerialName("yearly") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey YEARLY;
    enum_constant @kotlinx.serialization.SerialName("year_short") public static final com.revenuecat.purchases.paywalls.components.common.VariableLocalizationKey YEAR_SHORT;
  }

}

package com.revenuecat.purchases.paywalls.components.properties {

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class Badge {
    ctor public Badge(com.revenuecat.purchases.paywalls.components.StackComponent stack, com.revenuecat.purchases.paywalls.components.properties.Badge.Style style, com.revenuecat.purchases.paywalls.components.properties.TwoDimensionalAlignment alignment);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable(with=BadgeStyleSerializer::class) public enum Badge.Style {
    method public static com.revenuecat.purchases.paywalls.components.properties.Badge.Style valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.paywalls.components.properties.Badge.Style[] values();
    enum_constant @kotlinx.serialization.SerialName("edge_to_edge") public static final com.revenuecat.purchases.paywalls.components.properties.Badge.Style EdgeToEdge;
    enum_constant @kotlinx.serialization.SerialName("nested") public static final com.revenuecat.purchases.paywalls.components.properties.Badge.Style Nested;
    enum_constant @kotlinx.serialization.SerialName("overlay") public static final com.revenuecat.purchases.paywalls.components.properties.Badge.Style Overlay;
  }

  public final class BadgeStyleTests {
    ctor public BadgeStyleTests(String serialized, com.revenuecat.purchases.paywalls.components.properties.Badge.Style expected);
    method public void Should properly deserialize BadgeStyle();
    method public static java.util.Collection<?> parameters();
    field public static final com.revenuecat.purchases.paywalls.components.properties.BadgeStyleTests.Companion Companion;
  }

  public static final class BadgeStyleTests.Companion {
    method public java.util.Collection<?> parameters();
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class Border {
    ctor public Border(com.revenuecat.purchases.paywalls.components.properties.ColorScheme color, double width);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable public sealed interface ColorInfo {
  }

  @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("alias") @kotlinx.serialization.Serializable public static final class ColorInfo.Alias implements com.revenuecat.purchases.paywalls.components.properties.ColorInfo {
    ctor public ColorInfo.Alias(String value);
  }

  public static sealed interface ColorInfo.Gradient extends com.revenuecat.purchases.paywalls.components.properties.ColorInfo {
  }

  @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("linear") @kotlinx.serialization.Serializable public static final class ColorInfo.Gradient.Linear implements com.revenuecat.purchases.paywalls.components.properties.ColorInfo.Gradient {
    ctor public ColorInfo.Gradient.Linear(float degrees, java.util.List<com.revenuecat.purchases.paywalls.components.properties.ColorInfo.Gradient.Point> points);
  }

  @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public static final class ColorInfo.Gradient.Point {
    ctor public ColorInfo.Gradient.Point(@ColorInt @kotlinx.serialization.Serializable(with=RgbaStringArgbColorIntDeserializer::class) int color, float percent);
  }

  @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("radial") @kotlinx.serialization.Serializable public static final class ColorInfo.Gradient.Radial implements com.revenuecat.purchases.paywalls.components.properties.ColorInfo.Gradient {
    ctor public ColorInfo.Gradient.Radial(java.util.List<com.revenuecat.purchases.paywalls.components.properties.ColorInfo.Gradient.Point> points);
  }

  @dev.drewhamilton.poko.Poko @kotlinx.serialization.SerialName("hex") @kotlinx.serialization.Serializable public static final class ColorInfo.Hex implements com.revenuecat.purchases.paywalls.components.properties.ColorInfo {
    ctor public ColorInfo.Hex(@ColorInt @kotlinx.serialization.Serializable(with=RgbaStringArgbColorIntDeserializer::class) int value);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class ColorScheme {
    ctor public ColorScheme(com.revenuecat.purchases.paywalls.components.properties.ColorInfo light, optional com.revenuecat.purchases.paywalls.components.properties.ColorInfo? dark);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable(with=CornerRadiusesSerializer::class) public sealed interface CornerRadiuses {
  }

  @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public static final class CornerRadiuses.Dp implements com.revenuecat.purchases.paywalls.components.properties.CornerRadiuses {
    ctor public CornerRadiuses.Dp(double all);
    ctor public CornerRadiuses.Dp(@kotlinx.serialization.SerialName("top_leading") double topLeading, @kotlinx.serialization.SerialName("top_trailing") double topTrailing, @kotlinx.serialization.SerialName("bottom_leading") double bottomLeading, @kotlinx.serialization.SerialName("bottom_trailing") double bottomTrailing);
    method public com.revenuecat.purchases.paywalls.components.properties.CornerRadiuses.Dp copy(optional double topLeading, optional double topTrailing, optional double bottomLeading, optional double bottomTrailing);
    field public static final com.revenuecat.purchases.paywalls.components.properties.CornerRadiuses.Dp.Companion Companion;
  }

  public static final class CornerRadiuses.Dp.Companion {
  }

  @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public static final class CornerRadiuses.Percentage implements com.revenuecat.purchases.paywalls.components.properties.CornerRadiuses {
    ctor public CornerRadiuses.Percentage(int all);
    ctor public CornerRadiuses.Percentage(@IntRange(from=0L, to=100L) @kotlinx.serialization.SerialName("top_leading") int topLeading, @IntRange(from=0L, to=100L) @kotlinx.serialization.SerialName("top_trailing") int topTrailing, @IntRange(from=0L, to=100L) @kotlinx.serialization.SerialName("bottom_leading") int bottomLeading, @IntRange(from=0L, to=100L) @kotlinx.serialization.SerialName("bottom_trailing") int bottomTrailing);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable public sealed interface Dimension {
  }

  @kotlinx.serialization.SerialName("horizontal") @kotlinx.serialization.Serializable public static final class Dimension.Horizontal implements com.revenuecat.purchases.paywalls.components.properties.Dimension {
    ctor public Dimension.Horizontal(com.revenuecat.purchases.paywalls.components.properties.VerticalAlignment alignment, com.revenuecat.purchases.paywalls.components.properties.FlexDistribution distribution);
    method public com.revenuecat.purchases.paywalls.components.properties.VerticalAlignment component1();
    method public com.revenuecat.purchases.paywalls.components.properties.FlexDistribution component2();
    method public com.revenuecat.purchases.paywalls.components.properties.Dimension.Horizontal copy(com.revenuecat.purchases.paywalls.components.properties.VerticalAlignment alignment, com.revenuecat.purchases.paywalls.components.properties.FlexDistribution distribution);
  }

  @kotlinx.serialization.SerialName("vertical") @kotlinx.serialization.Serializable public static final class Dimension.Vertical implements com.revenuecat.purchases.paywalls.components.properties.Dimension {
    ctor public Dimension.Vertical(com.revenuecat.purchases.paywalls.components.properties.HorizontalAlignment alignment, com.revenuecat.purchases.paywalls.components.properties.FlexDistribution distribution);
    method public com.revenuecat.purchases.paywalls.components.properties.HorizontalAlignment component1();
    method public com.revenuecat.purchases.paywalls.components.properties.FlexDistribution component2();
    method public com.revenuecat.purchases.paywalls.components.properties.Dimension.Vertical copy(com.revenuecat.purchases.paywalls.components.properties.HorizontalAlignment alignment, com.revenuecat.purchases.paywalls.components.properties.FlexDistribution distribution);
  }

  @kotlinx.serialization.SerialName("zlayer") @kotlinx.serialization.Serializable public static final class Dimension.ZLayer implements com.revenuecat.purchases.paywalls.components.properties.Dimension {
    ctor public Dimension.ZLayer(com.revenuecat.purchases.paywalls.components.properties.TwoDimensionalAlignment alignment);
    method public com.revenuecat.purchases.paywalls.components.properties.TwoDimensionalAlignment component1();
    method public com.revenuecat.purchases.paywalls.components.properties.Dimension.ZLayer copy(com.revenuecat.purchases.paywalls.components.properties.TwoDimensionalAlignment alignment);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable(with=FitModeDeserializer::class) public enum FitMode {
    method public static com.revenuecat.purchases.paywalls.components.properties.FitMode valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.paywalls.components.properties.FitMode[] values();
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.FitMode FILL;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.FitMode FIT;
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable(with=FlexDistributionDeserializer::class) public enum FlexDistribution {
    method public static com.revenuecat.purchases.paywalls.components.properties.FlexDistribution valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.paywalls.components.properties.FlexDistribution[] values();
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.FlexDistribution CENTER;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.FlexDistribution END;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.FlexDistribution SPACE_AROUND;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.FlexDistribution SPACE_BETWEEN;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.FlexDistribution SPACE_EVENLY;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.FlexDistribution START;
  }

  @Deprecated @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable public enum FontSize {
    method @Deprecated public static com.revenuecat.purchases.paywalls.components.properties.FontSize valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method @Deprecated public static com.revenuecat.purchases.paywalls.components.properties.FontSize[] values();
    enum_constant @Deprecated @kotlinx.serialization.SerialName("body_l") public static final com.revenuecat.purchases.paywalls.components.properties.FontSize BODY_L;
    enum_constant @Deprecated @kotlinx.serialization.SerialName("body_m") public static final com.revenuecat.purchases.paywalls.components.properties.FontSize BODY_M;
    enum_constant @Deprecated @kotlinx.serialization.SerialName("body_s") public static final com.revenuecat.purchases.paywalls.components.properties.FontSize BODY_S;
    enum_constant @Deprecated @kotlinx.serialization.SerialName("body_xl") public static final com.revenuecat.purchases.paywalls.components.properties.FontSize BODY_XL;
    enum_constant @Deprecated @kotlinx.serialization.SerialName("heading_l") public static final com.revenuecat.purchases.paywalls.components.properties.FontSize HEADING_L;
    enum_constant @Deprecated @kotlinx.serialization.SerialName("heading_m") public static final com.revenuecat.purchases.paywalls.components.properties.FontSize HEADING_M;
    enum_constant @Deprecated @kotlinx.serialization.SerialName("heading_s") public static final com.revenuecat.purchases.paywalls.components.properties.FontSize HEADING_S;
    enum_constant @Deprecated @kotlinx.serialization.SerialName("heading_xl") public static final com.revenuecat.purchases.paywalls.components.properties.FontSize HEADING_XL;
    enum_constant @Deprecated @kotlinx.serialization.SerialName("heading_xs") public static final com.revenuecat.purchases.paywalls.components.properties.FontSize HEADING_XS;
    enum_constant @Deprecated @kotlinx.serialization.SerialName("heading_xxl") public static final com.revenuecat.purchases.paywalls.components.properties.FontSize HEADING_XXL;
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable(with=FontWeightDeserializer::class) public enum FontWeight {
    method public static com.revenuecat.purchases.paywalls.components.properties.FontWeight valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.paywalls.components.properties.FontWeight[] values();
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.FontWeight BLACK;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.FontWeight BOLD;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.FontWeight EXTRA_BOLD;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.FontWeight EXTRA_LIGHT;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.FontWeight LIGHT;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.FontWeight MEDIUM;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.FontWeight REGULAR;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.FontWeight SEMI_BOLD;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.FontWeight THIN;
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable(with=HorizontalAlignmentDeserializer::class) public enum HorizontalAlignment {
    method public static com.revenuecat.purchases.paywalls.components.properties.HorizontalAlignment valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.paywalls.components.properties.HorizontalAlignment[] values();
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.HorizontalAlignment CENTER;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.HorizontalAlignment LEADING;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.HorizontalAlignment TRAILING;
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class ImageUrls {
    ctor public ImageUrls(@kotlinx.serialization.Serializable(with=URLSerializer::class) java.net.URL original, @kotlinx.serialization.Serializable(with=URLSerializer::class) java.net.URL webp, @kotlinx.serialization.SerialName("webp_low_res") @kotlinx.serialization.Serializable(with=URLSerializer::class) java.net.URL webpLowRes, int width, int height);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable(with=MaskShapeDeserializer::class) public sealed interface MaskShape {
  }

  @kotlinx.serialization.Serializable public static final class MaskShape.Circle implements com.revenuecat.purchases.paywalls.components.properties.MaskShape {
    field public static final com.revenuecat.purchases.paywalls.components.properties.MaskShape.Circle INSTANCE;
  }

  @kotlinx.serialization.Serializable public static final class MaskShape.Concave implements com.revenuecat.purchases.paywalls.components.properties.MaskShape {
    field public static final com.revenuecat.purchases.paywalls.components.properties.MaskShape.Concave INSTANCE;
  }

  @kotlinx.serialization.Serializable public static final class MaskShape.Convex implements com.revenuecat.purchases.paywalls.components.properties.MaskShape {
    field public static final com.revenuecat.purchases.paywalls.components.properties.MaskShape.Convex INSTANCE;
  }

  @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public static final class MaskShape.Rectangle implements com.revenuecat.purchases.paywalls.components.properties.MaskShape {
    ctor public MaskShape.Rectangle(optional com.revenuecat.purchases.paywalls.components.properties.CornerRadiuses? corners);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class Padding {
    ctor public Padding(optional double top, optional double bottom, optional double leading, optional double trailing);
    field public static final com.revenuecat.purchases.paywalls.components.properties.Padding.Companion Companion;
  }

  public static final class Padding.Companion {
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class Shadow {
    ctor public Shadow(com.revenuecat.purchases.paywalls.components.properties.ColorScheme color, double radius, double x, double y);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable(with=ShapeDeserializer::class) public sealed interface Shape {
    method public default com.revenuecat.purchases.paywalls.components.properties.CornerRadiuses getCornerRadiuses();
    property public default com.revenuecat.purchases.paywalls.components.properties.CornerRadiuses cornerRadiuses;
    field public static final com.revenuecat.purchases.paywalls.components.properties.Shape.Companion Companion;
  }

  public static final class Shape.Companion {
  }

  @kotlinx.serialization.Serializable public static final class Shape.Pill implements com.revenuecat.purchases.paywalls.components.properties.Shape {
    field public static final com.revenuecat.purchases.paywalls.components.properties.Shape.Pill INSTANCE;
  }

  @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public static final class Shape.Rectangle implements com.revenuecat.purchases.paywalls.components.properties.Shape {
    ctor public Shape.Rectangle(optional com.revenuecat.purchases.paywalls.components.properties.CornerRadiuses? corners);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class Size {
    ctor public Size(com.revenuecat.purchases.paywalls.components.properties.SizeConstraint width, com.revenuecat.purchases.paywalls.components.properties.SizeConstraint height);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable(with=SizeConstraintDeserializer::class) public sealed interface SizeConstraint {
  }

  @kotlinx.serialization.Serializable public static final class SizeConstraint.Fill implements com.revenuecat.purchases.paywalls.components.properties.SizeConstraint {
    field public static final com.revenuecat.purchases.paywalls.components.properties.SizeConstraint.Fill INSTANCE;
  }

  @kotlinx.serialization.Serializable public static final class SizeConstraint.Fit implements com.revenuecat.purchases.paywalls.components.properties.SizeConstraint {
    field public static final com.revenuecat.purchases.paywalls.components.properties.SizeConstraint.Fit INSTANCE;
  }

  @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public static final class SizeConstraint.Fixed implements com.revenuecat.purchases.paywalls.components.properties.SizeConstraint {
    ctor public SizeConstraint.Fixed(int value);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @dev.drewhamilton.poko.Poko @kotlinx.serialization.Serializable public final class ThemeImageUrls {
    ctor public ThemeImageUrls(com.revenuecat.purchases.paywalls.components.properties.ImageUrls light, optional com.revenuecat.purchases.paywalls.components.properties.ImageUrls? dark);
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable(with=TwoDimensionalAlignmentDeserializer::class) public enum TwoDimensionalAlignment {
    method public static com.revenuecat.purchases.paywalls.components.properties.TwoDimensionalAlignment valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.paywalls.components.properties.TwoDimensionalAlignment[] values();
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.TwoDimensionalAlignment BOTTOM;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.TwoDimensionalAlignment BOTTOM_LEADING;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.TwoDimensionalAlignment BOTTOM_TRAILING;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.TwoDimensionalAlignment CENTER;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.TwoDimensionalAlignment LEADING;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.TwoDimensionalAlignment TOP;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.TwoDimensionalAlignment TOP_LEADING;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.TwoDimensionalAlignment TOP_TRAILING;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.TwoDimensionalAlignment TRAILING;
  }

  @com.revenuecat.purchases.InternalRevenueCatAPI @kotlinx.serialization.Serializable(with=VerticalAlignmentDeserializer::class) public enum VerticalAlignment {
    method public static com.revenuecat.purchases.paywalls.components.properties.VerticalAlignment valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.paywalls.components.properties.VerticalAlignment[] values();
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.VerticalAlignment BOTTOM;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.VerticalAlignment CENTER;
    enum_constant public static final com.revenuecat.purchases.paywalls.components.properties.VerticalAlignment TOP;
  }

}

package com.revenuecat.purchases.paywalls.events {

  @com.revenuecat.purchases.ExperimentalPreviewRevenueCatPurchasesAPI @kotlinx.serialization.Serializable public final class PaywallEvent implements com.revenuecat.purchases.common.events.FeatureEvent {
    ctor public PaywallEvent(com.revenuecat.purchases.paywalls.events.PaywallEvent.CreationData creationData, com.revenuecat.purchases.paywalls.events.PaywallEvent.Data data, com.revenuecat.purchases.paywalls.events.PaywallEventType type);
    method public com.revenuecat.purchases.paywalls.events.PaywallEvent.CreationData component1();
    method public com.revenuecat.purchases.paywalls.events.PaywallEvent.Data component2();
    method public com.revenuecat.purchases.paywalls.events.PaywallEventType component3();
    method public com.revenuecat.purchases.paywalls.events.PaywallEvent copy(com.revenuecat.purchases.paywalls.events.PaywallEvent.CreationData creationData, com.revenuecat.purchases.paywalls.events.PaywallEvent.Data data, com.revenuecat.purchases.paywalls.events.PaywallEventType type);
    method public com.revenuecat.purchases.paywalls.events.PaywallEvent.CreationData getCreationData();
    method public com.revenuecat.purchases.paywalls.events.PaywallEvent.Data getData();
    method public com.revenuecat.purchases.paywalls.events.PaywallEventType getType();
    property public final com.revenuecat.purchases.paywalls.events.PaywallEvent.CreationData creationData;
    property public final com.revenuecat.purchases.paywalls.events.PaywallEvent.Data data;
    property public final com.revenuecat.purchases.paywalls.events.PaywallEventType type;
  }

  @kotlinx.serialization.Serializable public static final class PaywallEvent.CreationData {
    ctor public PaywallEvent.CreationData(@kotlinx.serialization.Serializable(with=UUIDSerializer::class) java.util.UUID id, @kotlinx.serialization.Serializable(with=DateSerializer::class) java.util.Date date);
    method public java.util.UUID component1();
    method public java.util.Date component2();
    method public com.revenuecat.purchases.paywalls.events.PaywallEvent.CreationData copy(java.util.UUID id, java.util.Date date);
    method public java.util.Date getDate();
    method public java.util.UUID getId();
    property public final java.util.Date date;
    property public final java.util.UUID id;
  }

  @kotlinx.serialization.Serializable public static final class PaywallEvent.Data {
    ctor public PaywallEvent.Data(String offeringIdentifier, int paywallRevision, @kotlinx.serialization.Serializable(with=UUIDSerializer::class) java.util.UUID sessionIdentifier, String displayMode, String localeIdentifier, boolean darkMode);
    method public String component1();
    method public int component2();
    method public java.util.UUID component3();
    method public String component4();
    method public String component5();
    method public boolean component6();
    method public com.revenuecat.purchases.paywalls.events.PaywallEvent.Data copy(String offeringIdentifier, int paywallRevision, java.util.UUID sessionIdentifier, String displayMode, String localeIdentifier, boolean darkMode);
    method public boolean getDarkMode();
    method public String getDisplayMode();
    method public String getLocaleIdentifier();
    method public String getOfferingIdentifier();
    method public int getPaywallRevision();
    method public java.util.UUID getSessionIdentifier();
    property public final boolean darkMode;
    property public final String displayMode;
    property public final String localeIdentifier;
    property public final String offeringIdentifier;
    property public final int paywallRevision;
    property public final java.util.UUID sessionIdentifier;
  }

  public final class PaywallEventSerializationTests {
    ctor public PaywallEventSerializationTests();
    method public void can encode and decode event correctly();
    method public void can encode paywall event correctly();
  }

  @com.revenuecat.purchases.ExperimentalPreviewRevenueCatPurchasesAPI public enum PaywallEventType {
    method public final String! getValue();
    method public static com.revenuecat.purchases.paywalls.events.PaywallEventType valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.paywalls.events.PaywallEventType[] values();
    property public final String! value;
    enum_constant public static final com.revenuecat.purchases.paywalls.events.PaywallEventType CANCEL;
    enum_constant public static final com.revenuecat.purchases.paywalls.events.PaywallEventType CLOSE;
    enum_constant public static final com.revenuecat.purchases.paywalls.events.PaywallEventType IMPRESSION;
  }

  public final class PaywallEventsRequestSerializationTest {
    ctor public PaywallEventsRequestSerializationTest();
    method public void can encode and decode event correctly();
    method public void can encode paywall event request correctly();
  }

}

package com.revenuecat.purchases.subscriberattributes {

  public final class SpecialSubscriberAttributesTests {
    ctor public SpecialSubscriberAttributesTests();
    method public void given a custom key SubscriberAttributeKey can be created();
    method public void given a display name key SubscriberAttributeKey can be created();
    method public void given a fcm tokens key SubscriberAttributeKey can be created();
    method public void given a phone number key SubscriberAttributeKey can be created();
    method public void given an email key SubscriberAttributeKey can be created();
  }

  public final class SubscriberAttributeTests {
    ctor public SubscriberAttributeTests();
    method public void JSONObject constructor with null value();
    method public void JSONObject constructor works();
    method public void JSONObject missing values();
    method public void backend map looks as expected();
    method public void null value sets JSON correctly();
    method public void subscriber with string as key constructor();
    method public void timestamp is correctly set();
    method public void toJSONObject works();
  }

  public final class SubscriberAttributesDeviceCacheTests {
    ctor public SubscriberAttributesDeviceCacheTests();
    method public void Given there are legacy subscriber attributes, clean up removes already synced attributes();
    method public void Given there are legacy subscriber attributes, migration happens();
    method public void Given there are no legacy subscriber attributes, cleanup doesn't migrate anything();
    method public void Given there are old synced attributes, they get cleaned();
    method public void Given there are two user IDs with unsynced attributes, getUnsyncedSubscriberAttributes returns a map with two users and only the attributes that are not found();
    method public void Given there are two user IDs, and none of them have unsynced attributes, getUnsyncedSubscriberAttributes returns an empty map();
    method public void Given there are two user IDs, but only one of them has unsynced attributes, getUnsyncedSubscriberAttributes returns a map with only the unsynced attributes for that user();
    method public void clearAllSubscriberAttributesFromUser also clears the unsynced subscriber attributes();
    method public void clearAllSubscriberAttributesFromUser clears the synced subscriber attributes();
    method public void clearSubscriberAttributesIfSyncedForSubscriber also clears the synced subscriber attributes();
    method public void clearSubscriberAttributesIfSyncedForSubscriber doesn't clear the unsynced subscriber attributes();
    method public void getting attributes on empty cache returns empty map();
    method public void getting attributes on not empty cache returns map of attributes();
    method public void setting attribute already existing but marking as synced();
    method public void setting attributes on empty cache();
    method public void setting attributes on not empty cache();
    method public void setting existing attribute();
    method public void setting existing attribute as null();
    method public void setting non existing attribute();
    method public void setup();
  }

  public final class SubscriberAttributesManagerTests {
    ctor public SubscriberAttributesManagerTests();
    method public void Sync unsynced attributes for all users();
    method public void When syncing all users attributes, does not sync attributes for empty user IDs();
    method public void When syncing all users attributes, does not sync attributes for whitespaces user IDs();
    method public void When syncing another user attributes, clear them when posted();
    method public void attribute errors when synchronizing with backend and backend did not get them();
    method public void attribute errors when synchronizing with backend and backend got them();
    method public void calls completion if cache does not have unsynchronized attributes();
    method public void calls completion if cache has unsynchronized attributes for multiple users some failing and some syncing();
    method public void calls completion if cache has unsynchronized attributes for single user that fail synchronizing();
    method public void calls completion if cache has unsynchronized attributes for single user that succeed synchronizing();
    method public void can be created();
    method public void collectDeviceIdentifiers();
    method public void copyUnsyncedSubscriberAttributes copies unsynced attributes to new user and deletes old ones();
    method public void copyUnsyncedSubscriberAttributes does not do anything if no unsynced attributes to copy();
    method public void do not synchronize with backend if cache does not have unsynchronized attributes();
    method public void getting unsynchronized attributes calls completion only once();
    method public void getting unsynchronized attributes finishes immediately if not currently getting device identifiers();
    method public void getting unsynchronized attributes waits if currently getting device identifiers();
    method public void getting unsynchronized attributes waits if currently getting device identifiers multiple times();
    method public void null adID when calling collectDeviceIdentifiers();
    method public void setAttributionID();
    method public void setting dictionary of already set attributes();
    method public void setting dictionary of attributes();
    method public void setup();
    method public void synchronize with backend unsynchronized attributes();
  }

  public final class SubscriberAttributesPosterTests {
    ctor public SubscriberAttributesPosterTests();
    method public void 200 but subscriber attribute errors when posting receipt();
    method public void 304 and subscriber attribute errors when posting receipt();
    method public void 505 and subscriber attribute errors when posting receipt();
    method public void Not found error when posting attributes();
    method public void attributes validation error when posting attributes();
    method public void backend error when posting attributes();
    method public void empty attributes validation errors when posting attributes();
    method public void error when posting attributes();
    method public void postSubscriberAttributes does not add post fields to sign();
    method public void posting null subscriber attributes works();
    method public void posting receipt with attributes skips them in custom entitlements computation mode();
    method public void posting receipt with attributes works();
    method public void posting receipt without attributes skips them();
    method public void posting subscriber attributes works();
    method public void setup();
    method public void tearDown();
  }

}

package com.revenuecat.purchases.trustedentitlements {

  public final class TrustedEntitlementsInformationalModeIntegrationTest extends com.revenuecat.purchases.BasePurchasesIntegrationTest {
    ctor public TrustedEntitlementsInformationalModeIntegrationTest();
    method public void canPurchaseProductFailingToVerifyStatus();
    method public void canPurchaseProductWithVerificationStatusCorrect();
    method public void initialCustomerInfoFailsToVerify();
    method public void initialCustomerInfoIsVerified();
    method public void setup();
    method public void verificationChangesAfterSuccessIsNotified();
  }

}

package com.revenuecat.purchases.utils {

  public final class BillingClientStubsKt {
    method public static com.android.billingclient.api.ProductDetails createMockOneTimeProductDetails(String productId, optional double price);
    method public static com.android.billingclient.api.ProductDetails createMockProductDetailsFreeTrial(optional String productId, optional double priceAfterFreeTrial, optional String freeTrialPeriod, optional String subscriptionPeriod);
    method public static com.android.billingclient.api.ProductDetails createMockProductDetailsNoOffers();
    method public static com.android.billingclient.api.ProductDetails.InstallmentPlanDetails mockInstallmentPlandetails(optional int commitmentPaymentsCount, optional int renewalCommitmentPaymentsCount);
    method public static com.android.billingclient.api.ProductDetails.OneTimePurchaseOfferDetails mockOneTimePurchaseOfferDetails(optional double price, optional String priceCurrencyCodeValue);
    method public static com.android.billingclient.api.ProductDetails.PricingPhase mockPricingPhase(optional double price, optional String priceCurrencyCodeValue, optional String billingPeriod, optional int billingCycleCount, optional int recurrenceMode);
    method public static com.android.billingclient.api.ProductDetails mockProductDetails(optional String productId, optional @com.android.billingclient.api.BillingClient.ProductType String type, optional com.android.billingclient.api.ProductDetails.OneTimePurchaseOfferDetails? oneTimePurchaseOfferDetails, optional java.util.List<com.android.billingclient.api.ProductDetails.SubscriptionOfferDetails>? subscriptionOfferDetails, optional String name, optional String description, optional String title);
    method public static Object mockQueryPurchaseHistory(com.android.billingclient.api.BillingClient, com.android.billingclient.api.BillingResult result, java.util.List<? extends com.android.billingclient.api.PurchaseHistoryRecord> history);
    method public static Object mockQueryPurchasesAsync(com.android.billingclient.api.BillingClient, com.android.billingclient.api.BillingResult subsResult, com.android.billingclient.api.BillingResult inAppResult, java.util.List<? extends com.android.billingclient.api.Purchase> subPurchases, optional java.util.List<? extends com.android.billingclient.api.Purchase> inAppPurchases);
    method public static com.android.billingclient.api.ProductDetails.SubscriptionOfferDetails mockSubscriptionOfferDetails(optional java.util.List<java.lang.String> tags, optional String token, optional String offerId, optional String basePlanId, optional java.util.List<com.android.billingclient.api.ProductDetails.PricingPhase> pricingPhases, optional com.android.billingclient.api.ProductDetails.InstallmentPlanDetails? installmentDetails);
    method public static com.android.billingclient.api.Purchase stubGooglePurchase(optional java.util.List<java.lang.String> productIds, optional long purchaseTime, optional String purchaseToken, optional String signature, optional int purchaseState, optional boolean acknowledged, optional String orderId);
    method public static com.android.billingclient.api.PurchaseHistoryRecord stubPurchaseHistoryRecord(optional java.util.List<java.lang.String> productIds, optional long purchaseTime, optional String purchaseToken, optional String signature);
    method public static com.revenuecat.purchases.models.StoreTransaction stubStoreTransactionFromGooglePurchase(java.util.List<java.lang.String> productIds, long purchaseTime, optional String purchaseToken);
    method public static com.revenuecat.purchases.models.StoreTransaction stubStoreTransactionFromPurchaseHistoryRecord(java.util.List<java.lang.String> productIds, long purchaseTime);
    method public static void verifyQueryPurchaseHistoryCalledWithType(com.android.billingclient.api.BillingClient, @com.android.billingclient.api.BillingClient.ProductType String googleType, Object builder);
  }

  public final class DateExtensionsKt {
    method public static java.util.Date add(java.util.Date, long duration);
    method public static java.util.Date subtract(java.util.Date, long duration);
  }

  public final class IsDebugBuildProviderTest {
    ctor public IsDebugBuildProviderTest();
    method public void Correctly determines debug builds();
    method public void Correctly determines non-debug builds();
  }

  public final class Iso8601Utils {
    ctor public Iso8601Utils();
    method public static String! format(java.util.Date!);
    method public static java.util.Date! parse(String!);
  }

  public final class JSONArrayExtensionsTest {
    ctor public JSONArrayExtensionsTest();
    method public void test toList();
  }

  public final class JSONObjectAssert {
    ctor public JSONObjectAssert(org.json.JSONObject actual);
    method public com.revenuecat.purchases.utils.JSONObjectAssert isEqualToMap(java.util.Map<java.lang.String,java.lang.String> expected);
    field public static final com.revenuecat.purchases.utils.JSONObjectAssert.Companion Companion;
  }

  public static final class JSONObjectAssert.Companion {
    method public com.revenuecat.purchases.utils.JSONObjectAssert assertThat(org.json.JSONObject actual);
  }

  public final class JSONObjectExtensionsTest {
    ctor public JSONObjectExtensionsTest();
    method public void test toMap();
    method public void test toMap with deep();
  }

  public final class JsonElementExtensionsTest {
    ctor public JsonElementExtensionsTest();
    method public void can convert map with different types of elements();
  }

  public final class LocaleExtensionsKt {
    method public static java.util.List<java.util.Locale> getDefaultLocales();
  }

  public final class LocaleExtensionsTest {
    ctor public LocaleExtensionsTest();
    method public void convertToCorrectlyFormattedLocale - converts invalid locale to correct locale();
    method public void convertToCorrectlyFormattedLocale - converts valid locale to same locale();
    method public void getDefaultLocales returns the correct list();
    method public void sharedLanguageCodeWith - chinese with different scripts();
    method public void sharedLanguageCodeWith - chinese with shared script();
    method public void sharedLanguageCodeWith - returns false when locales don't share language code();
    method public void sharedLanguageCodeWith - returns true when locales share language code();
    method public void sharedLanguageCodeWith - returns true without region();
    method public void toLocale - converts underscore formatted locale string to locale();
    method public void toLocale - converts valid locale tags to correct locale();
    method public void toLocale - invalid locale strings return undefined locale();
  }

  public final class MockHandlerFactory {
    method public android.os.Handler createMockHandler();
    field public static final com.revenuecat.purchases.utils.MockHandlerFactory INSTANCE;
  }

  public final class MockTimestampProvider {
    ctor public MockTimestampProvider();
    method public long getCurrentTimeMillis();
    method public Long? getOverridenCurrentTimeMillis();
    method public void setOverridenCurrentTimeMillis(Long?);
    property public long currentTimeMillis;
    property public final Long? overridenCurrentTimeMillis;
  }

  public final class OfferingImagePreDownloaderTest {
    ctor public OfferingImagePreDownloaderTest();
    method public void downloads images from offering paywall data();
    method public void if disabled, it does not download anything();
    method public void if no images, it does not download anything();
    method public void if no paywall data or paywall components data, it does not download anything();
    method public void paywalls V2 - if images, it downloads all of them();
    method public void paywalls V2 - if no images, it does not download anything();
    method public void setUp();
  }

  public final class ParcelizationTestHelperKt {
    method public static inline <reified T extends android.os.Parcelable> void testParcelization(T? value, optional boolean areSame);
  }

  public final class PriceExtensionsPricePerMonthTest extends com.revenuecat.purchases.utils.PriceExtensionsPricePerPeriodTest {
    ctor public PriceExtensionsPricePerMonthTest();
    method protected com.revenuecat.purchases.models.Price compute(com.revenuecat.purchases.models.Price price, com.revenuecat.purchases.models.Period period);
    method public void pricePerMonth(String priceString, String periodString, String expectedString);
  }

  public abstract class PriceExtensionsPricePerPeriodTest {
    ctor public PriceExtensionsPricePerPeriodTest();
    method protected abstract com.revenuecat.purchases.models.Price compute(com.revenuecat.purchases.models.Price price, com.revenuecat.purchases.models.Period period);
    method protected final java.util.Locale getLocale();
    method protected final void test(String priceString, String periodString, String expectedString);
    property protected final java.util.Locale locale;
  }

  public final class PriceExtensionsPricePerWeekTest extends com.revenuecat.purchases.utils.PriceExtensionsPricePerPeriodTest {
    ctor public PriceExtensionsPricePerWeekTest();
    method protected com.revenuecat.purchases.models.Price compute(com.revenuecat.purchases.models.Price price, com.revenuecat.purchases.models.Period period);
    method public void pricePerWeek(String priceString, String periodString, String expectedString);
  }

  public final class PriceExtensionsPricePerYearTest extends com.revenuecat.purchases.utils.PriceExtensionsPricePerPeriodTest {
    ctor public PriceExtensionsPricePerYearTest();
    method protected com.revenuecat.purchases.models.Price compute(com.revenuecat.purchases.models.Price price, com.revenuecat.purchases.models.Period period);
    method public void pricePerYear(String priceString, String periodString, String expectedString);
  }

  public final class PriceExtensionsTest {
    ctor public PriceExtensionsTest();
    method public void formattedPricePerMonth correctly formats EUR in ES locale();
    method public void formattedPricePerMonth correctly formats EUR in US locale();
    method public void formattedPricePerMonth correctly formats USD in ES locale();
    method public void formattedPricePerMonth correctly formats USD in US locale();
    method public void formattedPricePerMonth correctly formats monthly price();
  }

  public final class ProductStubsKt {
    method public static org.json.JSONObject getAmazonPackageJSON(optional String packageIdentifier, optional String productIdentifier);
    method public static org.json.JSONObject getLifetimePackageJSON();
    method public static com.revenuecat.purchases.models.PricingPhase stubFreeTrialPricingPhase(optional com.revenuecat.purchases.models.Period billingPeriod, optional String priceCurrencyCodeValue);
    method public static com.revenuecat.purchases.models.StoreProduct stubINAPPStoreProduct(String productId, optional com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext);
    method public static kotlin.Pair<com.revenuecat.purchases.models.StoreProduct,com.revenuecat.purchases.Offerings> stubOTPOffering(com.revenuecat.purchases.models.StoreProduct inAppProduct);
    method public static kotlin.Pair<com.revenuecat.purchases.models.StoreProduct,com.revenuecat.purchases.Offerings> stubOfferings(com.revenuecat.purchases.models.StoreProduct storeProduct);
    method public static kotlin.Pair<com.revenuecat.purchases.models.StoreProduct,com.revenuecat.purchases.Offerings> stubOfferings(String productId);
    method public static com.revenuecat.purchases.models.PricingPhase stubPricingPhase(optional com.revenuecat.purchases.models.Period billingPeriod, optional String priceCurrencyCodeValue, optional double price, optional int recurrenceMode, optional int billingCycleCount);
    method public static com.revenuecat.purchases.models.StoreProduct stubStoreProduct(String productId, optional com.revenuecat.purchases.models.SubscriptionOption? defaultOption, optional java.util.List<? extends com.revenuecat.purchases.models.SubscriptionOption>? subscriptionOptions, optional com.revenuecat.purchases.models.Price price, optional com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext);
    method public static com.revenuecat.purchases.models.SubscriptionOption stubSubscriptionOption(String id, String productId, optional com.revenuecat.purchases.models.Period duration, optional java.util.List<com.revenuecat.purchases.models.PricingPhase> pricingPhases, optional com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext, optional com.revenuecat.purchases.models.InstallmentsInfo? installmentsInfo);
    field public static final String ONE_OFFERINGS_INAPP_PRODUCT_RESPONSE = "{\'offerings\': [{\'identifier\': \'offering_a\', \'description\': \'This is the base offering\', \'packages\': [{\'identifier\': \'$rc_monthly\',\'platform_product_identifier\': \'monthly_freetrial\'}]}],\'current_offering_id\': \'offering_a\'}";
    field public static final String ONE_OFFERINGS_RESPONSE = "{\'offerings\': [{\'identifier\': \'offering_a\', \'description\': \'This is the base offering\', \'packages\': [{\'identifier\': \'$rc_monthly\',\'platform_product_identifier\': \'monthly_freetrial\',\'platform_product_plan_identifier\': \'p1m\'}]}],\'current_offering_id\': \'offering_a\'}";
    field public static final String STUB_OFFERING_IDENTIFIER = "offering_a";
    field public static final String STUB_PRODUCT_IDENTIFIER = "monthly_freetrial";
  }

  public final class RateLimiterTest {
    ctor public RateLimiterTest();
    method public void test allows correct number of accesses();
    method public void test blocks access when limit exceeded();
    method public void test resets after rate limit period();
  }

  public final class Responses {
    method public String createFullCustomerResponse(optional java.util.Date? oneMonthFreeTrialExpirationDate, optional java.util.Date? threeMonthFreeTrialExpirationDate, optional java.util.Map<java.lang.String,java.lang.Boolean> productsInfo);
    method public String getBadRequestErrorResponse();
    method public String getInternalServerErrorResponse();
    method public String getInvalidCredentialsErrorResponse();
    method public String getSubscriberAttributesErrorsPostReceiptResponse();
    method public String getValidEmptyPurchaserResponse();
    method public String getValidFullPurchaserResponse();
    property public final String badRequestErrorResponse;
    property public final String internalServerErrorResponse;
    property public final String invalidCredentialsErrorResponse;
    property public final String subscriberAttributesErrorsPostReceiptResponse;
    property public final String validEmptyPurchaserResponse;
    property public final String validFullPurchaserResponse;
    field public static final com.revenuecat.purchases.utils.Responses INSTANCE;
  }

}

