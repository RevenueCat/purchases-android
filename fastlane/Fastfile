# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

gradle_file_path = "library.gradle"

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Increment build number"
  lane :bump do |options|
    new_version = options[:version]
    fail ArgumentError, "missing version" unless new_version
    previous_version = android_get_version_name(gradle_file: gradle_file_path)
    android_set_version_name(version_name: new_version, gradle_file: gradle_file_path)
    increment_version_in(previous_version, new_version, '../common/src/main/java/com/revenuecat/purchases/common/Config.kt')
    increment_version_in(previous_version, new_version, '../.circleci/config.yml')
    increment_version_in(previous_version, new_version, '../docs/index.html')
    increment_version_in(previous_version, new_version, '../gradle.properties')
  end

  desc "Increment build number and update changelog"
  lane :bump_and_update_changelog do |options|
    bump(options)
    attach_changelog_to_main(options)
  end

  desc "Tag release version with latest if necessary"
  lane :tag_release_with_latest_if_needed do |options|
    release_version = options[:release_version]
    puts "Release version is #{release_version}"

    sh("git", "checkout", "tags/latest")
    latest_version = android_get_version_name(gradle_file: gradle_file_path)
    puts "Latest version is #{latest_version}"

    # We assume there's already a tag for the version we are tagging as latest
    sh("git", "checkout", release_version)

    unless Gem::Version.new(release_version) > Gem::Version.new(latest_version)
      puts "There's a more recent version. Skipping tagging."
      next
    end
    latest_version_commit = sh("git", "rev-list", "--tags=#{release_version}*", "--max-count=1").chomp
    puts "Tagging #{release_version}, with commit #{latest_version_commit} with latest"

    add_git_tag(
      tag: "latest",
      force: true,
      grouping: "releases",
      commit: latest_version_commit
    )
    push_git_tags(
      tag: "latest",
      force: true
    )
  end

  desc "Make github release"
  lane :github_release do |options|
    release_version = options[:version]
    fail ArgumentError, "missing version" unless release_version

    begin
      changelog = File.read("../CHANGELOG.latest.md")
    rescue
      fail "please add a CHANGELOG.latest.md file before calling this lane"
    end

    is_prerelease = release_version.include?("-")

    set_github_release(
      repository_name: "revenuecat/purchases-android",
      api_token: ENV["GITHUB_TOKEN"],
      name: release_version,
      tag_name: "#{release_version}",
      description: changelog,
      commitish: "main",
      upload_assets: [],
      is_prerelease: is_prerelease
    )

    tag_release_with_latest_if_needed(release_version: release_version)
  end

  desc "Upload and close a release"
  lane :deploy do |options|
    version = android_get_version_name(gradle_file: gradle_file_path)
    gradleProperties = {
      "signing.keyId" => ENV['GPG_SIGNING_KEY_ID_NEW'],
      "signing.password" => ENV['GPG_SIGNING_KEY_PW_NEW'],
      "signing.secretKeyRingFile" => "/home/circleci/.gnupg/secring.gpg",
      "mavenCentralUsername" => ENV['SONATYPE_NEXUS_TOKEN_USERNAME'],
      "mavenCentralPassword" => ENV['SONATYPE_NEXUS_TOKEN_PASSWORD'],
      "RELEASE_SIGNING_ENABLED" => true
    }
    UI.verbose("Deploying #{version}")
    gradle(
      tasks: [
        "androidSourcesJar", "androidJavadocJar", "publish --no-daemon --no-parallel"
      ],
      properties: gradleProperties
    )

    UI.verbose("Creating special version for Unity IAP with BillingClient 3 and Amazon 2 for version: #{version}")
    gradleProperties["PUBLISH_VARIANT"] = "unityIAPRelease"
    
    UI.verbose("Adding -unityiap to artifact ids")
    

    gradle(
      tasks: [
        "androidSourcesJar", "androidJavadocJar", "publish --no-daemon --no-parallel"
      ],
      properties: gradleProperties
    )
    
    unless is_snapshot_version?(version)
      gradle(
        tasks: [
          "closeAndReleaseRepository"
        ],
        properties: gradleProperties
      )
      github_release(version: version)
    end
  end

  desc "Upload a snapshot release"
  lane :deploy_snapshot do |options|
    version = android_get_version_name(gradle_file: gradle_file_path)
    deploy if is_snapshot_version?(version)
  end

  desc "Prepare next version"
  lane :prepare_next_version do |options|
    current_version_number = android_get_version_name(gradle_file: gradle_file_path)
    major, minor, _ = current_version_number.split('.')
    next_version = "#{major}.#{minor.to_i + 1}.0"
    next_version_snapshot = "#{next_version}-SNAPSHOT"

    branch_name = "bump/#{next_version_snapshot}"
    sh("git", "checkout", "-b", branch_name)

    bump(version: next_version_snapshot)

    sh("git", "commit", "-am", "Preparing for next version")
    push_to_git_remote(
      remote: "origin",
      local_branch: branch_name,
      remote_branch: branch_name,
    )

    create_pull_request(
      repo: "revenuecat/purchases-android",
      title: "Prepare next version: #{next_version_snapshot}",
      base: "main",
      api_token: ENV["GITHUB_TOKEN"],
      head: branch_name
    )
  end

  desc "Builds a Magic Weather APK and prompts for:"
  desc "* Gralde task"
  desc "* Amazon or Google API Key for RevenueCat"
  desc "* Version code"
  desc "* Version name"
  desc "* Amazon pem path (optional)"
  desc "* New application id (optional)"
  lane :build_magic_weather do |options|
    ensure_git_status_clean

    begin
      project_dir = "examples/MagicWeather"

      tasks = [
        "assembleAmazonDebug", 
        "assembleAmazonRelease", 
        "assembleGoogleDebug", 
        "assembleGoogleRelease", 
      ]
      task = options[:task] || UI.select("Which task?", tasks)

      amazon_api_key = options[:amazon_api_key] || UI.input("Amazon API Key?") if task.include?("Amazon")
      google_api_key = options[:google_api_key] || UI.input("Google API Key?") if task.include?("Google")

      version_code = options[:version_code] || UI.input("Version code?")
      version_name = options[:version_name] || UI.input("Version name?")

      amazon_pem_path = options[:amazon_pem_path] || UI.input("Amazon .pem path?")

      new_application_id = options[:application_id] || UI.input("New application id? (blank for no)")

      # API keys
      constants_path = "../examples/MagicWeather/app/src/main/java/com/revenuecat/sample/data/Constants.kt"
      constants_text = File.read(constants_path)

      constants_text = constants_text.gsub("amzn_api_key", amazon_api_key) if amazon_api_key.to_s.size > 0
      constants_text = constants_text.gsub("googl_api_key", google_api_key) if google_api_key.to_s.size > 0

      File.write(constants_path, constants_text)

      # Application Id
      if new_application_id.to_s.size > 0
        application_id = "com.revenuecat.purchases_sample"
        sh("find ../#{project_dir}/app -name 'build.gradle' -type f -exec sed -i '' 's/#{application_id}/#{new_application_id}/' {} \\;")
      end

      # Amazon pem
      if amazon_pem_path.to_s.size > 0
        pem_dir = "../examples/MagicWeather/app/src/main/assets"
        pem_file = "AppstoreAuthenticationKey.pem"
        FileUtils.mkdir_p(pem_dir)
        FileUtils.cp(amazon_pem_path, File.join(pem_dir, pem_file))
      end

      # Build APK
      gradle(
        project_dir: project_dir,
        task: task,
        properties: {
          "android.injected.version.code" => version_code,
          "android.injected.version.name" => version_name,
        }
      )

      # View APK info for sanity checking
      path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
      if UI.confirm("Do you want to see APK info from 'aapt dump bading'?")
        sh("aapt dump badging #{path}")
      end

      # Final result
      UI.important("APK at #{path}")
      if UI.confirm("Open directory of APK?")
        dir = File.dirname(path)
        sh("open #{dir}")
      end
    ensure
      sh("git reset --hard")
      sh("git clean -fd")
    end
  end
end

def increment_version_in(previous_version, new_version, path)
  sed_regex = 's/' + previous_version + '/' + new_version + '/g'
  backup_extension = '.bck'
  sh "sed -i'#{backup_extension}' #{sed_regex} #{path}"
end

def attach_changelog_to_main(options)
  version_number = options[:version]
  current_changelog = File.open("../CHANGELOG.latest.md", 'r')
  master_changelog = File.open("../CHANGELOG.md", 'r')

  current_changelog_data = current_changelog.read
  master_changelog_data = master_changelog.read

  current_changelog.close
  master_changelog.close

  File.open("../CHANGELOG.md", 'w') { |master_changelog_write_mode|
    version_header = "## #{version_number}"
    whole_file_data = "#{version_header}\n\n#{current_changelog_data}\n#{master_changelog_data}"
    puts "going to save. Contents - #{whole_file_data}"
    master_changelog_write_mode.write(whole_file_data)
  }
end

def is_snapshot_version?(version_name)
  version_name.end_with?("-SNAPSHOT")
end
