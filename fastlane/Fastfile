# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

gradle_file_path = "library.gradle"
files_with_version_number = {
  gradle_file_path => ['versionName "{x}"'],
  './purchases/src/main/kotlin/com/revenuecat/purchases/common/Config.kt' => ['frameworkVersion = "{x}"'],
  './.circleci/config.yml' => ['aws s3 sync ~/project/docs/{x} s3://purchases-docs/android/{x} --delete'],
  './docs/index.html' => ['url=https://sdk.revenuecat.com/android/{x}/index.html'],
  './gradle.properties' => ['VERSION_NAME={x}'],
  './.version' => ['{x}'],
  './examples/MagicWeather/gradle/libs.versions.toml' => ['purchases = "{x}"'],
  './examples/MagicWeatherCompose/gradle/libs.versions.toml' => ['purchases = "{x}"'],
  './examples/CustomEntitlementComputationSample/gradle/libs.versions.toml' => ['purchases = "{x}"'],
}

repo_name = 'purchases-android'
changelog_latest_path = './CHANGELOG.latest.md'
changelog_path = './CHANGELOG.md'

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Setup development environment"
  lane :setup_dev do |options|
    pre_commit_link = "../.git/hooks/pre-commit"
    if File.exist?(pre_commit_link) || File.symlink?(pre_commit_link)
      UI.message("pre-commit script already linked âœ…")
    else
      UI.message("Linking pre-commit script ðŸ”—")
      Dir.chdir("..") do
        sh("ln -s -f ../../scripts/pre-commit.sh .git/hooks/pre-commit")
      end
    end
  end

  desc "Replaces version numbers, updates changelog and creates PR"
  lane :bump do |options|
    bump_version_update_changelog_create_pr(
      current_version: current_version_number,
      changelog_latest_path: changelog_latest_path,
      changelog_path: changelog_path,
      files_to_update: files_with_version_number,
      repo_name: repo_name,
      github_rate_limit: options[:github_rate_limit],
      editor: options[:editor],
      next_version: options[:next_version],
      automatic_release: options[:automatic_release],
      is_prerelease: options[:is_prerelease]
    )
  end

  desc "Automatically bumps version, replaces version numbers, updates changelog and creates PR"
  lane :automatic_bump do |options|
    next_version, type_of_bump = determine_next_version_using_labels(
      repo_name: repo_name,
      github_rate_limit: options[:github_rate_limit]
    )
    options[:next_version] = next_version
    options[:automatic_release] = true
    if type_of_bump == :skip
      UI.message('Skipping automatic bump since the next version doesn\'t include public facing changes')
      next
    end
    if type_of_bump == :major
      UI.message('Skipping automatic bump since the next version is a major release')
      next
    end
    bump(options)
  end

  desc "Creates github release"
  lane :github_release do |options|
    release_version = options[:version]
    create_github_release(
      version: release_version,
      repo_name: repo_name,
      github_api_token: ENV["GITHUB_TOKEN"],
      changelog_latest_path: changelog_latest_path
    )
  end

  desc "Upload and close a release"
  lane :deploy do |options|
    version = current_version_number
    gradleProperties = {
      "signing.keyId" => ENV['GPG_SIGNING_KEY_ID_NEW'],
      "signing.password" => ENV['GPG_SIGNING_KEY_PW_NEW'],
      "signing.secretKeyRingFile" => "/home/circleci/.gnupg/secring.gpg",
      "mavenCentralUsername" => ENV['SONATYPE_NEXUS_TOKEN_USERNAME'],
      "mavenCentralPassword" => ENV['SONATYPE_NEXUS_TOKEN_PASSWORD'],
      "RELEASE_SIGNING_ENABLED" => true
    }
    UI.verbose("Deploying #{version}")
    gradle(
      tasks: [
        "publish --no-daemon --no-parallel"
      ],
      properties: gradleProperties
    )

    UI.verbose("Deploying Custom Entitlements Computation version")

    gradleProperties["ANDROID_VARIANT_TO_PUBLISH"] = "customEntitlementComputationRelease"
    gradleProperties["POM_ARTIFACT_ID"] = "purchases-custom-entitlement-computation"

    gradle(
      tasks: [
        "purchases:publish --no-daemon --no-parallel"
      ],
      properties: gradleProperties
    )

    github_release(version: version) unless is_snapshot_version?(version)
  end

  desc "Upload a snapshot release"
  lane :deploy_snapshot do |options|
    version = current_version_number
    deploy if is_snapshot_version?(version)
  end

  desc "Creates PR changing version to next minor adding a -SNAPSHOT suffix"
  lane :prepare_next_version do |options|
    create_next_snapshot_version(
      current_version: current_version_number,
      repo_name: repo_name,
      github_pr_token: ENV["GITHUB_PULL_REQUEST_API_TOKEN"],
      files_to_update: files_with_version_number
    )
  end

  desc "Tag current branch with current version number"
  lane :tag_current_branch do |options|
    version_number = current_version_number
    check_no_git_tag_exists(version_number)

    add_git_tag(tag: version_number)
    push_git_tags(tag: version_number)
  end

  desc "Build purchase tester app bundle"
  lane :build_purchase_tester_bundle do |options|
    build_number = ENV['CIRCLE_BUILD_NUM'] || UI.user_error!('Could not find CircleCI build number.')
    version_name = current_version_number
    release_key_alias = ENV['PURCHASE_TESTER_RELEASE_KEY_ALIAS'] || UI.user_error!('Release key alias not found.')
    release_key_password = ENV['PURCHASE_TESTER_RELEASE_KEY_PASSWORD'] || UI.user_error!('Release key password not found.')
    release_keystore_password = ENV['PURCHASE_TESTER_RELEASE_KEYSTORE_PASSWORD'] || UI.user_error!('Release keystore password not found.')
    gradle(
      task: 'examples:purchase-tester:bundle',
      build_type: 'Release',
      print_command: false,
      properties: {
        purchaseTesterSupportedStores: 'google',
        purchaseTesterVersionCode: build_number,
        purchaseTesterVersionName: version_name,
        releaseKeyAlias: release_key_alias,
        releaseKeyPassword: release_key_password,
        releaseKeystorePassword: release_keystore_password
      }
    )
  end

  desc "Build purchases module integration tests pointing to production"
  lane :build_default_purchases_integration_tests do |options|
    build_purchases_integration_tests(
        app_name: 'integrationTest',
        api_key: ENV['REVENUECAT_API_KEY'],
        google_purchase_token: ENV['GOOGLE_PURCHASE_TOKEN'],
        product_id_to_purchase: ENV['PRODUCT_ID_TO_PURCHASE'],
        base_plan_id_to_purchase: ENV['BASE_PLAN_ID_TO_PURCHASE'],
        # We default to empty active entitlements since we are using an expired token for these integration tests.
        # So no active entitlements will be returned by our servers.
        active_entitlements_to_verify: ENV['ACTIVE_ENTITLEMENTS_TO_VERIFY'] || '',
    )
  end

  desc "Build purchases module integration tests pointing to production"
  lane :run_backend_integration_tests do |options|
    constants_path = './purchases/src/test/java/com/revenuecat/purchases/backend_integration_tests/Constants.kt'
    replace_text_in_files(
      previous_text: 'REVENUECAT_API_KEY',
      new_text: ENV['REVENUECAT_API_KEY'],
      paths_of_files_to_update: [constants_path]
    )
    replace_text_in_files(
      previous_text: 'LOAD_SHEDDER_API_KEY',
      new_text: ENV['LOAD_SHEDDER_REVENUECAT_API_KEY'],
      paths_of_files_to_update: [constants_path]
    )
    gradle(
      task: ':purchases:testDefaultsDebugUnitTest',
      properties: {
        "RUN_INTEGRATION_TESTS" => true,
        "minSdkVersion" => 21,
      }
    )
  end

  desc "Build and run purchases module load shedder integration tests"
  desc "This requires the google cloud cli to be installed and initialized."
  lane :run_load_shedder_purchases_integration_tests do |options|
    app_name = 'loadShedderIntegrationTest'
    begin
      build_purchases_integration_tests(
        app_name: app_name,
        api_key: ENV['LOAD_SHEDDER_REVENUECAT_API_KEY'],
        google_purchase_token: ENV['LOAD_SHEDDER_GOOGLE_PURCHASE_TOKEN'],
        product_id_to_purchase: ENV['LOAD_SHEDDER_PRODUCT_ID_TO_PURCHASE'],
        base_plan_id_to_purchase: ENV['LOAD_SHEDDER_BASE_PLAN_ID_TO_PURCHASE'],
        active_entitlements_to_verify: ENV['LOAD_SHEDDER_ACTIVE_ENTITLEMENTS_TO_VERIFY'] || ''
      )

      run_firebase_integration_tests(app_name)
    rescue => exception
      send_slack_load_shedder_integration_test(success: false)
      raise
    else
      send_slack_load_shedder_integration_test(success: true)
    end
  end

  desc "Build and run purchases module custom entitlement computation integration tests"
  desc "This requires the google cloud cli to be installed and initialized."
  lane :run_custom_entitlement_computation_integration_tests do |options|
    app_name = 'customEntitlementComputationIntegrationTest'
    build_purchases_integration_tests(
      app_name: app_name,
      api_key: ENV['CUSTOM_ENTITLEMENT_COMPUTATION_REVENUECAT_API_KEY'],
      google_purchase_token: ENV['CUSTOM_ENTITLEMENT_COMPUTATION_GOOGLE_PURCHASE_TOKEN'],
      product_id_to_purchase: ENV['CUSTOM_ENTITLEMENT_COMPUTATION_PRODUCT_ID_TO_PURCHASE'],
      base_plan_id_to_purchase: ENV['CUSTOM_ENTITLEMENT_COMPUTATION_BASE_PLAN_ID_TO_PURCHASE'],
      # We default to empty active entitlements since we are using an expired token for these integration tests.
      # So no active entitlements will be returned by our servers.
      active_entitlements_to_verify: ENV['CUSTOM_ENTITLEMENT_COMPUTATION_ACTIVE_ENTITLEMENTS_TO_VERIFY'] || '',
      flavor: 'customEntitlementComputation'
    )

    run_firebase_integration_tests(app_name)
  end

  def run_firebase_integration_tests(app_name)
    google_project_id = ENV['GOOGLE_PROJECT_ID'] || UI.user_error!('Google project id not found.')

    # We run the test on google firebase test labs
    sh "gcloud firebase test android run --type instrumentation \
          --app ../purchases/test_artifacts/#{app_name}-app.apk \
          --test ../purchases/test_artifacts/#{app_name}-test.apk \
          --timeout 2m \
          --results-bucket cloud-test-#{google_project_id}"

    dir_path = File.join(Dir.home, 'gsutil')
    FileUtils.mkdir_p(dir_path)
    # We copy the test results from google cloud to the ~/gsutil folder. We use the tail -1 to get the latest
    sh "gsutil -m cp -r -U `gsutil ls gs://cloud-test-#{google_project_id} | tail -1` ~/gsutil/ | true"
  end

  def build_purchases_integration_tests(app_name:, api_key:, google_purchase_token:, product_id_to_purchase:,
                                        base_plan_id_to_purchase:, active_entitlements_to_verify: '',
                                        proxy_url: nil, build_type: 'release', flavor: 'defaults')
    constants_path = './purchases/src/androidTest/kotlin/com/revenuecat/purchases/Constants.kt'
    replace_text_in_files(
      previous_text: "REVENUECAT_API_KEY",
      new_text: api_key,
      paths_of_files_to_update: [constants_path]
    )
    replace_text_in_files(
      previous_text: "GOOGLE_PURCHASE_TOKEN",
      new_text: google_purchase_token,
      paths_of_files_to_update: [constants_path]
    )
    replace_text_in_files(
      previous_text: "PRODUCT_ID_TO_PURCHASE",
      new_text: product_id_to_purchase,
      paths_of_files_to_update: [constants_path]
    )
    replace_text_in_files(
      previous_text: "BASE_PLAN_ID_TO_PURCHASE",
      new_text: base_plan_id_to_purchase,
      paths_of_files_to_update: [constants_path]
    )
    replace_text_in_files(
      previous_text: "ACTIVE_ENTITLEMENT_IDS_TO_VERIFY",
      new_text: active_entitlements_to_verify,
      allow_empty: true,
      paths_of_files_to_update: [constants_path]
    )
    unless proxy_url.nil?
      replace_text_in_files(
        previous_text: "NO_PROXY_URL",
        new_text: proxy_url,
        paths_of_files_to_update: [constants_path]
      )
    end

    # We need to build the same apk twice since firebase test labs don't allow the app and test apks
    # to have same package name

    # Build test apk
    build_purchases_android_test_apk("com.revenuecat.purchases.integrationtests.test", "#{app_name}-app", build_type, flavor)

    # Build app apk
    build_purchases_android_test_apk("com.revenuecat.purchases.integrationtests", "#{app_name}-test", build_type, flavor)
  end

  desc "Publish purchase tester to test track in Play Console"
  lane :publish_purchase_tester do |options|
    json_key_data = ENV["PUBLISH_SERVICE_ACCOUNT_JSON_KEY_DATA"] || UI.user_error!("Missing JSON key data to publish purchase tester.")
    aab_path = options[:aab_path] || UI.user_error!("Missing aab_path parameter.")
    upload_to_play_store(
      package_name: 'com.revenuecat.purchases_sample',
      track: 'alpha',
      json_key_data: json_key_data,
      aab: aab_path
    )
  end

  desc "Builds a Magic Weather Compose APK"
  lane :build_magic_weather_compose do |options|
    project_dir = "examples/MagicWeatherCompose"
    task = "assembleDebug"
    gradle(
      project_dir: project_dir,
      task: task,
    )
  end

  desc "Builds a Magic Weather Compose APK"
  lane :build_custom_entitlement_computation_sample do |options|
    project_dir = "examples/CustomEntitlementComputationSample"
    task = "assembleDebug"
    gradle(
      project_dir: project_dir,
      task: task,
    )
  end

  desc <<-DESC
Builds a Magic Weather APK and prompts for:
* Gradle task
* Amazon or Google API Key for RevenueCat
* Version code
* Version name
* Amazon pem path (optional)
* New application id (optional)
DESC
  lane :build_magic_weather do |options|
    ensure_git_status_clean

    begin
      project_dir = "examples/MagicWeather"

      tasks = [
        "assembleAmazonDebug", 
        "assembleAmazonRelease", 
        "assembleGoogleDebug", 
        "assembleGoogleRelease", 
      ]
      task = options[:task] || UI.select("Which task?", tasks)

      amazon_api_key = options[:amazon_api_key] || UI.input("Amazon API Key?") if task.include?("Amazon")
      google_api_key = options[:google_api_key] || UI.input("Google API Key?") if task.include?("Google")

      version_code = options[:version_code] || UI.input("Version code?")
      version_name = options[:version_name] || UI.input("Version name?")

      amazon_pem_path = options[:amazon_pem_path] || UI.input("Amazon .pem path?")

      new_application_id = options[:application_id] || UI.input("New application id? (blank for no)")

      # API keys
      constants_path = "../examples/MagicWeather/app/src/main/java/com/revenuecat/sample/data/Constants.kt"
      constants_text = File.read(constants_path)

      constants_text = constants_text.gsub("amzn_api_key", amazon_api_key) if amazon_api_key.to_s.size > 0
      constants_text = constants_text.gsub("googl_api_key", google_api_key) if google_api_key.to_s.size > 0

      File.write(constants_path, constants_text)

      # Application Id
      if new_application_id.to_s.size > 0
        application_id = "com.revenuecat.purchases_sample"
        sh("find ../#{project_dir}/app -name 'build.gradle' -type f -exec sed -i '' 's/#{application_id}/#{new_application_id}/' {} \\;")
      end

      # Amazon pem
      if amazon_pem_path.to_s.size > 0
        pem_dir = "../examples/MagicWeather/app/src/main/assets"
        pem_file = "AppstoreAuthenticationKey.pem"
        FileUtils.mkdir_p(pem_dir)
        FileUtils.cp(amazon_pem_path, File.join(pem_dir, pem_file))
      end

      # Build APK
      gradle(
        project_dir: project_dir,
        task: task,
        properties: {
          "versionCode" => version_code,
          "versionName" => version_name,
        }
      )

      # View APK info for sanity checking
      path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
      if UI.confirm("Do you want to see APK info from 'aapt dump bading'?")
        sh("aapt dump badging #{path}")
      end

      # Final result
      UI.important("APK at #{path}")
      if UI.confirm("Open directory of APK?")
        dir = File.dirname(path)
        sh("open #{dir}")
      end
    ensure
      sh("git reset --hard")
      sh("git -C .. clean -fd")
    end
  end

  desc <<-DESC
Builds a Purchase Tester APK and prompts for:
* Version code
* Version name
* Min SDK Version
* Amazon pem path (optional)
DESC
  lane :build_purchase_tester do |options|
    ensure_git_status_clean

    begin
      project_dir = "examples/purchase-tester"
      task = ":examples:purchase-tester:assembleDebug"

      version_code = options[:version_code] || UI.input("Version code?")
      version_name = options[:version_name] || UI.input("Version name?")
      min_sdk_version = options[:min_sdk_version] || UI.input("Minimum SDK Version?")

      amazon_pem_path = options[:amazon_pem_path] || UI.input("Amazon .pem path?")

      # Replace version 
      version_code_old = "purchaseTesterVersionCode=1"
      version_code_new = "purchaseTesterVersionCode=#{version_code}"
      sh("find ../ -name 'gradle.properties' -type f -exec sed -i '' 's/#{version_code_old}/#{version_code_new}/' {} \\;")

      version_name_old = "purchaseTesterVersionName=1.0"
      version_name_new = "purchaseTesterVersionName=#{version_code}"
      sh("find ../ -name 'gradle.properties' -type f -exec sed -i '' 's/#{version_name_old}/#{version_name_new}/' {} \\;")

      min_sdk_version_old = "purchaseTesterMinSdkVersion=21"
      min_sdk_version_new = "purchaseTesterMinSdkVersion=#{min_sdk_version}"
      sh("find ../ -name 'gradle.properties' -type f -exec sed -i '' 's/#{min_sdk_version_old}/#{min_sdk_version_new}/' {} \\;")

      # Amazon pem
      if amazon_pem_path.to_s.size > 0
        pem_dir = File.join("../", project_dir, "src/main/assets")
        pem_file = "AppstoreAuthenticationKey.pem"
        FileUtils.mkdir_p(pem_dir)
        FileUtils.cp(amazon_pem_path, File.join(pem_dir, pem_file))
      end

      # Build APK
      gradle(
        task: task
      )

      # View APK info for sanity checking
      path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
      if UI.confirm("Do you want to see APK info from 'aapt dump bading'?")
        sh("aapt dump badging #{path}")
      end

      # Final result
      UI.important("APK at #{path}")
      if UI.confirm("Open directory of APK?")
        dir = File.dirname(path)
        sh("open #{dir}")
      end
    ensure
      sh("git reset --hard")
      sh("git -C .. clean -fd")
    end
  end

  lane :send_slack_load_shedder_integration_test do |options|
    success = options[:success] || false
    message =
        if success
            "Android load shedder integration tests V6 finished successfully"
        else
            "Android load shedder integration tests V6 failed"
        end
    slack(
      message: message,
      slack_url: ENV["SLACK_URL_LOAD_SHEDDER_INTEGRATION_TESTS"],
      success: success,
      default_payloads: [:git_branch]
    )
  end
end

def is_snapshot_version?(version_name)
  version_name.end_with?("-SNAPSHOT")
end

def current_version_number
  File.read("../.version").strip
end

def check_no_git_tag_exists(version_number)
  if git_tag_exists(tag: version_number, remote: true, remote_name: 'origin')
    raise "git tag with version #{version_number} already exists!"
  end
end

def build_purchases_android_test_apk(package_name, apk_name, build_type, flavor)
  task_to_run = flavor == 'defaults' ? 'assembleDefaultsAndroidTest' : 'assembleCustomEntitlementComputationAndroidTest'
  gradle(
    task: ":purchases:#{task_to_run}",
    properties: {
      "testApplicationId" => package_name,
      "testBuildType" => build_type,
      "minSdkVersion" => 21
    }
  )
  apk_path = "../purchases/build/outputs/apk/androidTest/#{flavor}/#{build_type}/purchases-#{flavor}-#{build_type}-androidTest.apk"
  new_apk_path = "../purchases/build/outputs/apk/androidTest/#{flavor}/#{build_type}/#{apk_name}.apk"
  sh "mv #{apk_path} #{new_apk_path}"
  copy_artifacts(
    target_path: 'purchases/test_artifacts',
    artifacts: ['purchases/build/**/*.apk'],
    fail_on_missing: true
  )
end
