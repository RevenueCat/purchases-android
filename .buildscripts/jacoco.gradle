def coveredProject = subprojects

apply plugin: 'jacoco'

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

configure(coveredProject) { prj ->
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.8.5"
    }

    task jacocoReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
        group = 'Reporting'
        description = 'Generate Jacoco coverage'

        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
        final fileFilter = ['**/R.class',
                            '**/R$*.class',
                            '**/*$ViewInjector*.*',
                            '**/*$ViewBinder*.*',
                            '**/BuildConfig.*',
                            '**/Manifest*.*',
                            '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                            '**/*$inlined$*.*' // Kotlin specific, Jacoco can not handle several "$" in class name.
        ]
        final kotlinTree = fileTree(dir: "${prj.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
        final javacTree = fileTree(dir: "${prj.buildDir}/intermediates/javac/debug", excludes: fileFilter)
        final mainSrc = [
                "${prj.projectDir}/src/main/java",
                "${prj.projectDir}/src/main/kotlin",
        ]

        sourceDirectories.setFrom(files(mainSrc))
        getClassDirectories().setFrom(files([kotlinTree, javacTree]))
        executionData.setFrom fileTree(dir: prj.buildDir, includes: [
                'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
        ])
    }
}

task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    group = 'Reporting'
    description = 'Generates an aggregate report from all subprojects'

    tasks.withType(Test) {
        ignoreFailures true
    }

    def projects = coveredProject
    //noinspection GrUnresolvedAccess
    dependsOn(projects.jacocoReport)

    final source = files(projects.jacocoReport.sourceDirectories)

    additionalSourceDirs.setFrom source
    sourceDirectories.setFrom source

    classDirectories.setFrom files(projects.jacocoReport.classDirectories)
    executionData.setFrom files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination file('build/reports/jacoco/html')
        }
        xml {
            enabled true
            destination file('build/reports/jacoco/jacocoFullReport.xml')
        }
    }

    doFirst {
        //noinspection GroovyAssignabilityCheck
        executionData.setFrom files(executionData.findAll { it.exists() })
    }
}

coveralls {
//    print("$jacocoFullReport.sourceDirectories")
//    sourceDirs = ['purchases/src/main/kotlin', 'purchases/src/main/kotlin']
    jacocoReportPath 'build/reports/jacoco/testDebugUnitTestCoverage/testDebugUnitTestCoverage.xml'
}