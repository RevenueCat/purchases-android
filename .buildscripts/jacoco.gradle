apply plugin: 'jacoco'
jacoco { toolVersion = "0.8.5" }

tasks.withType(Test) { jacoco.includeNoLocationClasses = true }

project.afterEvaluate {

    (android.hasProperty('applicationVariants')
            ? android.'applicationVariants'
            : android.'libraryVariants').all { variant ->
        def variantName = variant.name
        def unitTestTask = "test${variantName.capitalize()}UnitTest"

        tasks.create(name: "${unitTestTask}Coverage", type: JacocoReport, dependsOn: [
                "$unitTestTask",
        ]) {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build"

            reports {
                html.enabled = true
                xml.enabled = true
                csv.enabled = false
            }

            getClassDirectories().setFrom(
                    fileTree(
                            dir: "$project.rootDir/purchases/build/tmp/kotlin-classes/debug",
                            excludes: ['**/R.class',
                                       '**/R$*.class',
                                       '**/*$ViewInjector*.*',
                                       '**/*$ViewBinder*.*',
                                       '**/BuildConfig.*',
                                       '**/Manifest*.*',
                                       '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                                       '**/*$inlined$*.*', // Kotlin specific, Jacoco can not handle several "$" in class name.
                                       '**/*Module.*', // Modules for Dagger.
                                       '**/*Dagger*.*', // Dagger auto-generated code.
                                       '**/*MembersInjector*.*', // Dagger auto-generated code.
                                       '**/*_Provide*Factory*.*'] // Dagger auto-generated code.
                    )
            )

            def coverageSourceDirs = [
                    "$project.rootDir/purchases/src/main/java",
                    "$project.rootDir/purchases/src/main/kotlin",
            ]
            additionalSourceDirs.setFrom(files(coverageSourceDirs))
            sourceDirectories.setFrom(files(coverageSourceDirs))

            executionData(files([
                    "$project.rootDir/purchases/build/jacoco/${unitTestTask}.exec",
            ]))
        }
    }
}

coveralls {
    sourceDirs = ['purchases/src/main/kotlin', 'purchases/src/main/kotlin']
    jacocoReportPath 'purchases/build/reports/jacoco/testDebugUnitTestCoverage/testDebugUnitTestCoverage.xml'
}