aliases:
  release-tags: &release-tags
    filters:
      tags:
        ignore:
          - /^.*-SNAPSHOT/
          - latest
          - /^.*-amazon*/
      branches:
        ignore: /.*/

  release-branches: &release-branches
    filters:
      tags:
        ignore: /.*/
      branches:
        only: /^release\/.*/

  only-main-branch: &only-main-branch
    filters:
      tags:
        ignore: /.*/
      branches:
        only: main

  android-executor: &android-executor
    executor:
      name: android/android-docker
      resource-class: large
      tag: 2024.04.1
    environment:
      JVM_OPTS: -Xmx6g
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"

  android-machine-emulator: &android-machine-emulator
    executor:
      name: android/android-machine
      resource-class: large
      tag: 2024.04.1

version: 2.1
orbs:
  android: circleci/android@2.5.0
  gcp-cli: circleci/gcp-cli@3.3.1
  revenuecat: revenuecat/sdks-common-config@3.0.0
  codecov: codecov/codecov@3.2.4

parameters:
  action:
    type: enum
    enum: [default, bump, paywall_tester_release, deploy_snapshot_release, update_paywall_templates, run-maestro]
    default: default

commands:
  install-sdkman:
    description: Install SDKMAN
    steps:
      - run:
          name: Installing SDKMAN
          command: |
            if curl -s "https://get.sdkman.io?rcupdate=false" | bash; then
              echo -e '\nsource "/home/circleci/.sdkman/bin/sdkman-init.sh"' >> $BASH_ENV
              source $BASH_ENV
            else
              echo "Error installing SDKMAN, continuing with default Java" >&2
            fi
      - run:
          name: Setup Java environment
          command: |
            if ! sdk env install; then
              echo "Error installing Java SDK through SDKMAN, continuing with default Java" >&2
            fi

  android-dependencies:
    steps:
      - android/restore-gradle-cache
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - android/save-gradle-cache

  prepare-signing-key:
    steps:
      - run:
          name: Prepare GPG keystore file
          command: |
            export GPG_KEY_FILE=`mktemp`
            echo "export GPG_KEY=$GPG_KEY_FILE" >> $BASH_ENV
      - run:
          name: Base64 decode gpg keystore to file
          command: echo $SIGNING_GPG_BASE64 | base64 --decode > $GPG_KEY
      - run:
          name: Import GPG keys
          command: gpg --batch --import $GPG_KEY
      - run:
          name: Fixing GPG compatibility
          command: |
            echo $GPG_SIGNING_KEY_PW_NEW | gpg --batch --pinentry-mode=loopback --passphrase-fd 0 \
            --export-secret-keys > /home/circleci/.gnupg/secring.gpg

  run-firebase-tests:
    parameters:
      app_apk_path:
        type: string
      test_apk_path:
        type: string
    steps:
      - gcp-cli/setup:
          gcloud_service_key: GCLOUD_SERVICE_KEY
          google_compute_zone: GOOGLE_COMPUTE_ZONE
          google_project_id: GOOGLE_PROJECT_ID
      - run:
          name: Test with Firebase Test Lab
          command: >
            gcloud firebase test android run --type instrumentation \
              --app <<parameters.app_apk_path>> \
              --test <<parameters.test_apk_path>> \
              --device model=MediumPhone.arm,version=33,locale=en,orientation=portrait \
              --timeout 2m \
              --results-bucket cloud-test-${GOOGLE_PROJECT_ID}
      - run:
          name: Copy test results data
          command: |
            mkdir -p ~/gsutil/
            gsutil -m cp -r -U `gsutil ls gs://cloud-test-$GOOGLE_PROJECT_ID | tail -1` ~/gsutil/ | true
          when: always
      - store_artifacts:
          path: ~/gsutil/
      - store_test_results:
          path: ~/gsutil/

  build-paywall-tester:
    steps:
      - android/accept-licenses
      - android/restore-gradle-cache
      - android/restore-build-cache
      - run:
          name: Prepare Keystore
          working_directory: examples/paywall-tester
          command: echo $PAYWALL_TESTER_RELEASE_KEYSTORE | base64 -d > keystore
      - run:
          name: Replace API_KEY
          working_directory: examples/paywall-tester/src/main/java/com/revenuecat/paywallstester/
          command: |
            sed -i 's/"API_KEY_A_LABEL"/"Paywalls V2 Alpha"/' Constants.kt
            sed -i s/\"API_KEY_A\"/\"$PAYWALLS_V2_ALPHA_API_KEY\"/ Constants.kt
            sed -i 's/"API_KEY_B_LABEL"/"Official Paywalls V2 Template Repo"/' Constants.kt
            sed -i s/\"API_KEY_B\"/\"$PAYWALLS_V2_TEMPLATE_REPO_API_KEY\"/ Constants.kt
      - run:
          name: Create app bundle
          command: |
            bundle exec fastlane android build_paywall_tester_bundle
      - store_artifacts:
          path: examples/paywall-tester/build/outputs/bundle/release/paywall-tester-release.aab
      - android/save-gradle-cache
      - android/save-build-cache

  install-ruby:
    description: "Installs the provided version of Ruby using RVM."
    parameters:
      version:
        type: string
    steps:
      - run:
          name: Install RVM and Ruby << parameters.version >>
          command: |
            # Import GPG keys first
            command curl -sSL https://rvm.io/mpapis.asc | gpg --import -
            command curl -sSL https://rvm.io/pkuczynski.asc | gpg --import -
            # Install RVM and Ruby
            \curl -sSL https://get.rvm.io | bash -s stable
            source ~/.rvm/scripts/rvm
            rvm install << parameters.version >>
            rvm use << parameters.version >>
            echo 'source ~/.rvm/scripts/rvm' >> $BASH_ENV
            echo 'rvm use << parameters.version >>' >> $BASH_ENV
            source $BASH_ENV
            ruby -v
  
  checkout-submodule:
    description: "Checks out a git submodule."
    parameters:
      path:
        type: string
        default: ""
    steps:
      - run: 
          name: Check out submodule << parameters.path >>
          command: |
            git submodule init << parameters.path >>
            git submodule update << parameters.path >>

jobs:

  assemble-magic-weather-compose-sample-app:
    <<: *android-executor
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - install-sdkman
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - android/accept-licenses
      - android-dependencies
      - android/restore-build-cache
      - run:
          name: Build sample app
          command: bundle exec fastlane android build_magic_weather_compose
      - android/save-build-cache

  assemble-custom-entitlement-computation-sample-app:
    <<: *android-executor
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - install-sdkman
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - android/accept-licenses
      - android-dependencies
      - android/restore-build-cache
      - run:
          name: Build sample app
          command: bundle exec fastlane android build_custom_entitlement_computation_sample
      - android/save-build-cache

  test:
    <<: *android-executor
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - install-sdkman
      - android/accept-licenses
      - android-dependencies
      - android/restore-build-cache
      - run:
          name: Verify purchases-android target SDK compatibility (currently 33)
          command: ./gradlew :test-apps:testpurchasesandroidcompatibility:assembleDebug
      - run:
          name: Verify purchases-ui target SDK compatibility (currently 34)
          command: ./gradlew :test-apps:testpurchasesuiandroidcompatibility:assembleDebug
      - run:
          name: Run Tests
          command: ./gradlew lint test
      - run:
          name: Consolidate artifacts
          command: |
              mkdir -p build/test-results/
              find . -type f -regex ".*/build/test-results/.*xml" -exec cp --parents {} build/test-results/ \;
      - run:
          name: Kover HTML
          command: ./gradlew purchases:koverHtmlReportDefaultsRelease
      - run:
          name: Kover XML
          command: ./gradlew purchases:koverXmlReportDefaultsRelease
      - codecov/upload:
          file: purchases/build/reports/kover/reportDefaultsRelease.xml
      - android/save-build-cache
      - store_artifacts:
          path: build/reports
      - run:
          name: Save test results
          command: |
            mkdir -p build/test-results
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} build/test-results \;
          when: always
      - store_test_results:
          path: build/test-results

  detekt:
    <<: *android-executor
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - install-sdkman
      - android/restore-gradle-cache
      - run:
          name: Detekt
          command: ./gradlew detektAll
      - android/save-gradle-cache

  docs-deploy:
    <<: *android-executor
    steps:
      - checkout
      - install-sdkman
      - android/restore-gradle-cache
      - android/restore-build-cache
      - run:
          name: Dokka
          command: ./gradlew dokkaHtmlMultiModule
      - android/save-gradle-cache
      - android/save-build-cache
      - run:
          name: Install pip
          command: sudo apt update && sudo apt install python3-pip
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: Deploy to S3
          command: aws s3 sync ~/project/docs/8.16.0-SNAPSHOT s3://purchases-docs/android/8.16.0-SNAPSHOT --delete
      - run:
          name: Update index.html
          command: aws s3 cp ~/project/docs/index.html s3://purchases-docs/android/index.html
      - run:
          name: Invalidate CloudFront caches
          command: aws cloudfront create-invalidation --distribution-id EPTW7F3CB566V --paths "/*"

  deploy:
    <<: *android-executor
    steps:
      - checkout
      - install-sdkman
      - revenuecat/setup-git-credentials
      - revenuecat/trust-github-key
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - prepare-signing-key
      - android/restore-gradle-cache
      - android/restore-build-cache
      - run:
          name: Deployment
          command: |
            bundle exec fastlane android deploy
      - android/save-gradle-cache
      - android/save-build-cache

  prepare-next-version:
    <<: *android-executor
    steps:
      - checkout
      - install-sdkman
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - revenuecat/setup-git-credentials
      - revenuecat/trust-github-key
      - run:
          name: Prepare next version
          command: bundle exec fastlane prepare_next_version

  deploy-snapshot:
    <<: *android-executor
    steps:
      - checkout
      - install-sdkman
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - android/restore-gradle-cache:
          cache-prefix: v1a
      - android/restore-build-cache:
          cache-prefix: v1a
      - prepare-signing-key
      - run:
          name: Deployment
          command: |
            bundle exec fastlane android deploy_snapshot
      - android/save-gradle-cache:
          cache-prefix: v1a
      - android/save-build-cache:
          cache-prefix: v1a

  assemble-purchase-tester:
    <<: *android-executor
    steps:
      - checkout
      - install-sdkman
      - android/accept-licenses
      - android/restore-gradle-cache
      - android/restore-build-cache
      - run:
          name: Prepare Keystore
          working_directory: examples/purchase-tester
          command: echo $RELEASE_KEYSTORE | base64 -d > keystore
      - run:
          name: Assemble
          command: |
            ./gradlew -p examples/purchase-tester assemble \
            -PreleaseKeyAlias=$RELEASE_KEY_ALIAS \
            -PreleaseKeystorePassword=$RELEASE_KEYSTORE_PASSWORD \
            -PreleaseKeyPassword=$RELEASE_KEY_PASSWORD
      - store_artifacts:
          path: examples/purchase-tester/build/outputs/apk/release/purchase-tester-release.apk
      - store_artifacts:
          path: examples/purchase-tester/build/outputs/apk/debug/purchase-tester-debug.apk
      - android/save-gradle-cache
      - android/save-build-cache

  publish-purchase-tester-release:
    <<: *android-executor
    steps:
      - checkout
      - install-sdkman
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - android/accept-licenses
      - android/restore-gradle-cache
      - android/restore-build-cache
      - run:
          name: Prepare Keystore
          working_directory: examples/purchase-tester
          command: echo $PURCHASE_TESTER_RELEASE_KEYSTORE | base64 -d > keystore
      - run:
          name: Create app bundle
          command: |
            bundle exec fastlane android build_purchase_tester_bundle
      - store_artifacts:
          path: examples/purchase-tester/build/outputs/bundle/release/purchase-tester-release.aab
      - android/save-gradle-cache
      - android/save-build-cache
      - run:
            name: Publish aab
            command: |
              bundle exec fastlane android publish_purchase_tester aab_path:'examples/purchase-tester/build/outputs/bundle/release/purchase-tester-release.aab'

  assemble-paywall-tester-release:
    <<: *android-executor
    steps:
      - checkout
      - install-sdkman
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - build-paywall-tester

  publish-paywall-tester-release:
    <<: *android-executor
    parameters:
      track:
        type: string
    steps:
      - checkout
      - install-sdkman
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - build-paywall-tester
      - run:
            name: Publish aab
            command: |
              bundle exec fastlane android publish_paywall_tester aab_path:'examples/paywall-tester/build/outputs/bundle/release/paywall-tester-release.aab' track:'<< parameters.track >>'

  integration-tests-build:
    <<: *android-executor
    steps:
      - checkout
      - install-sdkman
      - run:
          name: Replace API_KEY
          working_directory: integration-tests/src/androidTest/java/com/revenuecat/purchases/integrationtests/
          command: |
            sed -i s/REVENUECAT_API_KEY/$API_KEY/ IntegrationTest.kt
      - android/restore-build-cache
      - run:
          name: Prepare Keystore
          working_directory: integration-tests
          command: echo $RELEASE_KEYSTORE | base64 -d > keystore
      - run:
          name: Assemble Release APK
          command: |
            ./gradlew -p integration-tests assembleRelease \
            -PreleaseKeyAlias=$RELEASE_KEY_ALIAS \
            -PreleaseKeystorePassword=$RELEASE_KEYSTORE_PASSWORD \
            -PreleaseKeyPassword=$RELEASE_KEY_PASSWORD
      - run:
          name: Assemble AndroidTest APK
          command: |
            ./gradlew -p integration-tests assembleAndroidTest -PtestBuildType=release \
            -PreleaseKeyAlias=$RELEASE_KEY_ALIAS \
            -PreleaseKeystorePassword=$RELEASE_KEYSTORE_PASSWORD \
            -PreleaseKeyPassword=$RELEASE_KEY_PASSWORD
      - android/save-build-cache
      - persist_to_workspace:
          root: .
          paths:
            - integration-tests/build/outputs/apk/release/integration-tests-release.apk
            - integration-tests/build/outputs/apk/androidTest/release/integration-tests-release-androidTest.apk

  purchases-integration-tests-build:
    <<: *android-executor
    steps:
      - checkout
      - install-sdkman
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - android/restore-build-cache
      - run:
          name: Create purchases integration tests apks
          command: |
            bundle exec fastlane android build_default_purchases_integration_tests
      - android/save-build-cache
      - persist_to_workspace:
          root: .
          paths:
            - purchases/test_artifacts/integrationTest-app.apk
            - purchases/test_artifacts/integrationTest-test.apk

  run-firebase-tests-purchases-integration-test:
    description: "Run purchases module integration tests for Android in Firebase. Variant integrationTest"
    executor: gcp-cli/google
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run-firebase-tests:
          app_apk_path: purchases/test_artifacts/integrationTest-app.apk
          test_apk_path: purchases/test_artifacts/integrationTest-test.apk

  run-firebase-tests-purchases-load-shedder-integration-test:
    description: "Run purchases module integration tests for Android in Firebase using the load shedder servers"
    <<: *android-executor
    steps:
      - checkout
      - install-sdkman
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - gcp-cli/install
      - gcp-cli/setup:
          gcloud_service_key: GCLOUD_SERVICE_KEY
          google_compute_zone: GOOGLE_COMPUTE_ZONE
          google_project_id: GOOGLE_PROJECT_ID
      - android/restore-build-cache
      - run:
          name: Build and run load shedder integration tests
          command: |
            bundle exec fastlane android run_load_shedder_purchases_integration_tests
      - android/save-build-cache
      - store_artifacts:
          path: ~/gsutil/
      - store_test_results:
          path: ~/gsutil/

  run-firebase-tests-purchases-custom-entitlement-computation-integration-test:
    description: "Run purchases module integration tests in the custom entitlement computation flavor for Android in Firebase."
    <<: *android-executor
    steps:
      - checkout
      - install-sdkman
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - gcp-cli/install
      - gcp-cli/setup:
          gcloud_service_key: GCLOUD_SERVICE_KEY
          google_compute_zone: GOOGLE_COMPUTE_ZONE
          google_project_id: GOOGLE_PROJECT_ID
      - android/restore-build-cache
      - run:
          name: Build and run custom entitlement computation integration tests
          command: |
            bundle exec fastlane android run_custom_entitlement_computation_integration_tests
      - android/save-build-cache
      - store_artifacts:
          path: ~/gsutil/
      - store_test_results:
          path: ~/gsutil/

  emerge_purchases_ui_snapshot_tests:
    description: "Emerge purchases ui snapshot tests"
    <<: *android-executor
    steps:
      - checkout
      - checkout-submodule:
          path: upstream/paywall-preview-resources
      - install-sdkman
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - android/restore-build-cache
      - run:
          name: Build and run purchases ui snapshot tests
          command: |
            bundle exec fastlane android emerge_purchases_ui_snapshot_tests
      - android/save-build-cache

  run-firebase-tests:
    description: "Run integration tests for Android in Firebase. Variant latestDependencies"
    executor: gcp-cli/google
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run-firebase-tests:
          app_apk_path: integration-tests/build/outputs/apk/release/integration-tests-release.apk
          test_apk_path: integration-tests/build/outputs/apk/androidTest/release/integration-tests-release-androidTest.apk

  run-backend-integration-tests:
    description: "Run backend integration tests. All variants"
    <<: *android-executor
    steps:
      - checkout
      - install-sdkman
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - android/restore-build-cache
      - run:
          name: Run backend integration tests
          command: |
            bundle exec fastlane android run_backend_integration_tests
      - android/save-build-cache
      - run:
          name: Save test results
          command: |
            mkdir -p build/test-results
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} build/test-results \;
          when: always
      - store_test_results:
          path: build/test-results

  record-and-upload-paparazzi-revenuecatui-snapshots:
    description: "Record new RevenueCatUI snapshots with Paparazzi and upload them to Emerge"
    <<: *android-executor
    steps:
      - checkout
      - install-sdkman
      # Required by Emerge CLI
      - install-ruby:
          version: 3.2.0
      - run:
          name: Install Emerge CLI
          command: gem install emerge
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - android/restore-build-cache
      - revenuecat/setup-git-credentials
      - run:
          name: Records new RevenueCat UI snapshots to become the new golden
          command: ./gradlew ui:revenuecatui:recordPaparazziDebug
      - run:
          name: Records new debug view snapshots to become the new golden
          command: ./gradlew ui:debugview:recordPaparazziDebug
      - run:
          name: Upload snapshots to Emerge
          command: |
            # Take the last path segment of the CIRCLE_PULL_REQUEST url if it exists.
            PR_NUM=""
            if [ -n "$CIRCLE_PULL_REQUEST" ] && [[ "$CIRCLE_PULL_REQUEST" == */* ]]; then
              PR_NUM=$(echo "$CIRCLE_PULL_REQUEST" | rev | cut -d'/' -f1 | rev)
            fi
            # If PR_NUM is still empty, try to parse it from the branch name.
            if [ -z "$PR_NUM" ]; then
              branch=$(git rev-parse --abbrev-ref HEAD)
              # The branch name must follow this format:
              #   gh-readonly-queue/<base-branch>/pr-<number>-<base-commit>
              PR_NUM=$(echo "$branch" | sed -En 's/^gh-readonly-queue\/[^/]+\/pr-([0-9]+)-[0-9a-f]+$/\1/p')
            fi
            # Set base-sha to empty string if no PR number is found.
            PR_ARG=""
            if [ -n "$PR_NUM" ]; then
              PR_ARG="--pr-number $PR_NUM"
            else
              PR_ARG="--base-sha \"\""
            fi

            emerge upload snapshots \
              --name "TestPurchasesUIAndroidCompatibility Paparazzi" \
              --id "com.revenuecat.testpurchasesuiandroidcompatibility.paparazzi" \
              --repo-name "RevenueCat/purchases-android" \
              --debug \
              --client-library paparazzi \
              $PR_ARG \
              --project-root .
      - android/save-build-cache

  run-revenuecatui-ui-tests:
    description: "Run RevenueCatUI UI tests for Android in CircleCI"
    <<: *android-machine-emulator
    steps:
      - checkout
      - install-sdkman
      - android/create-avd:
          avd-name: test-revenuecat-ui
          system-image: system-images;android-32;google_apis;x86_64
          install: true
      - android/start-emulator:
          avd-name: test-revenuecat-ui
          post-emulator-launch-assemble-command: ./gradlew ui:revenuecatui:assembleDebugAndroidTest
      - run:
          command: |
            ./gradlew ui:revenuecatui:connectedDebugAndroidTest

  update-paywall-preview-resources-submodule:
    docker:
      - image: cimg/ruby:3.2.0
    steps:
      - checkout
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - revenuecat/setup-git-credentials
      - run:
          name: Update paywall templates
          command: bundle exec fastlane android update_paywall_preview_resources_submodule

  maestro:
    <<: *android-machine-emulator
    steps:
      - checkout
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - revenuecat/setup-git-credentials

      - android/create-avd:
          avd-name: test-maestro
          system-image: system-images;android-32;google_apis;x86_64
          install: true
      - android/start-emulator:
          avd-name:test-maestro
          post-emulator-launch-assemble-command: ./gradlew :examples:paywall-tester:assembleDebug
      # - run:
      #     name: Build & Install PaywallsTester for Maestro
      #     command: bundle exec fastlane build_paywalls_tester_for_maestro
      - run:
          name: Install Maestro CLI
          command: |
            curl -Ls "https://get.maestro.mobile.dev" | bash
      - run:
          name: Run Maestro Tests
          command: |
            maestro test maestro/

workflows:
  version: 2
  danger:
    when:
      and:
        - not:
            equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "default", << pipeline.parameters.action >> ]
    jobs:
      - revenuecat/danger

  snapshot-deploy-manual:
    when:
      equal: [ deploy_snapshot_release, << pipeline.parameters.action >> ]
    jobs:
      - deploy-snapshot

  snapshot-deploy-sample-app-tests:
    when:
      and:
        - not:
            equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "main", << pipeline.git.branch >> ]
        - equal: [ "default", << pipeline.parameters.action >> ]
    jobs:
      - deploy-snapshot
      - assemble-magic-weather-compose-sample-app:
          requires:
            - deploy-snapshot
      - assemble-custom-entitlement-computation-sample-app:
          requires:
            - deploy-snapshot

  build-test-deploy:
    when:
      and:
        - not:
            equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "default", << pipeline.parameters.action >> ]
    jobs:
      - test
      - detekt
      - assemble-purchase-tester
      - assemble-paywall-tester-release
      - run-backend-integration-tests
      - record-and-upload-paparazzi-revenuecatui-snapshots
      - run-revenuecatui-ui-tests
      - emerge_purchases_ui_snapshot_tests
      - integration-tests-build: *release-branches
      - purchases-integration-tests-build: *release-branches
      - run-firebase-tests-purchases-custom-entitlement-computation-integration-test:
          <<: *release-branches
      - run-firebase-tests-purchases-integration-test:
          requires:
            - purchases-integration-tests-build
      - run-firebase-tests-purchases-load-shedder-integration-test:
          <<: *release-branches
          context:
            - slack-secrets
      - run-firebase-tests:
          requires:
            - integration-tests-build
      - hold:
          type: approval
          requires:
            - test
            - assemble-purchase-tester
            - assemble-paywall-tester-release
            - run-backend-integration-tests
            - run-revenuecatui-ui-tests
            - run-firebase-tests
            - run-firebase-tests-purchases-integration-test
            - run-firebase-tests-purchases-load-shedder-integration-test
            - run-firebase-tests-purchases-custom-entitlement-computation-integration-test
          <<: *release-branches
      - revenuecat/tag-current-branch:
          requires:
            - hold
          <<: *release-branches
      - deploy: *release-tags
      - docs-deploy: *release-tags
      - publish-purchase-tester-release:
          requires:
            - deploy
            - docs-deploy
          <<: *release-tags
      - publish-paywall-tester-release:
          track: "alpha"
          requires:
              - deploy
              - docs-deploy
          <<: *release-tags

  snapshot-bump:
    when:
      and:
        - not:
            equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "main", << pipeline.git.branch >> ]
        - equal: [ "default", << pipeline.parameters.action >> ]
    jobs:
      - prepare-next-version

  publish-paywall-tester-to-internal-track:
    when:
      and:
        - not:
            equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "main", << pipeline.git.branch >> ]
        - equal: [ "default", << pipeline.parameters.action >> ]
    jobs:
      - publish-paywall-tester-release:
          track: "internal"

  daily-load-shedder-integration-tests:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "load-shedder-integration-tests", << pipeline.schedule.name >> ]
    jobs:
      - run-firebase-tests-purchases-load-shedder-integration-test:
          context:
            - slack-secrets

  weekly-run-workflow:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "release-train", << pipeline.schedule.name >> ]
    jobs:
      - revenuecat/automatic-bump

  manual-trigger-bump:
    when:
      equal: [ bump, << pipeline.parameters.action >> ]
    jobs:
      - revenuecat/automatic-bump

  manual-paywall-tester-release:
    when:
      equal: [ paywall_tester_release, << pipeline.parameters.action >> ]
    jobs:
        - publish-paywall-tester-release:
            track: "alpha"

  update-paywall-templates:
    when:
      equal: [ update_paywall_templates, << pipeline.parameters.action >> ]
    jobs:
      - update-paywall-preview-resources-submodule

  manual-trigger-maestro:
    when:
      equal: [run-maestro, << pipeline.parameters.action >>]
    jobs:
      - maestro:
          context:
            - slack-secrets-ios

