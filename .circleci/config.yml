version: 2.1
orbs:
  android: circleci/android@0.2.1

executors:
  android-executor:
    docker:
      - image: circleci/android:api-28
    resource_class: large
    working_directory: ~/purchases-android
    environment:
      JVM_OPTS: -Xmx4096m
      CIRCLE_JDK_VERSION: oraclejdk8

commands:
  prepare-signing-key:
    steps:
      - run:
          name: Prepare GPG keystore file
          command: |
            export GPG_KEY_FILE=`mktemp`
            echo "export GPG_KEY=$GPG_KEY_FILE" >> $BASH_ENV
      - run:
          name: Base64 decode gpg keystore to file
          command: echo $SIGNING_GPG_BASE64 | base64 --decode > $GPG_KEY
      - run:
          name: Import GPG keys
          command: gpg --batch --import $GPG_KEY
      - run:
          name: Fixing GPG compatibility
          command: echo $GPG_SIGNING_KEY_PW_NEW | gpg --batch --pinentry-mode=loopback --passphrase-fd 0 --export-secret-keys > /home/circleci/.gnupg/secring.gpg

jobs:
  build:
    executor: android-executor
    steps:
      - checkout
      - android/accept-licenses
  test:
    executor: android-executor
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle.kts" }}-{{ checksum  "purchases/build.gradle" }}-{{ checksum "common/build.gradle" }}-{{ checksum "public/build.gradle" }}-{{ checksum "utils/build.gradle" }}
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies --no-daemon --max-workers=2
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle.kts" }}-{{ checksum  "purchases/build.gradle" }}-{{ checksum "common/build.gradle" }}-{{ checksum "public/build.gradle" }}-{{ checksum "utils/build.gradle" }}
      - android/restore-build-cache
      - run:
          name: Run Tests
          command: ./gradlew lint test --no-daemon --max-workers=2
#      - run:
#          name: Test coverage report
#          command: ./gradlew jacocoFullReport coveralls --no-daemon --max-workers=2
      - run:
          name: Detekt
          command: ./gradlew detektAll --no-daemon --max-workers=2
      - android/save-build-cache
      - store_artifacts:
          path: build/reports
      - store_test_results:
          path: build/test-results

  docs-deploy:
    executor: android-executor
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle.kts" }}-{{ checksum  "purchases/build.gradle" }}-{{ checksum "common/build.gradle" }}-{{ checksum "public/build.gradle" }}-{{ checksum "utils/build.gradle" }}
      - android/restore-build-cache
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: Dokka
          command: ./gradlew dokka
      - run:
          name: Deploy to S3
          command: aws s3 sync ~/purchases-android/docs s3://purchases-docs/android --delete --acl public-read
      - run:
          name: Invalidate CloudFront caches
          command: aws cloudfront create-invalidation --distribution-id EPTW7F3CB566V --paths "/*"

  deploy:
    executor: android-executor
    steps:
      - checkout
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - restore_cache:
          key: jars-{{ checksum "build.gradle.kts" }}-{{ checksum  "purchases/build.gradle" }}-{{ checksum "common/build.gradle" }}-{{ checksum "public/build.gradle" }}-{{ checksum "utils/build.gradle" }}
      - prepare-signing-key
      - run:
          name: Deployment
          command: |
            if [ "$CIRCLE_JDK_VERSION" != "oraclejdk8" ]; then
              echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$CIRCLE_JDK_VERSION'."
            else
              bundle exec fastlane android deploy
            fi

  deploy-snapshot:
    executor: android-executor
    steps:
      - checkout
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - restore_cache:
          key: jars-{{ checksum "build.gradle.kts" }}-{{ checksum  "purchases/build.gradle" }}-{{ checksum "common/build.gradle" }}-{{ checksum "public/build.gradle" }}-{{ checksum "utils/build.gradle" }}
      - prepare-signing-key
      - run:
          name: Deployment
          command: |
            if [ "$CIRCLE_JDK_VERSION" != "oraclejdk8" ]; then
              echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$CIRCLE_JDK_VERSION'."
            else
              bundle exec fastlane android deploy_snapshot
            fi

  assemble:
    executor: android-executor
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle.kts" }}-{{ checksum  "purchases/build.gradle" }}-{{ checksum "common/build.gradle" }}-{{ checksum "public/build.gradle" }}-{{ checksum "utils/build.gradle" }}
      - android/restore-build-cache
      - run:
          name: Assemble
          command: ./gradlew assemble
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle.kts" }}-{{ checksum  "purchases/build.gradle" }}-{{ checksum "common/build.gradle" }}-{{ checksum "public/build.gradle" }}-{{ checksum "utils/build.gradle" }}
      - android/save-build-cache

workflows:
  version: 2
  test-assemble-deploy-docs:
    jobs:
      - build
      - test:
          requires:
            - build
      - assemble:
          requires:
            - build
      - deploy:
          requires:
            - assemble
          filters:
            branches:
              only:
                - main
      - deploy-snapshot:
          requires:
            - assemble
          filters:
            branches:
              only:
                - develop
      - docs-deploy:
          filters:
            tags:
              only: /^(\d+\.)(\d+\.)(\d+)$/
            branches:
              ignore: /.*/
