<?xml version="1.0" ?>
<SmellBaseline>
  <Blacklist></Blacklist>
  <Whitelist>
    <ID>ComplexMethod:EntitlementInfo.kt$EntitlementInfo$equals</ID>
    <ID>EmptyCatchBlock:AdvertisingIdClient.kt$AdvertisingIdClient.AdvertisingConnection${ }</ID>
    <ID>EmptyCatchBlock:Purchases.kt$Purchases.Companion.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:AdvertisingIdClient.kt$AdvertisingIdClient.AdvertisingConnection${}</ID>
    <ID>LargeClass:Purchases.kt$Purchases$Purchases</ID>
    <ID>LongMethod:Purchases.kt$Purchases$restorePurchases</ID>
    <ID>LongMethod:Purchases.kt$Purchases.Companion$configure</ID>
    <ID>LongParameterList:AmazonBackend.kt$AmazonBackend$( receiptId: String, appUserID: String, storeUserID: String, sku: String, onSuccess: (JSONObject) -&gt; Unit, onError: (PurchasesError) -&gt; Unit )</ID>
    <ID>LongParameterList:Backend.kt$Backend$( purchaseToken: String, appUserID: String, isRestore: Boolean, observerMode: Boolean, subscriberAttributes: Map&lt;String, Map&lt;String, Any?&gt;&gt;, receiptInfo: ReceiptInfo, onSuccess: PostReceiptDataSuccessCallback, onError: PostReceiptDataErrorCallback )</ID>
    <ID>LongParameterList:EntitlementInfo.kt$EntitlementInfo$( val identifier: String, val isActive: Boolean, val willRenew: Boolean, val periodType: PeriodType, val latestPurchaseDate: Date, val originalPurchaseDate: Date, val expirationDate: Date?, val store: Store, val productIdentifier: String, val isSandbox: Boolean, val unsubscribeDetectedAt: Date?, val billingIssueDetectedAt: Date? )</ID>
    <ID>LongParameterList:ProductDetails.kt$ProductDetails$( val sku: String, val type: ProductType, val price: String, // For example $3.00 val priceAmountMicros: Long, val priceCurrencyCode: String, // Null for amazon val originalPrice: String?, // 0 for amazon val originalPriceAmountMicros: Long, val title: String, val description: String, // Null if no subscriptionPeriod. Null for amazon val subscriptionPeriod: String?, // Null if no freeTrialPeriod. Null for amazon val freeTrialPeriod: String?, // Null if no introductoryPrice. Null for amazon val introductoryPrice: String?, // 0 for no intro price and amazon val introductoryPriceAmountMicros: Long, // Null if no introductoryPricePeriod. Null for amazon val introductoryPricePeriod: String?, // Null if no introductoryPriceCycles. 0 for amazon val introductoryPriceCycles: Int, val iconUrl: String, val originalJson: JSONObject )</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendBadRequest$7226</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendCannotTransferPurchase$7102</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendEmptyAppUserId$7220</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInternalServerError$7110</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidAPIKey$7225</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidAppStoreSharedSecret$7104</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidAppleSubscriptionKey$7234</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidAuthToken$7224</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidPaymentModeOrIntroPriceNotProvided$7105</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidPlatform$7000</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidPlayStoreCredentials$7107</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidReceiptToken$7103</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidSubscriberAttributes$7263</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidSubscriberAttributesBody$7264</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendPlayStoreGenericError$7231</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendPlayStoreInvalidPackageName$7230</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendPlayStoreQuotaExceeded$7229</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendProductIdForGoogleReceiptNotProvided$7106</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendStoreProblem$7101</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendUserIneligibleForPromoOffer$7232</ID>
    <ID>ReturnCount:BillingWrapper.kt$BillingWrapper$internal fun getPurchaseType(purchaseToken: String): ProductType</ID>
    <ID>TooGenericExceptionCaught:AdvertisingIdClient.kt$AdvertisingIdClient$e: Exception</ID>
    <ID>TooGenericExceptionThrown:HTTPClient.kt$HTTPClient$throw RuntimeException(e)</ID>
    <ID>TooManyFunctions:AmazonBilling.kt$AmazonBilling$AmazonBilling</ID>
    <ID>TooManyFunctions:Backend.kt$Backend$Backend</ID>
    <ID>TooManyFunctions:BillingWrapper.kt$BillingWrapper$BillingWrapper</ID>
    <ID>TooManyFunctions:DeviceCache.kt$DeviceCache$DeviceCache</ID>
    <ID>TooManyFunctions:Purchases.kt$Purchases$Purchases</ID>
    <ID>TooManyFunctions:listenerConversions.kt$com.revenuecat.purchases.listenerConversions.kt</ID>
  </Whitelist>
</SmellBaseline>
