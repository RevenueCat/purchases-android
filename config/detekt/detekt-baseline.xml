<?xml version="1.0" ?>
<SmellBaseline>
  <Blacklist></Blacklist>
  <Whitelist>
    <ID>ComplexMethod:EntitlementInfo.kt$EntitlementInfo$equals</ID>
    <ID>EmptyCatchBlock:AdvertisingIdClient.kt$AdvertisingIdClient.AdvertisingConnection${ }</ID>
    <ID>EmptyCatchBlock:Purchases.kt$Purchases.Companion.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:AdvertisingIdClient.kt$AdvertisingIdClient.AdvertisingConnection${}</ID>
    <ID>ForbiddenComment:AmazonConfiguration.kt$AmazonConfiguration$// TODO: make public</ID>
    <ID>ForbiddenComment:AmazonConfiguration.kt$AmazonConfiguration$// TODO: uncomment</ID>
    <ID>ForbiddenComment:PurchasesConfiguration.kt$PurchasesConfiguration.Builder$// TODO: make public</ID>
    <ID>LargeClass:Purchases.kt$Purchases$Purchases</ID>
    <ID>LongMethod:Purchases.kt$Purchases$restorePurchases</ID>
    <ID>LongParameterList:EntitlementInfo.kt$EntitlementInfo$( val identifier: String, val isActive: Boolean, val willRenew: Boolean, val periodType: PeriodType, val latestPurchaseDate: Date, val originalPurchaseDate: Date, val expirationDate: Date?, val store: Store, val productIdentifier: String, val isSandbox: Boolean, val unsubscribeDetectedAt: Date?, val billingIssueDetectedAt: Date? )</ID>
    <ID>LongParameterList:ProductDetails.kt$ProductDetails$( /** * The product ID. */ val sku: String, /** * Type of product. One of [ProductType]. */ val type: ProductType, /** * Formatted price of the item, including its currency sign. For example $3.00. */ val price: String, /** * Price in micro-units, where 1,000,000 micro-units equal one unit of the currency. * * For example, if price is "â‚¬7.99", price_amount_micros is 7,990,000. This value represents * the localized, rounded price for a particular currency. */ val priceAmountMicros: Long, /** * Returns ISO 4217 currency code for price and original price. * * For example, if price is specified in British pounds sterling, price_currency_code is "GBP". */ val priceCurrencyCode: String, /** * Formatted original price of the item, including its currency sign. * * Note: returned only for Google products. */ val originalPrice: String?, /** * Returns the original price in micro-units, where 1,000,000 micro-units equal one unit * of the currency. * * Note: returned only for Google products. */ val originalPriceAmountMicros: Long, /** * Title of the product. */ val title: String, /** * The description of the product. */ val description: String, /** * Subscription period, specified in ISO 8601 format. For example, P1W equates to one week, * P1M equates to one month, P3M equates to three months, P6M equates to six months, * and P1Y equates to one year. * * Note: Returned only for subscriptions. */ val subscriptionPeriod: String?, /** * Subscription period, specified in ISO 8601 format. For example, P1W equates to one week, * P1M equates to one month, P3M equates to three months, P6M equates to six months, * and P1Y equates to one year. * * Note: null for non subscriptions. */ val freeTrialPeriod: String?, /** * The billing period of the introductory price, specified in ISO 8601 format. * * Note: Returned only for Google subscriptions which have an introductory period configured. */ val introductoryPrice: String?, /** * Introductory price in micro-units. The currency is the same as price_currency_code. * * Note: Returns 0 if the product is not Google a subscription or doesn't * have an introductory period. */ val introductoryPriceAmountMicros: Long, /** * The billing period of the introductory price, specified in ISO 8601 format. * * Note: Returned only for Google subscriptions which have an introductory period configured. */ val introductoryPricePeriod: String?, /** * The number of subscription billing periods for which the user will be given the * introductory price, such as 3. * * Note: Returns 0 if the SKU is not a Google subscription or doesn't * have an introductory period. */ val introductoryPriceCycles: Int, /** * The icon of the product if present. */ val iconUrl: String, /** * JSONObject representing the original product class from Google. * * Note: there's a convenience extension property that can be used to get the original * SkuDetails class: `ProductDetails.skuDetails`. * Alternatively, the original SkuDetails can be built doing the following: * `SkuDetails(this.originalJson.toString())` */ val originalJson: JSONObject )</ID>
    <ID>LongParameterList:StubGooglePurchase.kt$( productId: String = "com.revenuecat.lifetime", purchaseTime: Long = System.currentTimeMillis(), purchaseToken: String = "abcdefghijipehfnbbnldmai.AO-J1OxqriTepvB7suzlIhxqPIveA0IHtX9amMedK0KK9CsO0S3Zk5H6gdwvV" + "7HzZIJeTzqkY4okyVk8XKTmK1WZKAKSNTKop4dgwSmFnLWsCxYbahUmADg", signature: String = "signature${System.currentTimeMillis()}", purchaseState: Int = Purchase.PurchaseState.PURCHASED, acknowledged: Boolean = true, orderId: String = "GPA.3372-4150-8203-17209" )</ID>
    <ID>MagicNumber:SampleWeatherData.kt$SampleWeatherData.Companion$120</ID>
    <ID>MagicNumber:SampleWeatherData.kt$SampleWeatherData.Companion$20</ID>
    <ID>MagicNumber:SampleWeatherData.kt$SampleWeatherData.Companion$32</ID>
    <ID>MagicNumber:SampleWeatherData.kt$SampleWeatherData.Companion$33</ID>
    <ID>MagicNumber:SampleWeatherData.kt$SampleWeatherData.Companion$60</ID>
    <ID>MagicNumber:SampleWeatherData.kt$SampleWeatherData.Companion$61</ID>
    <ID>MagicNumber:SampleWeatherData.kt$SampleWeatherData.Companion$90</ID>
    <ID>MagicNumber:SampleWeatherData.kt$SampleWeatherData.Companion$91</ID>
    <ID>MagicNumber:StubGooglePurchase.kt$4</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendBadRequest$7226</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendCannotTransferPurchase$7102</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendEmptyAppUserId$7220</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInternalServerError$7110</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidAPIKey$7225</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidAppStoreSharedSecret$7104</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidAppleSubscriptionKey$7234</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidAuthToken$7224</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidPaymentModeOrIntroPriceNotProvided$7105</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidPlatform$7000</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidPlayStoreCredentials$7107</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidReceiptToken$7103</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidSubscriberAttributes$7263</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendInvalidSubscriberAttributesBody$7264</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendPlayStoreGenericError$7231</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendPlayStoreInvalidPackageName$7230</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendPlayStoreQuotaExceeded$7229</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendProductIdForGoogleReceiptNotProvided$7106</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendStoreProblem$7101</ID>
    <ID>MagicNumber:errors.kt$BackendErrorCode.BackendUserIneligibleForPromoOffer$7232</ID>
    <ID>MaxLineLength:Constants.kt$com.revenuecat.sample.data.Constants.kt</ID>
    <ID>NoWildcardImports:com.revenuecat.sample.ui.paywall.PaywallFragment.kt:10</ID>
    <ID>NoWildcardImports:com.revenuecat.sample.ui.user.UserFragment.kt:14</ID>
    <ID>ReturnCount:BillingWrapper.kt$BillingWrapper$internal fun getPurchaseType(purchaseToken: String): ProductType</ID>
    <ID>TooGenericExceptionCaught:AdvertisingIdClient.kt$AdvertisingIdClient$e: Exception</ID>
    <ID>TooGenericExceptionThrown:HTTPClient.kt$HTTPClient$throw RuntimeException(e)</ID>
    <ID>TooManyFunctions:AmazonBilling.kt$AmazonBilling$AmazonBilling</ID>
    <ID>TooManyFunctions:Backend.kt$Backend$Backend</ID>
    <ID>TooManyFunctions:BillingWrapper.kt$BillingWrapper$BillingWrapper</ID>
    <ID>TooManyFunctions:DeviceCache.kt$DeviceCache$DeviceCache</ID>
    <ID>TooManyFunctions:HTTPClient.kt$HTTPClient$HTTPClient</ID>
    <ID>TooManyFunctions:Purchases.kt$Purchases$Purchases</ID>
    <ID>TooManyFunctions:listenerConversions.kt$com.revenuecat.purchases.listenerConversions.kt</ID>
    <ID>WildcardImport:PaywallFragment.kt$import com.revenuecat.purchases.*</ID>
    <ID>WildcardImport:UserFragment.kt$import com.revenuecat.purchases.*</ID>
  </Whitelist>
</SmellBaseline>
