apply from: "$rootProject.projectDir/library.gradle"
android {
    namespace 'com.revenuecat.purchases.amazon'
}

ext {
    amazonVersion = "3.0.3"
    amazon2Version = "2.0.76"
    amazon2FileName = "in-app-purchasing-${amazon2Version}.jar"
}

dependencies {
    implementation project(":purchases")
    implementation project(":common")
    implementation project(":strings")
    implementation project(":utils")

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "androidx.annotation:annotation:$annotationVersion"

    implementation "com.amazon.device:amazon-appstore-sdk:$amazonVersion"

    testImplementation "com.amazon.device:amazon-appstore-sdk:$amazonVersion"
    testImplementation project(":test-utils")
    testImplementation "androidx.test:core:$testLibrariesVersion"
    testImplementation "androidx.test:core-ktx:$testLibrariesVersion"
    testImplementation "androidx.test:runner:$testLibrariesVersion"
    testImplementation "androidx.test:rules:$testLibrariesVersion"
    testImplementation "androidx.test.ext:junit:$testJUnitVersion"
    testImplementation "androidx.test.ext:junit-ktx:$testJUnitVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation "org.assertj:assertj-core:$assertJVersion"
}

// Not running with this flag causes verification issues due to the way the Amazon jar is compiled
// https://github.com/robolectric/robolectric-gradle-plugin/issues/144#issuecomment-265899560
tasks.withType(Test) { jvmArgs += "-noverify" }

task getAmazonLibrary {
    ext {
        downloadURL = "https://amzndevresources.com/iap/sdk/AmazonInAppPurchasing_Android.zip"
        destFile = new File(projectDir, "libs/$amazon2FileName")
    }

    inputs.property('downloadURL', downloadURL)
    inputs.property('fileToExtract', amazon2FileName)
    outputs.file(destFile)

    doLast {
        if (!destFile.exists()) {
            println 'Downloading Amazon dependency'
            File destDir = destFile.parentFile
            destDir.mkdirs()

            File downloadFile = new File(temporaryDir, 'download.zip')
            new URL(downloadURL).withInputStream { is ->
                downloadFile.withOutputStream { it << is }
            }

            project.copy {
                from {
                    zipTree(downloadFile).matching { include "**/$amazon2FileName" }.singleFile
                }

                into(destDir)
            }
        }
    }
}

task cleanAmazonLibrary(type: Delete) {
    delete new File(projectDir, "libs/$amazon2FileName")
}

afterEvaluate {
    preDebugBuild.dependsOn cleanAmazonLibrary
    preReleaseBuild.dependsOn cleanAmazonLibrary
}
