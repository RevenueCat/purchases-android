// Signature format: 4.0
package com.revenuecat.purchases.ui.revenuecatui {

  @kotlin.RequiresOptIn(level=kotlin.RequiresOptIn.Level.ERROR) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.CLASS, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY}) public @interface ExperimentalPreviewRevenueCatUIPurchasesAPI {
  }

  public final class PaywallDialogKt {
    method @androidx.compose.runtime.Composable public static void PaywallDialog(com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions paywallDialogOptions);
  }

  @androidx.compose.runtime.Immutable @dev.drewhamilton.poko.Poko public final class PaywallDialogOptions {
    ctor public PaywallDialogOptions(com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions.Builder builder);
    method public kotlin.jvm.functions.Function0<kotlin.Unit>? getDismissRequest();
    method public com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? getFontProvider();
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallListener? getListener();
    method public com.revenuecat.purchases.Offering? getOffering();
    method public com.revenuecat.purchases.ui.revenuecatui.PurchaseLogic? getPurchaseLogic();
    method public kotlin.jvm.functions.Function1<com.revenuecat.purchases.CustomerInfo,java.lang.Boolean>? getShouldDisplayBlock();
    method public boolean getShouldDisplayDismissButton();
    property public final kotlin.jvm.functions.Function0<kotlin.Unit>? dismissRequest;
    property public final com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider;
    property public final com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener;
    property public final com.revenuecat.purchases.Offering? offering;
    property public final com.revenuecat.purchases.ui.revenuecatui.PurchaseLogic? purchaseLogic;
    property public final kotlin.jvm.functions.Function1<com.revenuecat.purchases.CustomerInfo,java.lang.Boolean>? shouldDisplayBlock;
    property public final boolean shouldDisplayDismissButton;
  }

  public static final class PaywallDialogOptions.Builder {
    ctor public PaywallDialogOptions.Builder();
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions build();
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions.Builder setCustomPurchaseLogic(com.revenuecat.purchases.ui.revenuecatui.PurchaseLogic? purchaseLogic);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions.Builder setDismissRequest(kotlin.jvm.functions.Function0<kotlin.Unit> dismissRequest);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions.Builder setFontProvider(com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions.Builder setListener(com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions.Builder setOffering(com.revenuecat.purchases.Offering? offering);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions.Builder setRequiredEntitlementIdentifier(String? requiredEntitlementIdentifier);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions.Builder setShouldDisplayBlock(kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.CustomerInfo,java.lang.Boolean>? shouldDisplayBlock);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions.Builder setShouldDisplayDismissButton(boolean shouldDisplayDismissButton);
  }

  public final class PaywallFooterKt {
    method @androidx.compose.runtime.Composable public static void OriginalTemplatePaywallFooter(com.revenuecat.purchases.ui.revenuecatui.PaywallOptions options, optional boolean condensed, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.PaddingValues,kotlin.Unit>? mainContent);
    method @Deprecated @androidx.compose.runtime.Composable public static void PaywallFooter(com.revenuecat.purchases.ui.revenuecatui.PaywallOptions options, optional boolean condensed, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.PaddingValues,kotlin.Unit>? mainContent);
  }

  public final class PaywallKt {
    method @androidx.compose.runtime.Composable public static void Paywall(com.revenuecat.purchases.ui.revenuecatui.PaywallOptions options);
  }

  public interface PaywallListener {
    method public default void onPurchaseCancelled();
    method public default void onPurchaseCompleted(com.revenuecat.purchases.CustomerInfo customerInfo, com.revenuecat.purchases.models.StoreTransaction storeTransaction);
    method public default void onPurchaseError(com.revenuecat.purchases.PurchasesError error);
    method public default void onPurchaseStarted(com.revenuecat.purchases.Package rcPackage);
    method public default void onRestoreCompleted(com.revenuecat.purchases.CustomerInfo customerInfo);
    method public default void onRestoreError(com.revenuecat.purchases.PurchasesError error);
    method public default void onRestoreStarted();
  }

  @androidx.compose.runtime.Immutable @dev.drewhamilton.poko.Poko public final class PaywallOptions {
    ctor public PaywallOptions(com.revenuecat.purchases.ui.revenuecatui.PaywallOptions.Builder builder);
    method public kotlin.jvm.functions.Function0<kotlin.Unit> getDismissRequest();
    method public com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? getFontProvider();
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallListener? getListener();
    method public com.revenuecat.purchases.ui.revenuecatui.PurchaseLogic? getPurchaseLogic();
    property public final kotlin.jvm.functions.Function0<kotlin.Unit> dismissRequest;
    property public final com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider;
    property public final com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener;
    property public final com.revenuecat.purchases.ui.revenuecatui.PurchaseLogic? purchaseLogic;
    field public static final com.revenuecat.purchases.ui.revenuecatui.PaywallOptions.Companion Companion;
  }

  public static final class PaywallOptions.Builder {
    ctor public PaywallOptions.Builder(kotlin.jvm.functions.Function0<kotlin.Unit> dismissRequest);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallOptions build();
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallOptions.Builder setFontProvider(com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallOptions.Builder setListener(com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallOptions.Builder setOffering(com.revenuecat.purchases.Offering? offering);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallOptions.Builder setPurchaseLogic(com.revenuecat.purchases.ui.revenuecatui.PurchaseLogic? purchaseLogic);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallOptions.Builder setShouldDisplayDismissButton(boolean shouldDisplayDismissButton);
  }

  public static final class PaywallOptions.Companion {
  }

  public interface PurchaseLogic {
    method public suspend Object? performPurchase(android.app.Activity activity, com.revenuecat.purchases.Package rcPackage, kotlin.coroutines.Continuation<? super com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult>);
    method public suspend Object? performRestore(com.revenuecat.purchases.CustomerInfo customerInfo, kotlin.coroutines.Continuation<? super com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult>);
  }

  public sealed interface PurchaseLogicResult {
  }

  public static final class PurchaseLogicResult.Cancellation implements com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult {
    field public static final com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult.Cancellation INSTANCE;
  }

  @dev.drewhamilton.poko.Poko public static final class PurchaseLogicResult.Error implements com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult {
    ctor public PurchaseLogicResult.Error(optional com.revenuecat.purchases.PurchasesError? errorDetails);
    method public com.revenuecat.purchases.PurchasesError? getErrorDetails();
    property public final com.revenuecat.purchases.PurchasesError? errorDetails;
  }

  public static final class PurchaseLogicResult.Success implements com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult {
    field public static final com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult.Success INSTANCE;
  }

  public abstract class PurchaseLogicWithCallback implements com.revenuecat.purchases.ui.revenuecatui.PurchaseLogic {
    ctor public PurchaseLogicWithCallback();
    method public final suspend Object? performPurchase(android.app.Activity activity, com.revenuecat.purchases.Package rcPackage, kotlin.coroutines.Continuation<? super com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult>);
    method public abstract void performPurchaseWithCompletion(android.app.Activity activity, com.revenuecat.purchases.Package rcPackage, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult,kotlin.Unit> completion);
    method public final suspend Object? performRestore(com.revenuecat.purchases.CustomerInfo customerInfo, kotlin.coroutines.Continuation<? super com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult>);
    method public abstract void performRestoreWithCompletion(com.revenuecat.purchases.CustomerInfo customerInfo, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult,kotlin.Unit> completion);
  }

}

package com.revenuecat.purchases.ui.revenuecatui.activity {

  public final class PaywallActivityLauncher {
    ctor public PaywallActivityLauncher(androidx.activity.result.ActivityResultCaller resultCaller, com.revenuecat.purchases.ui.revenuecatui.activity.PaywallResultHandler resultHandler);
    method public void launch();
    method public void launch(optional com.revenuecat.purchases.Offering? offering);
    method public void launch(optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider);
    method public void launch(optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider, optional boolean shouldDisplayDismissButton);
    method public void launch(optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider, optional boolean shouldDisplayDismissButton, optional boolean edgeToEdge);
    method @Deprecated @kotlin.jvm.JvmSynthetic public void launch(String offeringIdentifier, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider, optional boolean shouldDisplayDismissButton, optional boolean edgeToEdge);
    method public void launchIfNeeded(optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider, optional boolean shouldDisplayDismissButton, optional boolean edgeToEdge, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.CustomerInfo,java.lang.Boolean> shouldDisplayBlock);
    method public void launchIfNeeded(optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider, optional boolean shouldDisplayDismissButton, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.CustomerInfo,java.lang.Boolean> shouldDisplayBlock);
    method public void launchIfNeeded(optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.CustomerInfo,java.lang.Boolean> shouldDisplayBlock);
    method public void launchIfNeeded(optional com.revenuecat.purchases.Offering? offering, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.CustomerInfo,java.lang.Boolean> shouldDisplayBlock);
    method public void launchIfNeeded(String requiredEntitlementIdentifier);
    method public void launchIfNeeded(String requiredEntitlementIdentifier, optional com.revenuecat.purchases.Offering? offering);
    method public void launchIfNeeded(String requiredEntitlementIdentifier, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider);
    method public void launchIfNeeded(String requiredEntitlementIdentifier, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider, optional boolean shouldDisplayDismissButton);
    method public void launchIfNeeded(String requiredEntitlementIdentifier, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider, optional boolean shouldDisplayDismissButton, optional boolean edgeToEdge);
    method public void launchIfNeeded(String requiredEntitlementIdentifier, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider, optional boolean shouldDisplayDismissButton, optional boolean edgeToEdge, optional com.revenuecat.purchases.ui.revenuecatui.activity.PaywallDisplayCallback? paywallDisplayCallback);
    method @Deprecated @kotlin.jvm.JvmSynthetic public void launchIfNeeded(String requiredEntitlementIdentifier, String offeringIdentifier, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider, optional boolean shouldDisplayDismissButton, optional boolean edgeToEdge, optional com.revenuecat.purchases.ui.revenuecatui.activity.PaywallDisplayCallback? paywallDisplayCallback);
    method public void launchIfNeeded(kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.CustomerInfo,java.lang.Boolean> shouldDisplayBlock);
  }

  public interface PaywallDisplayCallback {
    method public void onPaywallDisplayResult(boolean wasDisplayed);
  }

  public abstract sealed class PaywallResult implements android.os.Parcelable {
  }

  @kotlinx.parcelize.Parcelize public static final class PaywallResult.Cancelled extends com.revenuecat.purchases.ui.revenuecatui.activity.PaywallResult implements android.os.Parcelable {
    field public static final com.revenuecat.purchases.ui.revenuecatui.activity.PaywallResult.Cancelled INSTANCE;
  }

  @dev.drewhamilton.poko.Poko @kotlinx.parcelize.Parcelize public static final class PaywallResult.Error extends com.revenuecat.purchases.ui.revenuecatui.activity.PaywallResult implements android.os.Parcelable {
    ctor public PaywallResult.Error(com.revenuecat.purchases.PurchasesError error);
    method public com.revenuecat.purchases.PurchasesError getError();
    property public final com.revenuecat.purchases.PurchasesError error;
  }

  @dev.drewhamilton.poko.Poko @kotlinx.parcelize.Parcelize public static final class PaywallResult.Purchased extends com.revenuecat.purchases.ui.revenuecatui.activity.PaywallResult implements android.os.Parcelable {
    ctor public PaywallResult.Purchased(com.revenuecat.purchases.CustomerInfo customerInfo);
    method public com.revenuecat.purchases.CustomerInfo getCustomerInfo();
    property public final com.revenuecat.purchases.CustomerInfo customerInfo;
  }

  @dev.drewhamilton.poko.Poko @kotlinx.parcelize.Parcelize public static final class PaywallResult.Restored extends com.revenuecat.purchases.ui.revenuecatui.activity.PaywallResult implements android.os.Parcelable {
    ctor public PaywallResult.Restored(com.revenuecat.purchases.CustomerInfo customerInfo);
    method public com.revenuecat.purchases.CustomerInfo getCustomerInfo();
    property public final com.revenuecat.purchases.CustomerInfo customerInfo;
  }

  public interface PaywallResultHandler extends androidx.activity.result.ActivityResultCallback<com.revenuecat.purchases.ui.revenuecatui.activity.PaywallResult> {
  }

}

package com.revenuecat.purchases.ui.revenuecatui.components.image {

  @kotlin.jvm.JvmSynthetic public final class ImageComponentViewKt {
    method public static android.graphics.Bitmap toBitmap(android.graphics.drawable.Drawable, @Px int width, @Px int height, @ColorInt int background);
  }

}

package com.revenuecat.purchases.ui.revenuecatui.composables {

  public final class AutoResizedTextKt {
    method @androidx.compose.runtime.Composable public static void AutoResizedText(String text, optional androidx.compose.ui.Modifier modifier, optional long color, optional androidx.compose.ui.text.TextStyle style, optional androidx.compose.ui.text.font.FontWeight fontWeight, optional int textAlign);
  }

  public final class CloseButtonKt {
    method @androidx.compose.runtime.Composable public static void CloseButton(androidx.compose.foundation.layout.BoxScope, boolean shouldDisplayDismissButton, androidx.compose.ui.graphics.Color? color, boolean actionInProgress, kotlin.jvm.functions.Function0<kotlin.Unit> onClick);
  }

  public final class DisableTouchesComposableKt {
    method @androidx.compose.runtime.Composable public static void DisableTouchesComposable(optional boolean shouldDisable, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  public final class InsetSpacersKt {
    method @androidx.compose.runtime.Composable public static void StatusBarSpacer();
    method @androidx.compose.runtime.Composable public static void SystemBarsSpacer();
  }

}

package com.revenuecat.purchases.ui.revenuecatui.customercenter {

  public final class CustomerCenterKt {
    method @androidx.compose.runtime.Composable public static void CustomerCenter(optional androidx.compose.ui.Modifier modifier, optional com.revenuecat.purchases.ui.revenuecatui.customercenter.CustomerCenterOptions options, kotlin.jvm.functions.Function0<kotlin.Unit> onDismiss);
  }

  public final class CustomerCenterOptions {
  }

  public static final class CustomerCenterOptions.Builder {
    ctor public CustomerCenterOptions.Builder();
    method public com.revenuecat.purchases.ui.revenuecatui.customercenter.CustomerCenterOptions build();
    method public com.revenuecat.purchases.ui.revenuecatui.customercenter.CustomerCenterOptions.Builder setListener(com.revenuecat.purchases.customercenter.CustomerCenterListener? listener);
  }

  public final class ShowCustomerCenter extends androidx.activity.result.contract.ActivityResultContract<kotlin.Unit,kotlin.Unit> {
    ctor public ShowCustomerCenter();
    method public android.content.Intent createIntent(android.content.Context context, kotlin.Unit input);
    method public void parseResult(int resultCode, android.content.Intent? intent);
  }

}

package com.revenuecat.purchases.ui.revenuecatui.extensions {

  public final class PackageExtensionsKt {
    method public static boolean isMonthly(com.revenuecat.purchases.Package);
    method public static boolean isSubscription(com.revenuecat.purchases.Package);
  }

  public final class TypographyExtensionsKt {
    method public static androidx.compose.material3.Typography copyWithFontProvider(androidx.compose.material3.Typography, com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider fontProvider);
  }

  public final class UrisKt {
    method public static void openUriOrElse(android.content.Context, String uri, kotlin.jvm.functions.Function1<? super java.lang.Exception,kotlin.Unit> fallbackAction);
  }

}

package com.revenuecat.purchases.ui.revenuecatui.fonts {

  @androidx.compose.runtime.Immutable public final class CustomFontProvider implements com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider {
    ctor public CustomFontProvider(androidx.compose.ui.text.font.FontFamily fontFamily);
    method public androidx.compose.ui.text.font.FontFamily getFont(com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType type);
  }

  @androidx.compose.runtime.Immutable public final class CustomParcelizableFontProvider implements com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider {
    ctor public CustomParcelizableFontProvider(com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFontFamily fontFamily);
    method public com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFontFamily getFont(com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType type);
  }

  public interface FontProvider {
    method public androidx.compose.ui.text.font.FontFamily? getFont(com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType type);
  }

  @androidx.compose.runtime.Immutable @dev.drewhamilton.poko.Poko @kotlinx.parcelize.Parcelize public final class GoogleFontProvider implements android.os.Parcelable {
    ctor public GoogleFontProvider(@ArrayRes int certificates, optional String providerAuthority, optional String providerPackage);
    method public int getCertificates();
    method public String getProviderAuthority();
    method public String getProviderPackage();
    method public androidx.compose.ui.text.googlefonts.GoogleFont.Provider toGoogleProvider();
    property public final int certificates;
    property public final String providerAuthority;
    property public final String providerPackage;
  }

  public interface ParcelizableFontProvider {
    method public com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFontFamily? getFont(com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType type);
  }

  @androidx.compose.runtime.Stable public abstract sealed class PaywallFont implements android.os.Parcelable {
  }

  @androidx.compose.runtime.Immutable @dev.drewhamilton.poko.Poko @kotlinx.parcelize.Parcelize public static final class PaywallFont.AssetFont extends com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFont {
    ctor public PaywallFont.AssetFont(String path, optional @kotlinx.parcelize.TypeParceler androidx.compose.ui.text.font.FontWeight fontWeight, optional int fontStyle);
    method public int getFontStyle();
    method public androidx.compose.ui.text.font.FontWeight getFontWeight();
    method public String getPath();
    property public final int fontStyle;
    property public final androidx.compose.ui.text.font.FontWeight fontWeight;
    property public final String path;
  }

  @androidx.compose.runtime.Immutable @dev.drewhamilton.poko.Poko @kotlinx.parcelize.Parcelize public static final class PaywallFont.GoogleFont extends com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFont {
    ctor public PaywallFont.GoogleFont(String fontName, com.revenuecat.purchases.ui.revenuecatui.fonts.GoogleFontProvider fontProvider, optional @kotlinx.parcelize.TypeParceler androidx.compose.ui.text.font.FontWeight fontWeight, optional int fontStyle);
    method public String getFontName();
    method public com.revenuecat.purchases.ui.revenuecatui.fonts.GoogleFontProvider getFontProvider();
    method public int getFontStyle();
    method public androidx.compose.ui.text.font.FontWeight getFontWeight();
    property public final String fontName;
    property public final com.revenuecat.purchases.ui.revenuecatui.fonts.GoogleFontProvider fontProvider;
    property public final int fontStyle;
    property public final androidx.compose.ui.text.font.FontWeight fontWeight;
  }

  @androidx.compose.runtime.Immutable @dev.drewhamilton.poko.Poko @kotlinx.parcelize.Parcelize public static final class PaywallFont.ResourceFont extends com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFont {
    ctor public PaywallFont.ResourceFont(@FontRes int resourceId, optional @kotlinx.parcelize.TypeParceler androidx.compose.ui.text.font.FontWeight fontWeight, optional int fontStyle);
    method public int getFontStyle();
    method public androidx.compose.ui.text.font.FontWeight getFontWeight();
    method public int getResourceId();
    property public final int fontStyle;
    property public final androidx.compose.ui.text.font.FontWeight fontWeight;
    property public final int resourceId;
  }

  @androidx.compose.runtime.Immutable @dev.drewhamilton.poko.Poko @kotlinx.parcelize.Parcelize public final class PaywallFontFamily implements android.os.Parcelable {
    ctor public PaywallFontFamily(java.util.List<? extends com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFont> fonts);
    method public java.util.List<com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFont> getFonts();
    property public final java.util.List<com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFont> fonts;
  }

  public enum TypographyType {
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType BODY_LARGE;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType BODY_MEDIUM;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType BODY_SMALL;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType DISPLAY_LARGE;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType DISPLAY_MEDIUM;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType DISPLAY_SMALL;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType HEADLINE_LARGE;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType HEADLINE_MEDIUM;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType HEADLINE_SMALL;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType LABEL_LARGE;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType LABEL_MEDIUM;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType LABEL_SMALL;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType TITLE_LARGE;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType TITLE_MEDIUM;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType TITLE_SMALL;
  }

}

package com.revenuecat.purchases.ui.revenuecatui.views {

  public final class CustomerCenterView extends androidx.compose.ui.platform.AbstractComposeView implements androidx.lifecycle.LifecycleOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
    ctor public CustomerCenterView(android.content.Context context);
    ctor public CustomerCenterView(android.content.Context context, android.util.AttributeSet? attrs);
    ctor public CustomerCenterView(android.content.Context context, android.util.AttributeSet? attrs, int defStyleAttr);
    ctor public CustomerCenterView(android.content.Context context, optional kotlin.jvm.functions.Function0<kotlin.Unit>? dismissHandler, optional com.revenuecat.purchases.customercenter.CustomerCenterListener? customerCenterListener);
    method public final void setCustomerCenterListener(com.revenuecat.purchases.customercenter.CustomerCenterListener? customerCenterListener);
    method @androidx.compose.runtime.Composable public void Content();
    method public androidx.lifecycle.Lifecycle getLifecycle();
    method public androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
    method public androidx.lifecycle.ViewModelStore getViewModelStore();
    method public void onBackPressed();
    method public void setDismissHandler(kotlin.jvm.functions.Function0<kotlin.Unit>? dismissHandler);
  }

  public class OriginalTemplatePaywallFooterView extends android.widget.FrameLayout {
    ctor public OriginalTemplatePaywallFooterView(android.content.Context context);
    ctor public OriginalTemplatePaywallFooterView(android.content.Context context, android.util.AttributeSet? attrs);
    ctor public OriginalTemplatePaywallFooterView(android.content.Context context, android.util.AttributeSet? attrs, int defStyleAttr);
    ctor public OriginalTemplatePaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering);
    ctor public OriginalTemplatePaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener);
    ctor public OriginalTemplatePaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, optional com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider);
    ctor public OriginalTemplatePaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, optional com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider, optional boolean condensed);
    ctor public OriginalTemplatePaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, optional com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider, optional boolean condensed, optional kotlin.jvm.functions.Function0<kotlin.Unit>? dismissHandler);
    method public final void setDismissHandler(kotlin.jvm.functions.Function0<kotlin.Unit>? dismissHandler);
    method public final void setFontProvider(com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider);
    method @Deprecated public final void setOfferingId(String? offeringId);
    method public final void setPaywallListener(com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener);
  }

  @Deprecated public class PaywallFooterView extends com.revenuecat.purchases.ui.revenuecatui.views.OriginalTemplatePaywallFooterView {
    ctor @Deprecated public PaywallFooterView(android.content.Context context);
    ctor @Deprecated public PaywallFooterView(android.content.Context context, android.util.AttributeSet? attrs);
    ctor @Deprecated public PaywallFooterView(android.content.Context context, android.util.AttributeSet? attrs, int defStyleAttr);
    ctor @Deprecated public PaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering);
    ctor @Deprecated public PaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener);
    ctor @Deprecated public PaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, optional com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider);
    ctor @Deprecated public PaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, optional com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider, optional boolean condensed);
    ctor @Deprecated public PaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, optional com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider, optional boolean condensed, optional kotlin.jvm.functions.Function0<kotlin.Unit>? dismissHandler);
  }

  public final class PaywallView extends androidx.compose.ui.platform.AbstractComposeView implements androidx.lifecycle.LifecycleOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
    ctor public PaywallView(android.content.Context context);
    ctor public PaywallView(android.content.Context context, android.util.AttributeSet? attrs);
    ctor public PaywallView(android.content.Context context, android.util.AttributeSet? attrs, int defStyleAttr);
    ctor public PaywallView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering);
    ctor public PaywallView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener);
    ctor public PaywallView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, optional com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider);
    ctor public PaywallView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, optional com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider, optional Boolean? shouldDisplayDismissButton);
    ctor public PaywallView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, optional com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider, optional Boolean? shouldDisplayDismissButton, optional kotlin.jvm.functions.Function0<kotlin.Unit>? dismissHandler);
    method @androidx.compose.runtime.Composable public void Content();
    method public androidx.lifecycle.Lifecycle getLifecycle();
    method public androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
    method public androidx.lifecycle.ViewModelStore getViewModelStore();
    method public void onBackPressed();
    method public void setDismissHandler(kotlin.jvm.functions.Function0<kotlin.Unit>? dismissHandler);
    method public void setDisplayDismissButton(boolean shouldDisplayDismissButton);
    method public void setFontProvider(com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider);
    method public void setOfferingId(String? offeringId);
    method public void setOfferingId(String? offeringId, optional com.revenuecat.purchases.PresentedOfferingContext? presentedOfferingContext);
    method public void setPaywallListener(com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener);
  }

}
