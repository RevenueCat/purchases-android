// Signature format: 4.0
package com.revenuecat.purchases.ui.revenuecatui {

  @kotlin.RequiresOptIn(level=kotlin.RequiresOptIn.Level.ERROR) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.CLASS, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY}) public @interface ExperimentalPreviewRevenueCatUIPurchasesAPI {
  }

  public final class FooterLinksNoBrowserTest {
    ctor public FooterLinksNoBrowserTest();
    method public void Clicking Privacy with a browser should not show a toast();
    method public void Clicking Privacy without a browser should not crash and show a toast();
    method public void Clicking Terms with a browser should not show a toast();
    method public void Clicking Terms without a browser should not crash and show a toast();
    method public Object getAddActivityToRobolectricRule();
    method public void setUp();
    property public final Object addActivityToRobolectricRule;
  }

  public final class LegacyPaywallDataValidationTest {
    ctor public LegacyPaywallDataValidationTest();
    method public void Missing color tier in multi-tier config generate default paywall();
    method public void Missing image tier in multi-tier config only logs a warning();
    method public void Missing localization tier in multi-tier config generate default paywall();
    method public void No tiers in multi-tier config generate default paywall();
    method public void Unrecognized icons generate default paywall();
    method public void Unrecognized template name generates default paywall();
    method public void Unrecognized variable generates default paywall();
    method public void Unrecognized variables in features generate default paywall();
    method public void Validate a valid multi-tier paywall();
    method public void Validate a valid paywall();
    method public void Validate an offering without paywall();
  }

  public final class PaywallComponentDataValidationTests {
    ctor public PaywallComponentDataValidationTests();
    method public void Head of localizations map should always be the default locale();
    method public void Should accumulate errors if FontAliases are missing();
    method public void Should accumulate errors with Legacy fallback if some localizations are missing();
    method public void Should apply bottom window insets to the root if there is no sticky footer();
    method public void Should apply bottom window insets to the sticky footer();
    method public void Should apply top window insets to the hero image parent();
    method public void Should apply top window insets to the root if there is no hero image();
    method public void Should not fail if missing localizations are not used();
    method public void Should not fail on a missing blank FontAlias();
    method public void Should return AllLocalizationsMissing with Legacy fallback if all locales are missing();
    method public void Should successfully validate if all FontAliases are present();
    method public void Should use Fill size in root component even if given Fit();
    method public void Should use language-only localizations if available();
    field public static final String EXPECTED_TEXT_EN = "Hello, world!";
  }

  public final class PaywallDialogKt {
    method @androidx.compose.runtime.Composable public static void PaywallDialog(com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions paywallDialogOptions);
  }

  public final class PaywallDialogOptions {
    ctor public PaywallDialogOptions(com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions.Builder builder);
    method public kotlin.jvm.functions.Function1<com.revenuecat.purchases.CustomerInfo,java.lang.Boolean>? component1();
    method public kotlin.jvm.functions.Function0<kotlin.Unit>? component2();
    method public com.revenuecat.purchases.Offering? component3();
    method public boolean component4();
    method public com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? component5();
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallListener? component6();
    method public com.revenuecat.purchases.ui.revenuecatui.PurchaseLogic? component7();
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions copy(kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.CustomerInfo,java.lang.Boolean>? shouldDisplayBlock, kotlin.jvm.functions.Function0<kotlin.Unit>? dismissRequest, com.revenuecat.purchases.Offering? offering, boolean shouldDisplayDismissButton, com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider, com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, com.revenuecat.purchases.ui.revenuecatui.PurchaseLogic? purchaseLogic);
    method public kotlin.jvm.functions.Function0<kotlin.Unit>? getDismissRequest();
    method public com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? getFontProvider();
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallListener? getListener();
    method public com.revenuecat.purchases.Offering? getOffering();
    method public com.revenuecat.purchases.ui.revenuecatui.PurchaseLogic? getPurchaseLogic();
    method public kotlin.jvm.functions.Function1<com.revenuecat.purchases.CustomerInfo,java.lang.Boolean>? getShouldDisplayBlock();
    method public boolean getShouldDisplayDismissButton();
    property public final kotlin.jvm.functions.Function0<kotlin.Unit>? dismissRequest;
    property public final com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider;
    property public final com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener;
    property public final com.revenuecat.purchases.Offering? offering;
    property public final com.revenuecat.purchases.ui.revenuecatui.PurchaseLogic? purchaseLogic;
    property public final kotlin.jvm.functions.Function1<com.revenuecat.purchases.CustomerInfo,java.lang.Boolean>? shouldDisplayBlock;
    property public final boolean shouldDisplayDismissButton;
  }

  public static final class PaywallDialogOptions.Builder {
    ctor public PaywallDialogOptions.Builder();
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions build();
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions.Builder setCustomPurchaseLogic(com.revenuecat.purchases.ui.revenuecatui.PurchaseLogic? purchaseLogic);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions.Builder setDismissRequest(kotlin.jvm.functions.Function0<kotlin.Unit> dismissRequest);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions.Builder setFontProvider(com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions.Builder setListener(com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions.Builder setOffering(com.revenuecat.purchases.Offering? offering);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions.Builder setRequiredEntitlementIdentifier(String? requiredEntitlementIdentifier);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions.Builder setShouldDisplayBlock(kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.CustomerInfo,java.lang.Boolean>? shouldDisplayBlock);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallDialogOptions.Builder setShouldDisplayDismissButton(boolean shouldDisplayDismissButton);
  }

  public final class PaywallFooterKt {
    method @androidx.compose.runtime.Composable public static void OriginalTemplatePaywallFooter(com.revenuecat.purchases.ui.revenuecatui.PaywallOptions options, optional boolean condensed, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.PaddingValues,kotlin.Unit>? mainContent);
    method @Deprecated @androidx.compose.runtime.Composable public static void PaywallFooter(com.revenuecat.purchases.ui.revenuecatui.PaywallOptions options, optional boolean condensed, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.PaddingValues,kotlin.Unit>? mainContent);
  }

  public final class PaywallKt {
    method @androidx.compose.runtime.Composable public static void Paywall(com.revenuecat.purchases.ui.revenuecatui.PaywallOptions options);
  }

  public interface PaywallListener {
    method public default void onPurchaseCancelled();
    method public default void onPurchaseCompleted(com.revenuecat.purchases.CustomerInfo customerInfo, com.revenuecat.purchases.models.StoreTransaction storeTransaction);
    method public default void onPurchaseError(com.revenuecat.purchases.PurchasesError error);
    method public default void onPurchaseStarted(com.revenuecat.purchases.Package rcPackage);
    method public default void onRestoreCompleted(com.revenuecat.purchases.CustomerInfo customerInfo);
    method public default void onRestoreError(com.revenuecat.purchases.PurchasesError error);
    method public default void onRestoreStarted();
  }

  public final class PaywallOptions {
    ctor public PaywallOptions(com.revenuecat.purchases.ui.revenuecatui.PaywallOptions.Builder builder);
    method public com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? component3();
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallListener? component4();
    method public com.revenuecat.purchases.ui.revenuecatui.PurchaseLogic? component5();
    method public kotlin.jvm.functions.Function0<kotlin.Unit> component7();
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallOptions copy(com.revenuecat.purchases.ui.revenuecatui.OfferingSelection offeringSelection, boolean shouldDisplayDismissButton, com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider, com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, com.revenuecat.purchases.ui.revenuecatui.PurchaseLogic? purchaseLogic, com.revenuecat.purchases.ui.revenuecatui.PaywallMode mode, kotlin.jvm.functions.Function0<kotlin.Unit> dismissRequest);
    method public kotlin.jvm.functions.Function0<kotlin.Unit> getDismissRequest();
    method public com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? getFontProvider();
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallListener? getListener();
    method public com.revenuecat.purchases.ui.revenuecatui.PurchaseLogic? getPurchaseLogic();
    property public final kotlin.jvm.functions.Function0<kotlin.Unit> dismissRequest;
    property public final com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider;
    property public final com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener;
    property public final com.revenuecat.purchases.ui.revenuecatui.PurchaseLogic? purchaseLogic;
    field public static final com.revenuecat.purchases.ui.revenuecatui.PaywallOptions.Companion Companion;
  }

  public static final class PaywallOptions.Builder {
    ctor public PaywallOptions.Builder(kotlin.jvm.functions.Function0<kotlin.Unit> dismissRequest);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallOptions build();
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallOptions.Builder setFontProvider(com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallOptions.Builder setListener(com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallOptions.Builder setOffering(com.revenuecat.purchases.Offering? offering);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallOptions.Builder setPurchaseLogic(com.revenuecat.purchases.ui.revenuecatui.PurchaseLogic? purchaseLogic);
    method public com.revenuecat.purchases.ui.revenuecatui.PaywallOptions.Builder setShouldDisplayDismissButton(boolean shouldDisplayDismissButton);
  }

  public static final class PaywallOptions.Companion {
  }

  public final class PaywallUITest {
    ctor public PaywallUITest();
    method public error.NonExistentClass! getComposeTestRule();
    method public void purchasePackageClickCallsCorrectMethods();
    method public void purchaseSelectPackageClickCallsCorrectMethods();
    method public void setUp();
    property public final error.NonExistentClass! composeTestRule;
  }

  public interface PurchaseLogic {
    method public suspend Object? performPurchase(android.app.Activity activity, com.revenuecat.purchases.Package rcPackage, kotlin.coroutines.Continuation<? super com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult>);
    method public suspend Object? performRestore(com.revenuecat.purchases.CustomerInfo customerInfo, kotlin.coroutines.Continuation<? super com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult>);
  }

  public sealed interface PurchaseLogicResult {
  }

  public static final class PurchaseLogicResult.Cancellation implements com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult {
    field public static final com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult.Cancellation INSTANCE;
  }

  public static final class PurchaseLogicResult.Error implements com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult {
    ctor public PurchaseLogicResult.Error(optional com.revenuecat.purchases.PurchasesError? errorDetails);
    method public com.revenuecat.purchases.PurchasesError? component1();
    method public com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult.Error copy(com.revenuecat.purchases.PurchasesError? errorDetails);
    method public com.revenuecat.purchases.PurchasesError? getErrorDetails();
    property public final com.revenuecat.purchases.PurchasesError? errorDetails;
  }

  public static final class PurchaseLogicResult.Success implements com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult {
    field public static final com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult.Success INSTANCE;
  }

  public abstract class PurchaseLogicWithCallback implements com.revenuecat.purchases.ui.revenuecatui.PurchaseLogic {
    ctor public PurchaseLogicWithCallback();
    method public final suspend Object? performPurchase(android.app.Activity activity, com.revenuecat.purchases.Package rcPackage, kotlin.coroutines.Continuation<? super com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult>);
    method public abstract void performPurchaseWithCompletion(android.app.Activity activity, com.revenuecat.purchases.Package rcPackage, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult,kotlin.Unit> completion);
    method public final suspend Object? performRestore(com.revenuecat.purchases.CustomerInfo customerInfo, kotlin.coroutines.Continuation<? super com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult>);
    method public abstract void performRestoreWithCompletion(com.revenuecat.purchases.CustomerInfo customerInfo, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.ui.revenuecatui.PurchaseLogicResult,kotlin.Unit> completion);
  }

}

package com.revenuecat.purchases.ui.revenuecatui.activity {

  public final class PaywallActivityLauncher {
    ctor public PaywallActivityLauncher(androidx.activity.result.ActivityResultCaller resultCaller, com.revenuecat.purchases.ui.revenuecatui.activity.PaywallResultHandler resultHandler);
    method public void launch();
    method public void launch(optional com.revenuecat.purchases.Offering? offering);
    method public void launch(optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider);
    method public void launch(optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider, optional boolean shouldDisplayDismissButton);
    method @kotlin.jvm.JvmSynthetic public void launch(String offeringIdentifier, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider, optional boolean shouldDisplayDismissButton);
    method public void launchIfNeeded(optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider, optional boolean shouldDisplayDismissButton, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.CustomerInfo,java.lang.Boolean> shouldDisplayBlock);
    method public void launchIfNeeded(optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.CustomerInfo,java.lang.Boolean> shouldDisplayBlock);
    method public void launchIfNeeded(optional com.revenuecat.purchases.Offering? offering, kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.CustomerInfo,java.lang.Boolean> shouldDisplayBlock);
    method public void launchIfNeeded(String requiredEntitlementIdentifier);
    method public void launchIfNeeded(String requiredEntitlementIdentifier, optional com.revenuecat.purchases.Offering? offering);
    method public void launchIfNeeded(String requiredEntitlementIdentifier, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider);
    method public void launchIfNeeded(String requiredEntitlementIdentifier, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider, optional boolean shouldDisplayDismissButton);
    method public void launchIfNeeded(String requiredEntitlementIdentifier, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider, optional boolean shouldDisplayDismissButton, optional com.revenuecat.purchases.ui.revenuecatui.activity.PaywallDisplayCallback? paywallDisplayCallback);
    method @kotlin.jvm.JvmSynthetic public void launchIfNeeded(String requiredEntitlementIdentifier, String offeringIdentifier, optional com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider? fontProvider, optional boolean shouldDisplayDismissButton, optional com.revenuecat.purchases.ui.revenuecatui.activity.PaywallDisplayCallback? paywallDisplayCallback);
    method public void launchIfNeeded(kotlin.jvm.functions.Function1<? super com.revenuecat.purchases.CustomerInfo,java.lang.Boolean> shouldDisplayBlock);
  }

  public interface PaywallDisplayCallback {
    method public void onPaywallDisplayResult(boolean wasDisplayed);
  }

  public abstract sealed class PaywallResult implements android.os.Parcelable {
  }

  @kotlinx.parcelize.Parcelize public static final class PaywallResult.Cancelled extends com.revenuecat.purchases.ui.revenuecatui.activity.PaywallResult implements android.os.Parcelable {
    field public static final com.revenuecat.purchases.ui.revenuecatui.activity.PaywallResult.Cancelled INSTANCE;
  }

  @kotlinx.parcelize.Parcelize public static final class PaywallResult.Error extends com.revenuecat.purchases.ui.revenuecatui.activity.PaywallResult implements android.os.Parcelable {
    ctor public PaywallResult.Error(com.revenuecat.purchases.PurchasesError error);
    method public com.revenuecat.purchases.PurchasesError component1();
    method public com.revenuecat.purchases.ui.revenuecatui.activity.PaywallResult.Error copy(com.revenuecat.purchases.PurchasesError error);
    method public com.revenuecat.purchases.PurchasesError getError();
    property public final com.revenuecat.purchases.PurchasesError error;
  }

  @kotlinx.parcelize.Parcelize public static final class PaywallResult.Purchased extends com.revenuecat.purchases.ui.revenuecatui.activity.PaywallResult implements android.os.Parcelable {
    ctor public PaywallResult.Purchased(com.revenuecat.purchases.CustomerInfo customerInfo);
    method public com.revenuecat.purchases.CustomerInfo component1();
    method public com.revenuecat.purchases.ui.revenuecatui.activity.PaywallResult.Purchased copy(com.revenuecat.purchases.CustomerInfo customerInfo);
    method public com.revenuecat.purchases.CustomerInfo getCustomerInfo();
    property public final com.revenuecat.purchases.CustomerInfo customerInfo;
  }

  @kotlinx.parcelize.Parcelize public static final class PaywallResult.Restored extends com.revenuecat.purchases.ui.revenuecatui.activity.PaywallResult implements android.os.Parcelable {
    ctor public PaywallResult.Restored(com.revenuecat.purchases.CustomerInfo customerInfo);
    method public com.revenuecat.purchases.CustomerInfo component1();
    method public com.revenuecat.purchases.ui.revenuecatui.activity.PaywallResult.Restored copy(com.revenuecat.purchases.CustomerInfo customerInfo);
    method public com.revenuecat.purchases.CustomerInfo getCustomerInfo();
    property public final com.revenuecat.purchases.CustomerInfo customerInfo;
  }

  public interface PaywallResultHandler extends androidx.activity.result.ActivityResultCallback<com.revenuecat.purchases.ui.revenuecatui.activity.PaywallResult> {
  }

}

package com.revenuecat.purchases.ui.revenuecatui.components {

  public final class PaywallActionTests {
    ctor public PaywallActionTests();
    method public void Should pass the PaywallAction to the ViewModel();
    method public error.NonExistentClass! getComposeTestRule();
    property public final error.NonExistentClass! composeTestRule;
  }

}

package com.revenuecat.purchases.ui.revenuecatui.components.button {

  public final class ButtonComponentViewTests {
    ctor public ButtonComponentViewTests();
    method public void Should use the correct URL when the locale changes();
    method public error.NonExistentClass! getComposeTestRule();
    method public void onClick ignores further clicks until processing current click is done();
    property public final error.NonExistentClass! composeTestRule;
  }

}

package com.revenuecat.purchases.ui.revenuecatui.components.image {

  @kotlin.jvm.JvmSynthetic public final class ImageComponentViewKt {
    method public static android.graphics.Bitmap toBitmap(android.graphics.drawable.Drawable, @Px int width, @Px int height, @ColorInt int background);
  }

}

package com.revenuecat.purchases.ui.revenuecatui.components.modifier {

  public final class BackgroundTests {
    ctor public BackgroundTests();
    method public void Image background with FitMode FILL should fill the parent();
    method public void Should draw image background behind content();
    method public void Should draw image background overlay behind content();
    method public void Should properly set an image background();
    method public error.NonExistentClass! getComposeTestRule();
    method public void setup();
    method public void teardown();
    property public final error.NonExistentClass! composeTestRule;
  }

}

package com.revenuecat.purchases.ui.revenuecatui.components.pkg {

  public final class PackageComponentViewTests {
    ctor public PackageComponentViewTests();
    method public void Should properly update selected state of children();
    method public void Should take variable values from the correct package();
    method public error.NonExistentClass! getComposeTestRule();
    property public final error.NonExistentClass! composeTestRule;
  }

}

package com.revenuecat.purchases.ui.revenuecatui.components.properties {

  public final class ColorStyleTests {
    ctor public ColorStyleTests();
    method public void Should fail to combine if the ColorAlias is missing();
    method public void Should fail to combine if the ColorAlias points to another alias();
    method public void Should properly combine light and dark ColorAliases using different aliases();
    method public void Should properly combine light and dark ColorAliases using different aliases - aliased scheme only has light();
    method public void Should properly combine light and dark ColorAliases using the same alias();
    method public void Should properly combine light and dark ColorAliases using the same alias - aliased scheme only has light();
  }

}

package com.revenuecat.purchases.ui.revenuecatui.components.stack {

  public final class StackComponentViewTests {
    ctor public StackComponentViewTests();
    method public void Should change background color based on theme();
    method public void Should change border color based on theme();
    method public void Should change shadow color based on theme();
    method public void Should use the intro offer overrides as child of PackageComponentView();
    method public void Should use the intro offer overrides for the selected package();
    method public void Should use the selected overrides();
    method public error.NonExistentClass! getComposeTestRule();
    property public final error.NonExistentClass! composeTestRule;
  }

}

package com.revenuecat.purchases.ui.revenuecatui.components.style {

  public final class StyleFactoryTests {
    ctor public StyleFactoryTests();
    method public void Should create a StackComponentStyle where background takes preference over backgroundColor();
    method public void Should create a StackComponentStyle with backgroundColor if background not present();
    method public void Should create a StackComponentStyle with children for a StackComponent with children();
    method public void Should create a single TextComponentStyle for a single TextComponent();
    method public void Should fail to create a ButtonComponentStyle if localized URL is missing();
    method public void Should fail to create a TabControlComponent outside of a TabComponent();
    method public void Should fail to create a TabsComponent without tabs();
    method public void Should fail to create a TextComponentStyle if font is missing();
    method public void Should fail to create a TextComponentStyle if font is missing from an override();
    method public void Should fail to create a TextComponentStyle if localized text is missing();
    method public void Should fail to create a TextComponentStyle if localized text is missing from an override();
    method public void Should pair the default image with the default locale if there are no localized images();
    method public void Should remove ButtonComponents with unsupported properties();
    method public void Should successfully create a TextComponentStyle with custom fonts();
    method public void Should successfully create a buttons TabControlComponent inside a TabComponent();
    method public void Should successfully create a toggle TabControlComponent inside a TabComponent();
    method public void setup();
  }

}

package com.revenuecat.purchases.ui.revenuecatui.components.tabs {

  public final class TabsComponentViewTests {
    ctor public TabsComponentViewTests();
    method public void Should have no selected package when switching to a tab without packages();
    method public void Should include global packages when calculating discount();
    method public void Should not select the default package when switching tabs if the selected package is global();
    method public void Should not update selected state of tab children();
    method public void Should properly calculate discount from global packages when switching to a tab without packages();
    method public void Should properly calculate discount when switching tabs();
    method public void Should properly update selected state of tab control button children();
    method public void Should select available global package when switching to a tab without packages();
    method public void Should select the correct default package when switching tabs();
    method public error.NonExistentClass! getComposeTestRule();
    property public final error.NonExistentClass! composeTestRule;
  }

}

package com.revenuecat.purchases.ui.revenuecatui.components.text {

  public final class TextComponentViewTests {
    ctor public TextComponentViewTests();
    method public void Should change background color based on theme();
    method public void Should change text color based on theme();
    method public void Should correctly show or hide price decimals();
    method public void Should properly set the font size in a Material3 theme();
    method public void Should update variable values when the selected package changes();
    method public void Should use the correct override text when the locale changes();
    method public void Should use the correct text when the locale changes();
    method public void Should use the intro offer overrides as child of PackageComponentView();
    method public void Should use the intro offer overrides for the selected package();
    method public void Should use the selected overrides();
    method public error.NonExistentClass! getComposeTestRule();
    property public final error.NonExistentClass! composeTestRule;
  }

}

package com.revenuecat.purchases.ui.revenuecatui.composables {

  public final class AutoResizedTextKt {
    method @androidx.compose.runtime.Composable public static void AutoResizedText(String text, optional androidx.compose.ui.Modifier modifier, optional long color, optional androidx.compose.ui.text.TextStyle style, optional androidx.compose.ui.text.font.FontWeight fontWeight, optional int textAlign);
  }

  public final class CloseButtonKt {
    method @androidx.compose.runtime.Composable public static void CloseButton(androidx.compose.foundation.layout.BoxScope, boolean shouldDisplayDismissButton, androidx.compose.ui.graphics.Color? color, boolean actionInProgress, kotlin.jvm.functions.Function0<kotlin.Unit> onClick);
  }

  public final class DisableTouchesComposableKt {
    method @androidx.compose.runtime.Composable public static void DisableTouchesComposable(optional boolean shouldDisable, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  public final class InsetSpacersKt {
    method @androidx.compose.runtime.Composable public static void StatusBarSpacer();
    method @androidx.compose.runtime.Composable public static void SystemBarsSpacer();
  }

}

package com.revenuecat.purchases.ui.revenuecatui.customercenter {

  public final class CustomerCenterKt {
    method @androidx.compose.runtime.Composable public static void CustomerCenter(optional androidx.compose.ui.Modifier modifier, optional com.revenuecat.purchases.ui.revenuecatui.customercenter.CustomerCenterOptions options, kotlin.jvm.functions.Function0<kotlin.Unit> onDismiss);
  }

  public final class CustomerCenterOptions {
  }

  public static final class CustomerCenterOptions.Builder {
    ctor public CustomerCenterOptions.Builder();
    method public com.revenuecat.purchases.ui.revenuecatui.customercenter.CustomerCenterOptions build();
    method public com.revenuecat.purchases.ui.revenuecatui.customercenter.CustomerCenterOptions.Builder setListener(com.revenuecat.purchases.customercenter.CustomerCenterListener? listener);
  }

  public final class ShowCustomerCenter extends androidx.activity.result.contract.ActivityResultContract<kotlin.Unit,kotlin.Unit> {
    ctor public ShowCustomerCenter();
    method public android.content.Intent createIntent(android.content.Context context, kotlin.Unit input);
    method public void parseResult(int resultCode, android.content.Intent? intent);
  }

}

package com.revenuecat.purchases.ui.revenuecatui.customercenter.data {

  public final class CustomerCenterViewModelTests {
    ctor public CustomerCenterViewModelTests();
    method public error.NonExistentClass! dismissRestoreDialog reloads customer center();
    method public error.NonExistentClass! feedback survey completion notifies listeners with correct ID();
    method public error.NonExistentClass! isSupportedPaths does filter CANCEL when purchase is lifetime();
    method public error.NonExistentClass! isSupportedPaths does not filter CANCEL when purchase is not lifetime();
    method public error.NonExistentClass! loadAndDisplayPromotionalOffer returns false when offer is not eligible();
    method public error.NonExistentClass! loadCustomerCenter is called after successful promotional offer purchase();
    method public error.NonExistentClass! notifyListenersForManageSubscription calls both listeners();
    method public error.NonExistentClass! notifyListenersForManagementOptionSelected converts paths to actions and notifies listeners();
    method public error.NonExistentClass! notifyListenersForRestoreCompleted calls both listeners with correct customer info();
    method public error.NonExistentClass! notifyListenersForRestoreFailed calls both listeners with correct error();
    method public error.NonExistentClass! notifyListenersForRestoreStarted calls both listeners();
    method public error.NonExistentClass! onNavigationButtonPressed handles CLOSE and BACK buttons correctly();
    method public void setUp();
  }

  public final class PurchaseInformationTest {
    ctor public PurchaseInformationTest();
    method public void test PurchaseInformation with active Apple subscription and entitlement();
    method public void test PurchaseInformation with active Google subscription and entitlement();
    method public void test PurchaseInformation with expired Apple subscription and entitlement();
    method public void test PurchaseInformation with expired Google subscription and entitlement();
    method public void test PurchaseInformation with expired stripe entitlement();
    method public void test PurchaseInformation with non-renewing Apple subscription and entitlement();
    method public void test PurchaseInformation with non-renewing Google subscription and entitlement();
    method public void test PurchaseInformation with non-renewing stripe entitlement();
    method public void test PurchaseInformation with promotional entitlement();
    method public void test PurchaseInformation with promotional lifetime entitlement();
    method public void test PurchaseInformation with stripe entitlement();
  }

}

package com.revenuecat.purchases.ui.revenuecatui.customercenter.extensions {

  public final class SubscriptionOptionExtensionsTest {
    ctor public SubscriptionOptionExtensionsTest(String testName, com.revenuecat.purchases.ui.revenuecatui.customercenter.extensions.SubscriptionOptionExtensionsTest.TestCase testCase);
    method public static java.util.Collection<java.lang.Object[]> data();
    method public void getLocalizedDescription returns correct description();
    field public static final com.revenuecat.purchases.ui.revenuecatui.customercenter.extensions.SubscriptionOptionExtensionsTest.Companion Companion;
  }

  public static final class SubscriptionOptionExtensionsTest.Companion {
    method public java.util.Collection<java.lang.Object[]> data();
  }

  public static final class SubscriptionOptionExtensionsTest.TestCase {
    ctor public SubscriptionOptionExtensionsTest.TestCase(java.util.List<com.revenuecat.purchases.models.PricingPhase> pricingPhases, com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization localization, java.util.Locale locale, String expectedDescription);
    method public java.util.List<com.revenuecat.purchases.models.PricingPhase> component1();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization component2();
    method public java.util.Locale component3();
    method public String component4();
    method public com.revenuecat.purchases.ui.revenuecatui.customercenter.extensions.SubscriptionOptionExtensionsTest.TestCase copy(java.util.List<com.revenuecat.purchases.models.PricingPhase> pricingPhases, com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization localization, java.util.Locale locale, String expectedDescription);
    method public String getExpectedDescription();
    method public java.util.Locale getLocale();
    method public com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization getLocalization();
    method public java.util.List<com.revenuecat.purchases.models.PricingPhase> getPricingPhases();
    property public final String expectedDescription;
    property public final java.util.Locale locale;
    property public final com.revenuecat.purchases.customercenter.CustomerCenterConfigData.Localization localization;
    property public final java.util.List<com.revenuecat.purchases.models.PricingPhase> pricingPhases;
  }

}

package com.revenuecat.purchases.ui.revenuecatui.data {

  public final class MostExpensivePricePerMonthMicrosTests {
    ctor public MostExpensivePricePerMonthMicrosTests();
    method public void mostExpensivePricePerMonthMicros should be null for empty package list();
    method public void mostExpensivePricePerMonthMicros should ignore lifetime packages();
    method public void mostExpensivePricePerMonthMicros should return correct price for single package();
    method public void mostExpensivePricePerMonthMicros should return highest price among multiple monthly packages();
    method public void mostExpensivePricePerMonthMicros should return highest price among multiple packages with various periods();
    method public void mostExpensivePricePerMonthMicros should return null when all packages are lifetime();
  }

  public final class PaywallViewModelTest {
    ctor public PaywallViewModelTest();
    method public error.NonExistentClass! Custom completion handler purchase logic cancelled doesn't trigger syncPurchases();
    method public error.NonExistentClass! Custom completion handler purchase logic error doesn't trigger syncPurchases();
    method public error.NonExistentClass! Custom completion handler purchase logic success triggers syncPurchases();
    method public error.NonExistentClass! Custom completion handler restore purchases logic error does not trigger syncPurchases();
    method public error.NonExistentClass! Custom completion handler restore purchases logic success triggers syncPurchases();
    method public error.NonExistentClass! Custom suspend purchase logic cancelled doesn't trigger syncPurchases();
    method public error.NonExistentClass! Custom suspend purchase logic error doesn't trigger syncPurchases();
    method public error.NonExistentClass! Custom suspend purchase logic success triggers syncPurchases();
    method public error.NonExistentClass! Custom suspend restore purchases logic error does not trigger syncPurchases();
    method public error.NonExistentClass! Custom suspend restore purchases logic success triggers syncPurchases();
    method public void Error loading empty offerings();
    method public void Error loading offerings();
    method public void Initial state is correct();
    method public void Should load default offering();
    method public void Should load fallback paywall if using components paywall in footer condensed mode();
    method public void Should load fallback paywall if using components paywall in footer mode();
    method public void Should load paywall components if using components paywall in full screen mode();
    method public void Should load selected offering();
    method public void clearActionError();
    method public void close button pressed();
    method public void close tracks close event();
    method public void close tracks close event only once before another impression();
    method public error.NonExistentClass! getInstantExecutorRule();
    method public void handlePackagePurchase();
    method public void handlePackagePurchase cancellation tracks cancel event();
    method public void handlePackagePurchase errors other than cancellation do not track cancel event();
    method public void handlePackagePurchase fails();
    method public void handleRestorePurchases();
    method public void handleRestorePurchases calls onDismiss if shouldDisplayBlock condition false();
    method public void handleRestorePurchases does not call onDismiss if shouldDisplayBlock condition true();
    method public void handleRestorePurchases fails();
    method public void purchase cancellation tracks cancel event();
    method public void purchase errors other than cancellation do not track cancel event();
    method public void purchasePackage();
    method public void purchasePackage fails();
    method public void restorePurchases();
    method public void restorePurchases calls onDismiss if shouldDisplayBlock condition false();
    method public void restorePurchases does not call onDismiss if shouldDisplayBlock condition true();
    method public void restorePurchases fails();
    method public void selectPackage();
    method public void setInstantExecutorRule(error.NonExistentClass!);
    method public void setUp();
    method public void trackPaywallImpression after close tracks again();
    method public void trackPaywallImpression does nothing if offering does not have a paywall();
    method public void trackPaywallImpression does nothing if state is loading();
    method public void trackPaywallImpression multiple times in a row only tracks once();
    method public void trackPaywallImpression tracks event with correct data();
    method public void updateState does not update if same state();
    method public void updateState does update if different state();
    property public final error.NonExistentClass! instantExecutorRule;
  }

}

package com.revenuecat.purchases.ui.revenuecatui.data.processed {

  public final class VariableProcessorTest {
    ctor public VariableProcessorTest();
    method public void do not round prices();
    method public void localizedDiscount returns correct discount string();
    method public void process variables does not modify unknown variables();
    method public void process variables does not process sub_offer_duration_2 for inapp products();
    method public void process variables does not process sub_offer_duration_2 if no free trial nor intro price();
    method public void process variables does not process sub_offer_duration_2 when only free trial is available();
    method public void process variables does not process sub_offer_price for inapp products();
    method public void process variables does not process sub_offer_price if no free trial nor intro price();
    method public void process variables does not process sub_offer_price_2 for inapp products();
    method public void process variables does not process sub_offer_price_2 if no free trial nor intro price();
    method public void process variables does not process sub_offer_price_2 when only free trial is available();
    method public void process variables does not process variable if no spaces();
    method public void process variables processes app_name();
    method public void process variables processes price();
    method public void process variables processes price_per_period();
    method public void process variables processes price_per_period localized in spanish();
    method public void process variables processes price_per_period_full();
    method public void process variables processes price_per_period_full localized in spanish();
    method public void process variables processes product_name();
    method public void process variables processes sub_duration();
    method public void process variables processes sub_duration falls back to period name if no period();
    method public void process variables processes sub_duration in spanish();
    method public void process variables processes sub_duration_in_months();
    method public void process variables processes sub_duration_in_months falls back to period name if no period();
    method public void process variables processes sub_duration_in_months in spanish();
    method public void process variables processes sub_offer_duration();
    method public void process variables processes sub_offer_duration as empty string if no offers();
    method public void process variables processes sub_offer_duration for spanish locale();
    method public void process variables processes sub_offer_duration_2 for products with both free trial and intro price();
    method public void process variables processes sub_offer_duration_2 for products with free trial and intro price for spanish();
    method public void process variables processes sub_offer_price for both free trial and intro price();
    method public void process variables processes sub_offer_price for free trials();
    method public void process variables processes sub_offer_price for intro prices();
    method public void process variables processes sub_offer_price_2 for products with both free trial and intro price();
    method public void process variables processes sub_period();
    method public void process variables processes sub_period custom period();
    method public void process variables processes sub_period unknown period();
    method public void process variables processes sub_period_abbreviated();
    method public void process variables processes sub_period_length();
    method public void process variables processes sub_price_per_month();
    method public void process variables processes sub_price_per_month in other locales();
    method public void process variables processes sub_price_per_week();
    method public void process variables processes sub_price_per_week in other locales();
    method public void process variables processes sub_relative_discount();
    method public void process variables processes sub_relative_discount with no discount();
    method public void process variables processes total_price_and_per_month();
    method public void process variables processes total_price_and_per_month in spanish();
    method public void process variables processes total_price_and_per_month_full();
    method public void process variables processes total_price_and_per_month_full in spanish();
    method public void process variables returns original text if empty string();
    method public void process variables returns original text if no variables();
    method public void process variables returns processed text with multiple variable();
    method public void process variables returns processed text with single variable();
    method public void round prices();
    method public void setUp();
  }

}

package com.revenuecat.purchases.ui.revenuecatui.extensions {

  public final class IntSizeExtensionsTest {
    ctor public IntSizeExtensionsTest();
    method public void aspectRatio with landscape screen();
    method public void aspectRatio with portrait screen();
    method public void aspectRatio with square screen();
  }

  public final class PackageExtensionsKt {
    method public static boolean isMonthly(com.revenuecat.purchases.Package);
    method public static boolean isSubscription(com.revenuecat.purchases.Package);
  }

  public final class PackageExtensionsTest {
    ctor public PackageExtensionsTest();
    method public void introEligibility calculation is INELIGIBLE if defaultOption is base plan();
    method public void introEligibility calculation is MULTIPLE_OFFERS_ELIGIBLE if defaultOption has trial and discounted price();
    method public void introEligibility calculation is SINGLE_OFFER_ELIGIBLE if defaultOption only has a free trial();
  }

  public final class TypographyExtensionsKt {
    method public static androidx.compose.material3.Typography copyWithFontProvider(androidx.compose.material3.Typography, com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider fontProvider);
  }

  public final class UrisKt {
    method public static void openUriOrElse(android.content.Context, String uri, kotlin.jvm.functions.Function1<? super java.lang.Exception,kotlin.Unit> fallbackAction);
  }

}

package com.revenuecat.purchases.ui.revenuecatui.fonts {

  public final class CustomFontProvider implements com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider {
    ctor public CustomFontProvider(androidx.compose.ui.text.font.FontFamily fontFamily);
    method public androidx.compose.ui.text.font.FontFamily getFont(com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType type);
  }

  public final class CustomParcelizableFontProvider implements com.revenuecat.purchases.ui.revenuecatui.fonts.ParcelizableFontProvider {
    ctor public CustomParcelizableFontProvider(com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFontFamily fontFamily);
    method public com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFontFamily getFont(com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType type);
  }

  public interface FontProvider {
    method public androidx.compose.ui.text.font.FontFamily? getFont(com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType type);
  }

  @kotlinx.parcelize.Parcelize public final class GoogleFontProvider implements android.os.Parcelable {
    ctor public GoogleFontProvider(@ArrayRes int certificates, optional String providerAuthority, optional String providerPackage);
    method public int component1();
    method public String component2();
    method public String component3();
    method public com.revenuecat.purchases.ui.revenuecatui.fonts.GoogleFontProvider copy(@ArrayRes int certificates, String providerAuthority, String providerPackage);
    method public int getCertificates();
    method public String getProviderAuthority();
    method public String getProviderPackage();
    method public androidx.compose.ui.text.googlefonts.GoogleFont.Provider toGoogleProvider();
    property public final int certificates;
    property public final String providerAuthority;
    property public final String providerPackage;
  }

  public interface ParcelizableFontProvider {
    method public com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFontFamily? getFont(com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType type);
  }

  public abstract sealed class PaywallFont implements android.os.Parcelable {
  }

  @kotlinx.parcelize.Parcelize public static final class PaywallFont.AssetFont extends com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFont {
    ctor public PaywallFont.AssetFont(String path, optional @kotlinx.parcelize.TypeParceler androidx.compose.ui.text.font.FontWeight fontWeight, optional int fontStyle);
    method public String component1();
    method public androidx.compose.ui.text.font.FontWeight component2();
    method public int component3();
    method public com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFont.AssetFont copy(String path, androidx.compose.ui.text.font.FontWeight fontWeight, int fontStyle);
    method public int getFontStyle();
    method public androidx.compose.ui.text.font.FontWeight getFontWeight();
    method public String getPath();
    property public final int fontStyle;
    property public final androidx.compose.ui.text.font.FontWeight fontWeight;
    property public final String path;
  }

  @kotlinx.parcelize.Parcelize public static final class PaywallFont.GoogleFont extends com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFont {
    ctor public PaywallFont.GoogleFont(String fontName, com.revenuecat.purchases.ui.revenuecatui.fonts.GoogleFontProvider fontProvider, optional @kotlinx.parcelize.TypeParceler androidx.compose.ui.text.font.FontWeight fontWeight, optional int fontStyle);
    method public String component1();
    method public com.revenuecat.purchases.ui.revenuecatui.fonts.GoogleFontProvider component2();
    method public androidx.compose.ui.text.font.FontWeight component3();
    method public int component4();
    method public com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFont.GoogleFont copy(String fontName, com.revenuecat.purchases.ui.revenuecatui.fonts.GoogleFontProvider fontProvider, androidx.compose.ui.text.font.FontWeight fontWeight, int fontStyle);
    method public String getFontName();
    method public com.revenuecat.purchases.ui.revenuecatui.fonts.GoogleFontProvider getFontProvider();
    method public int getFontStyle();
    method public androidx.compose.ui.text.font.FontWeight getFontWeight();
    property public final String fontName;
    property public final com.revenuecat.purchases.ui.revenuecatui.fonts.GoogleFontProvider fontProvider;
    property public final int fontStyle;
    property public final androidx.compose.ui.text.font.FontWeight fontWeight;
  }

  @kotlinx.parcelize.Parcelize public static final class PaywallFont.ResourceFont extends com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFont {
    ctor public PaywallFont.ResourceFont(@FontRes int resourceId, optional @kotlinx.parcelize.TypeParceler androidx.compose.ui.text.font.FontWeight fontWeight, optional int fontStyle);
    method public int component1();
    method public androidx.compose.ui.text.font.FontWeight component2();
    method public int component3();
    method public com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFont.ResourceFont copy(@FontRes int resourceId, androidx.compose.ui.text.font.FontWeight fontWeight, int fontStyle);
    method public int getFontStyle();
    method public androidx.compose.ui.text.font.FontWeight getFontWeight();
    method public int getResourceId();
    property public final int fontStyle;
    property public final androidx.compose.ui.text.font.FontWeight fontWeight;
    property public final int resourceId;
  }

  @kotlinx.parcelize.Parcelize public final class PaywallFontFamily implements android.os.Parcelable {
    ctor public PaywallFontFamily(java.util.List<? extends com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFont> fonts);
    method public java.util.List<com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFont> component1();
    method public com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFontFamily copy(java.util.List<? extends com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFont> fonts);
    method public java.util.List<com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFont> getFonts();
    property public final java.util.List<com.revenuecat.purchases.ui.revenuecatui.fonts.PaywallFont> fonts;
  }

  public enum TypographyType {
    method public static com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType[] values();
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType BODY_LARGE;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType BODY_MEDIUM;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType BODY_SMALL;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType DISPLAY_LARGE;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType DISPLAY_MEDIUM;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType DISPLAY_SMALL;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType HEADLINE_LARGE;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType HEADLINE_MEDIUM;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType HEADLINE_SMALL;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType LABEL_LARGE;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType LABEL_MEDIUM;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType LABEL_SMALL;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType TITLE_LARGE;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType TITLE_MEDIUM;
    enum_constant public static final com.revenuecat.purchases.ui.revenuecatui.fonts.TypographyType TITLE_SMALL;
  }

}

package com.revenuecat.purchases.ui.revenuecatui.helpers {

  public final class BlurBenchmarkTest {
    ctor public BlurBenchmarkTest();
    method public void Blur images using native blur();
  }

  public final class DateExtensionsKt {
    method public static java.util.Date add(java.util.Date, long duration);
    method public static java.util.Date subtract(java.util.Date, long duration);
  }

  public final class NonEmptyMapTests {
    ctor public NonEmptyMapTests();
    method public void Value from entry should take precedence over value from map with the same key();
  }

  public final class ResultTests {
    ctor public ResultTests();
    method public void mapOrAccumulate should accumulate errors from multiple results();
    method public void mapOrAccumulate should return an empty list for empty input();
    method public void mapOrAccumulate should transform a list of successful results();
    method public void mapValuesOrAccumulate on Map should accumulate errors from multiple results();
    method public void mapValuesOrAccumulate on Map should transform a map of successful results();
    method public void mapValuesOrAccumulate on Map should work with single entry map();
    method public void mapValuesOrAccumulate on NonEmptyMap should accumulate errors from multiple results();
    method public void mapValuesOrAccumulate on NonEmptyMap should transform a map of successful results();
    method public void mapValuesOrAccumulate on NonEmptyMap should work with single entry map();
    method public void zipOrAccumulate should accumulate errors from multiple results();
    method public void zipOrAccumulate with two successful results should return transformed success();
  }

  public final class TestDurationExtensionsKt {
    method public static java.util.Date ago(long);
    method public static java.util.Date fromNow(long);
  }

  public final class WindowHelperTest {
    ctor public WindowHelperTest();
    method public void shouldUseLandscapeLayout with condensed mode();
    method public void shouldUseLandscapeLayout with footer mode();
    method public void shouldUseLandscapeLayout with fullscreen condensed height();
    method public void shouldUseLandscapeLayout with fullscreen expanded height();
    method public void shouldUseLandscapeLayout with fullscreen medium height();
  }

}

package com.revenuecat.purchases.ui.revenuecatui.snapshottests {

  public abstract class BasePaparazziTest {
    ctor public BasePaparazziTest(com.revenuecat.purchases.ui.revenuecatui.snapshottests.TestConfig testConfig);
    method public static final java.util.Collection<java.lang.Object[]> data();
    method public final error.NonExistentClass! getPaparazzi();
    method public final void screenshotTest(kotlin.jvm.functions.Function0<kotlin.Unit> content);
    property public final error.NonExistentClass! paparazzi;
    field public static final com.revenuecat.purchases.ui.revenuecatui.snapshottests.BasePaparazziTest.Companion Companion;
  }

  public static final class BasePaparazziTest.Companion {
    method public java.util.Collection<java.lang.Object[]> data();
  }

  public final class PaywallComponentsTemplatePreviewRecorder extends com.revenuecat.purchases.ui.revenuecatui.snapshottests.BasePaparazziTest {
    ctor public PaywallComponentsTemplatePreviewRecorder(String name, com.revenuecat.purchases.Offering offering);
    method public void PaywallComponentsTemplate_Test();
    method public static java.util.List<java.lang.Object[]> data();
    method public static void setup();
    method public static void teardown();
    field public static final com.revenuecat.purchases.ui.revenuecatui.snapshottests.PaywallComponentsTemplatePreviewRecorder.Companion Companion;
  }

  public static final class PaywallComponentsTemplatePreviewRecorder.Companion {
    method public java.util.List<java.lang.Object[]> data();
    method public void setup();
    method public void teardown();
  }

  public final class TemplateSnapshotTest extends com.revenuecat.purchases.ui.revenuecatui.snapshottests.BasePaparazziTest {
    ctor public TemplateSnapshotTest(com.revenuecat.purchases.ui.revenuecatui.snapshottests.TemplateTestConfig testConfig);
    method public static java.util.Collection<java.lang.Object[]> data();
    method public void templateCondensedFooter();
    method public void templateFooter();
    method public void templateFullScreen();
    field public static final com.revenuecat.purchases.ui.revenuecatui.snapshottests.TemplateSnapshotTest.Companion Companion;
  }

  public static final class TemplateSnapshotTest.Companion {
    method public java.util.Collection<java.lang.Object[]> data();
  }

  public final class TemplateTestConfig {
    ctor public TemplateTestConfig(com.revenuecat.purchases.ui.revenuecatui.snapshottests.TestConfig testConfig, com.revenuecat.purchases.Offering offering);
    method public com.revenuecat.purchases.ui.revenuecatui.snapshottests.TestConfig component1();
    method public com.revenuecat.purchases.Offering component2();
    method public com.revenuecat.purchases.ui.revenuecatui.snapshottests.TemplateTestConfig copy(com.revenuecat.purchases.ui.revenuecatui.snapshottests.TestConfig testConfig, com.revenuecat.purchases.Offering offering);
    method public com.revenuecat.purchases.Offering getOffering();
    method public com.revenuecat.purchases.ui.revenuecatui.snapshottests.TestConfig getTestConfig();
    property public final com.revenuecat.purchases.Offering offering;
    property public final com.revenuecat.purchases.ui.revenuecatui.snapshottests.TestConfig testConfig;
  }

  public final class TestConfig {
    ctor public TestConfig(String name, error.NonExistentClass deviceConfig);
    method public String component1();
    method public error.NonExistentClass! component2();
    method public com.revenuecat.purchases.ui.revenuecatui.snapshottests.TestConfig copy(String name, error.NonExistentClass! deviceConfig);
    method public error.NonExistentClass! getDeviceConfig();
    method public String getName();
    property public final error.NonExistentClass! deviceConfig;
    property public final String name;
  }

}

package com.revenuecat.purchases.ui.revenuecatui.views {

  public final class CustomerCenterView extends androidx.compose.ui.platform.AbstractComposeView {
    ctor public CustomerCenterView(android.content.Context context);
    ctor public CustomerCenterView(android.content.Context context, android.util.AttributeSet? attrs);
    ctor public CustomerCenterView(android.content.Context context, android.util.AttributeSet? attrs, int defStyleAttr);
    ctor public CustomerCenterView(android.content.Context context, optional kotlin.jvm.functions.Function0<kotlin.Unit>? dismissHandler);
    method @androidx.compose.runtime.Composable public void Content();
    method public void setDismissHandler(kotlin.jvm.functions.Function0<kotlin.Unit>? dismissHandler);
  }

  public class OriginalTemplatePaywallFooterView extends android.widget.FrameLayout {
    ctor public OriginalTemplatePaywallFooterView(android.content.Context context);
    ctor public OriginalTemplatePaywallFooterView(android.content.Context context, android.util.AttributeSet? attrs);
    ctor public OriginalTemplatePaywallFooterView(android.content.Context context, android.util.AttributeSet? attrs, int defStyleAttr);
    ctor public OriginalTemplatePaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering);
    ctor public OriginalTemplatePaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener);
    ctor public OriginalTemplatePaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, optional com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider);
    ctor public OriginalTemplatePaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, optional com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider, optional boolean condensed);
    ctor public OriginalTemplatePaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, optional com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider, optional boolean condensed, optional kotlin.jvm.functions.Function0<kotlin.Unit>? dismissHandler);
    method public final void setDismissHandler(kotlin.jvm.functions.Function0<kotlin.Unit>? dismissHandler);
    method public final void setFontProvider(com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider);
    method public final void setOfferingId(String? offeringId);
    method public final void setPaywallListener(com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener);
  }

  @Deprecated public class PaywallFooterView extends com.revenuecat.purchases.ui.revenuecatui.views.OriginalTemplatePaywallFooterView {
    ctor @Deprecated public PaywallFooterView(android.content.Context context);
    ctor @Deprecated public PaywallFooterView(android.content.Context context, android.util.AttributeSet? attrs);
    ctor @Deprecated public PaywallFooterView(android.content.Context context, android.util.AttributeSet? attrs, int defStyleAttr);
    ctor @Deprecated public PaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering);
    ctor @Deprecated public PaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener);
    ctor @Deprecated public PaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, optional com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider);
    ctor @Deprecated public PaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, optional com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider, optional boolean condensed);
    ctor @Deprecated public PaywallFooterView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, optional com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider, optional boolean condensed, optional kotlin.jvm.functions.Function0<kotlin.Unit>? dismissHandler);
  }

  public final class PaywallView extends androidx.compose.ui.platform.AbstractComposeView {
    ctor public PaywallView(android.content.Context context);
    ctor public PaywallView(android.content.Context context, android.util.AttributeSet? attrs);
    ctor public PaywallView(android.content.Context context, android.util.AttributeSet? attrs, int defStyleAttr);
    ctor public PaywallView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering);
    ctor public PaywallView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener);
    ctor public PaywallView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, optional com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider);
    ctor public PaywallView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, optional com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider, optional Boolean? shouldDisplayDismissButton);
    ctor public PaywallView(android.content.Context context, optional com.revenuecat.purchases.Offering? offering, optional com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener, optional com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider, optional Boolean? shouldDisplayDismissButton, optional kotlin.jvm.functions.Function0<kotlin.Unit>? dismissHandler);
    method @androidx.compose.runtime.Composable public void Content();
    method public void setDismissHandler(kotlin.jvm.functions.Function0<kotlin.Unit>? dismissHandler);
    method public void setDisplayDismissButton(boolean shouldDisplayDismissButton);
    method public void setFontProvider(com.revenuecat.purchases.ui.revenuecatui.fonts.FontProvider? fontProvider);
    method public void setOfferingId(String? offeringId);
    method public void setPaywallListener(com.revenuecat.purchases.ui.revenuecatui.PaywallListener? listener);
  }

}

